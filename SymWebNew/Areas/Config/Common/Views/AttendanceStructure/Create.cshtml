@model SymViewModel.Attendance.AttendanceStructureVM
@using UIHelper.MVC

@using (Html.BeginForm("Create", "AttendanceStructure", FormMethod.Post, new { @Id = "frmTimePolicy" }))
{
    @Html.ValidationSummary(true)

    <div class="headrow">
        <button type="button" title="Save Data" onclick="pageSubmit('frmTimePolicy')" class="sym-btn-save">&nbsp;Save</button>
        <label class="pull-right">Attendance Structure > Create</label>
    </div>
    
    <div class="thinbox">
        <div class="th_thinbox">
            <p>Time Policy</p>
        </div>

        <div class="timePolicy">

            <div class="row">
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Name)
                        @Html.HiddenFor(model => model.Id)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.Name, new { @placeholder = "Name", @class = " required form-control" })
                        @Html.ValidationMessageFor(model => model.Name)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.InTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.InTime, new { @onchange = "policyTimeCheck(this)", @class = "customTimePicker required form-control" })
                        @Html.ValidationMessageFor(model => model.InTime)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.OutTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.OutTime, new { @onchange = "policyTimeCheck(this)", @class = "customTimePicker required form-control" })
                        @Html.ValidationMessageFor(model => model.OutTime)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.WorkingHour)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.WorkingHour, new { @onchange = "", @class = "required form-control" })
                        @Html.ValidationMessageFor(model => model.WorkingHour)
                    </div>
                </div>
                 <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.InGrace)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.InGrace, new { @onchange = "NumberCheck(this)", @class = " right required form-control" })
                        @Html.ValidationMessageFor(model => model.InGrace)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.OutGrace)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.OutGrace, new { @onchange = "NumberCheck(this)", @class = " right required form-control" })
                        @Html.ValidationMessageFor(model => model.OutGrace)
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.InTimeStart)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.InTimeStart, new { @onchange = "policyTime(this)", @class = "customTimePicker required form-control" })
                        @Html.ValidationMessageFor(model => model.InTimeStart)
                    </div>

                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.InTimeEnd)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.InTimeEnd, new { @onchange = "policyTime(this)", @class = "customTimePicker required form-control" })
                        @Html.ValidationMessageFor(model => model.InTimeEnd)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.LunchTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.LunchTime, new { @onchange = "policyTimeCheck(this)", @class = "customTimePicker required form-control" })
                        @Html.ValidationMessageFor(model => model.LunchTime)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.LunchBreak)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.LunchBreak, new { @class = " right  required form-control" })
                        @Html.ValidationMessageFor(model => model.LunchBreak)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.OTTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.OTTime, new { @onchange = "NumberCheck(this)", @class = " required form-control" })
                        @Html.ValidationMessageFor(model => model.OTTime)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsInOT)
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.IsInOT, new { @class = " required form-control" })
                        @Html.ValidationMessageFor(model => model.IsInOT)
                    </div>
                </div>
            </div>
            <div class="row thinbox">
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsTiff)
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.IsTiff, new { @class = " required form-control" })
                        @Html.ValidationMessageFor(model => model.IsTiff)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.TiffinSTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.TiffinSTime, new { @onchange = "NumberCheck(this)", @class = "customTimePicker  required form-control" })
                        @Html.ValidationMessageFor(model => model.TiffinSTime)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsTiffNextDay)
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.IsTiffNextDay, new { @class = "required form-control" })
                        @Html.ValidationMessageFor(model => model.IsTiffNextDay)
                    </div>
                </div>

                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.DeductTiffTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.DeductTiffTime, new { @onchange = "NumberCheck(this)", @class = "right required form-control" })
                        @Html.ValidationMessageFor(model => model.DeductTiffTime)
                    </div>
                </div>
            </div>
            <div class="row thinbox">
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsIfter)
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.IsIfter, new { @class = " required form-control" })
                        @Html.ValidationMessageFor(model => model.IsIfter)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IfterSTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.IfterSTime, new { @onchange = "NumberCheck(this)", @class = "customTimePicker  required form-control" })
                        @Html.ValidationMessageFor(model => model.IfterSTime)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsIfterNextDay)
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.IsIfterNextDay, new { @class = "required form-control" })
                        @Html.ValidationMessageFor(model => model.IsIfterNextDay)
                    </div>
                </div>

                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.DeductIfterTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.DeductIfterTime, new { @onchange = "NumberCheck(this)", @class = "right required form-control" })
                        @Html.ValidationMessageFor(model => model.DeductIfterTime)
                    </div>
                </div>
            </div>
            <div class="row thinbox">
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsDinNextDay)
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.IsDinNextDay, new { @class = " required form-control" })
                        @Html.ValidationMessageFor(model => model.IsDinNextDay)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.DinnerSTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.DinnerSTime, new { @onchange = "NumberCheck(this)", @class = "customTimePicker  required form-control" })
                        @Html.ValidationMessageFor(model => model.DinnerSTime)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.IsDinNextDay)
                    </div>
                    <div class="editor-field">
                        @Html.CheckBoxFor(model => model.IsDinNextDay, new { @class = "required form-control" })
                        @Html.ValidationMessageFor(model => model.IsDinNextDay)
                    </div>
                </div>

                <div class="col-md-2">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.DeductDinTime)
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.DeductDinTime, new { @onchange = "NumberCheck(this)", @class = "right required form-control" })
                        @Html.ValidationMessageFor(model => model.DeductDinTime)
                    </div>
                </div>
            </div>
            <div class="row thinbox">
                <div class="row">
                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsDeductLateIn)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsDeductLateIn, new { @class = "right required form-control" })
                            @Html.ValidationMessageFor(model => model.IsDeductLateIn)
                        </div>
                    </div>
                    @*<div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.LateInMin)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.LateInMin, new { @onchange = "NumberCheck(this)", @class = " required form-control" })
                            @Html.ValidationMessageFor(model => model.LateInMin)
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.LateInAllowDays)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.LateInAllowDays, new { @onchange = "NumberCheck(this)", @class = " required form-control" })
                            @Html.ValidationMessageFor(model => model.LateInAllowDays)
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.LateInAbsentDays)
                        </div>
                        <div class="editor-field">
                            <div class="col-md-2">
                                <label style="margin-top: 10px;">=</label>
                            </div>
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.LateInAbsentDays, new { @readonly = "readonly", @Value = "1", @onchange = "NumberCheck(this)", @class = " required form-control" })
                                @Html.ValidationMessageFor(model => model.LateInAbsentDays)
                            </div>
                        </div>
                    </div>*@
                </div>
                <div class="row">
                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsDeductEarlyOut)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsDeductEarlyOut, new { @class = " required form-control" })
                            @Html.ValidationMessageFor(model => model.IsDeductEarlyOut)
                        </div>
                    </div>
                    @*<div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EarlyOutMin)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.EarlyOutMin, new { @onchange = "NumberCheck(this)", @class = "  required form-control" })
                            @Html.ValidationMessageFor(model => model.EarlyOutMin)
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EarlyOutAllowDays)
                        </div>
                        <div class="editor-field">

                            @Html.TextBoxFor(model => model.EarlyOutAllowDays, new { @onchange = "NumberCheck(this)", @class = "  required form-control" })
                            @Html.ValidationMessageFor(model => model.EarlyOutAllowDays)
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.EarlyOutAbsentDays)
                        </div>
                        <div class="editor-field">
                            <div class="col-md-2">
                                <label style="margin-top: 10px;">=</label>
                            </div>
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.EarlyOutAbsentDays, new { @readonly = "readonly", @Value = "1", @onchange = "NumberCheck(this)", @class = "  required form-control" })
                                @Html.ValidationMessageFor(model => model.EarlyOutAbsentDays)
                            </div>
                        </div>
                    </div>*@
                </div>
                <div class="row">


                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IsOTRoundUp)
                        </div>
                        <div class="editor-field">
                            @Html.CheckBoxFor(model => model.IsOTRoundUp, new { @class = " required form-control" })
                            @Html.ValidationMessageFor(model => model.IsOTRoundUp)
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.OTRoundUpMin)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.OTRoundUpMin, new { @onchange = "NumberCheck(this)", @class = " required form-control" })
                            @Html.ValidationMessageFor(model => model.OTRoundUpMin)
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="editor-label">
                        @Html.LabelFor(model => model.Remarks)
                    </div>
                    <div class="editor-field">
                        @Html.TextAreaFor(model => model.Remarks, new { @placeholder = "Remarks", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Remarks)
                    </div>
                </div>
            </div>
        </div>
        @*
    <p>
        <input type="submit" value="Save"  class="btn btn-info"/>
        <input type="button" class="btn btn-info" data-url="/Common/AttendanceStructure" onclick="BackToList(this)" value="Back" />
    </p>*@
    </div>
    
    <div class="headrow">
        <button type="button" title="Save Data" onclick="pageSubmit('frmTimePolicy')" class="sym-btn-save">&nbsp;Save</button>
    </div>
}
<script>
    $(function () {
        $('.customTimePicker').ptTimeSelect();
        fromWriteColor("timePolicy");
        valiDation("frmTimePolicy");

    });

    function policyTimeCheck(sender) {
        var InTime = ParseDate($("#InTime").val());
        var OutTime = ParseDate($("#OutTime").val());
        var InTimeStart = ParseDate($("#InTimeStart").val());
        var InTimeEnd = ParseDate($("#InTimeEnd").val());
        var LunchTime = ParseDate($("#LunchTime").val());

        if (InTime > OutTime) {
            $(sender).val("");
            ShowResult("Fail", "Out Time can't greater than In Time!");
        }
        else if (InTime > InTimeStart) {
            $(sender).val("");
            ShowResult("Fail", "In Time can't greater than In Start Time!");
        }
        else if (InTime > InTimeEnd) {
            $(sender).val("");
            ShowResult("Fail", "In Time can't greater than In End Time!");
        }
        else if (InTime > LunchTime) {
            $(sender).val("");
            ShowResult("Fail", "In Time can't greater than Lunch Time!");
        }
        else if (InTimeStart > OutTime) {
            $(sender).val("");
            ShowResult("Fail", "In Start Time can't greater than Out Time!");
        }
        else if (InTimeEnd > OutTime) {
            $(sender).val("");
            ShowResult("Fail", "In End Time can't greater than Out Time!");
        }
        else if (LunchTime > OutTime) {
            $(sender).val("");
            ShowResult("Fail", "Lunch Time can't greater than Out Time!");
        }
    }
</script>
