@model VATViewModel.DTOs.PurchaseMasterVM
@using UIHelper.MVC
@using (Html.BeginForm("CreateEdit", "Purchase", FormMethod.Post, new { enctype = "multipart/form-data", @Id = "frmPurchase" }))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.Post)
    @Html.HiddenFor(model => model.Operation)
    @Html.HiddenFor(model => model.TransactionType)
    @Html.HiddenFor(model => model.IsImport)
    @Html.HiddenFor(model => model.IsTotalPrice, new { @class = "cIsTotalPrice" })
    @Html.Hidden("TotalPriceIncludingVAT", "", new { @class = "cTotalPriceIncludingVAT" })
    @Html.HiddenFor(model => model.RebateDate)
    
    
    
    <input id="ConvFactor" type="hidden"/>
    <div class="headrow">
        @if (Model.Operation == "update")
        {
            <button type="button" title="Update Data" onclick="SaveData()" class="sym-btn-update">&nbsp;Update</button>
            <button type="button" title="Post Data" onclick="PostData(this)" class="sym-btn-post">&nbsp;Post</button>
            if (Model.TransactionType == "PurchaseReturn")
            {
            <button type="button" onclick="window.open('/VMS/NBRReport/Report_PurchaseReturn?SalesInvoiceNo=@Model.PurchaseInvoiceNo')" class=" sym-btn-report cVAT6_3Report">&nbsp;VAT6.8</button>
            }
            <label class="pull-right">Purchase > Edit (@Model.TransactionType)</label>
        }
        else if (Model.Operation == "add")
        {
            
            <button type="button" title="Save Data" onclick="SaveData()" class="sym-btn-save">&nbsp;Save</button>
            <label class="pull-right">Purchase > Create (@Model.TransactionType)</label>
        }
        <button type="button" title="" class="sym-btn-report trVat16">&nbsp;VAT 6.1</button>
        @*<button type="button" title="View Report" class=" sym-btn-report vat18">&nbsp;VAT 18</button>*@
        <button type="button" title="" class="sym-btn-report purMIS">&nbsp;MIS</button>
        <button type="button" title="Go To Index" data-url="/VMS/Purchase?TransactionType=@Model.TransactionType" onclick="GoTo(this)" class="sym-btn-detail">&nbsp;Index</button>
        <button type="button" title="Add New Issue" data-url="/VMS/Purchase/Create?tType=@Model.TransactionType" onclick="GoTo(this)" id="" class="sym-btn-add ">&nbsp;New</button>
    </div>
    if (Model.Operation == "update") {
    <div class="col-sm-12 col-md-12">
        <div class="input-group   col-lg-8  col-md-8  col-sm-8 col-xs-12 text-color col-md-offset-2" style="">
            <a class="input-group-addon btn btn-primary hidden-xs changePage" data-pager-action='first' id="first"><i class="fa fa-angle-double-left"></i>First</a>
            <a class="input-group-addon btn btn-primary hidden-xs changePage" data-pager-action='previous' id="precode"><i class="fa fa-angle-left"></i>Previous</a>
            @Html.SimpleDropDown("", "/Config/DropDown/IdNameTtype?tableName=PurchaseInvoiceHeaders&Id=Id&Name=PurchaseInvoiceNo&type=" + Model.TransactionType + "&code=PurchaseInvoiceNo", new { @class = " trNavigateMenu form-control selectDropdown " })
            <a class="input-group-addon btn btn-primary changePage" data-pager-action='current' id="current"><i class="fa fa-search"></i></a>
            <a class="input-group-addon btn btn-primary hidden-xs changePage" data-pager-action='next' id="nextcode">Next <i class="fa  fa-angle-right"></i></a>
            <a class="input-group-addon btn btn-primary hidden-xs changePage" data-pager-action='last' id="last">Last <i class="fa  fa-angle-double-right"></i></a>
        </div>
    </div>
    }
    <div class="clearfix"></div>
    <div>
        <div id="PurchaseInvoice" class="tab-pane fade in active">
            <div class="thinbox formDesign trkMY-0">
                <div class="th_thinbox">
                    <p>Basic</p>
                </div>
                <div class="row">
                    <div class="col-md-2">
                        <div class="editor-label">
                            <label>Pur Invoice No</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PurchaseInvoiceNo, new { @placeholder = "New", @class = " form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.PurchaseInvoiceNo)
                        </div>
                    </div>
                    @*<div class="trkWidth150">
                        <div class="editor-label">
                            <label for="ReceiveDate">Pur Date</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ReceiveDate, new { @placeholder = "Receive Date", @class = " trReceiveDate trVAT18Date trVAT16Date defaultDate customDatePicker required form-control" })
                            @Html.ValidationMessageFor(model => model.ReceiveDate)
                        </div>
                    </div>*@
                    
                    <div class="trkWidth150">
                        <div class="editor-label">
                            <label for="ReceiveDate">Pur Date</label>
                        </div>
                        <div class="editor-field flatpickrTrigger">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.ReceiveDate, new { @class = "trReceiveDate trVAT18Date trVAT16Date customflatpickr required form-control" })
                                <span class="input-group-addon" style="padding:2px 3px !important;">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.ReceiveDate)
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="editor-label">
                            <label for="BENumber">Challan/Other No</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.BENumber, new { @placeholder = "BE no", @class = " trBENumber form-control" })
                            @Html.ValidationMessageFor(model => model.BENumber)
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="editor-label">
                            <label for="SerialNo">Ref. No</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBox("SerialNo", null, new { @class = " trSerialNo form-control" })
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="editor-label">
                            <label for="ReturnId">Return Pur No</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ReturnId, new { @placeholder = "Return Pur No", @class = "trReturnId form-control", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="trkWidth50">
                        <div class="editor-label">
                            <label>&nbsp;</label>
                        </div>
                        <button type="button" class=" sym-btn-search purchaseBtn"></button>
                    </div>
                    @*<div class="col-md-2">
                        <div class="editor-label">
                            <label for="VendorID">Vendor</label>
                        </div>
                        <div class="editor-field">
                            @Html.HiddenFor(m => m.VendorID, new { @class = "form-control trVendorId" })
                            @Html.TextBoxFor(m => m.VendorName, new { @class = "form-control trVendorName", @readonly = "readonly" })
                        </div>
                    </div>*@
                 
                </div>

                <div class="row">
                    <div class="col-md-2">
                        <div class="editor-label">
                            <label for="VendorID">Vendor</label>
                        </div>
                        <div class="editor-field s2">
                            @Html.SimpleDropDownFor(m => m.VendorID, "/Config/DropDown/Vendor", new { @class = " trVendorId required form-control selectDropdown" })
                        </div>
                    </div>
                    <div class="trk_5">
                        <div class="editor-label">
                            <label>&nbsp;</label>
                        </div>
                        <div class="editor-field">
                            <button type="button" title="Click to Search Vendor" id="vendorBtn" class="sym-btn-search"></button>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="editor-label">
                            <label for="LCNumber">LC No</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.LCNumber, new { @placeholder = "LC Number", @class = "trLCNumber form-control" })
                            @Html.ValidationMessageFor(model => model.LCNumber)
                        </div>
                    </div>

                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="LCDate">LC Date</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.LCDate, new { @placeholder = "LC Date", @class = " trLCDate defaultDate customDatePicker required form-control" })
                            @Html.ValidationMessageFor(model => model.LCDate)
                        </div>
                    </div>

                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="InvoiceDate">Invoice Date</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.InvoiceDate, new { @placeholder = "Invoice Date", @class = " trInvoiceDate defaultDate customDatePicker required form-control" })
                            @Html.ValidationMessageFor(model => model.InvoiceDate)
                        </div>
                    </div>



                    @*<div class="col-md-2">*@
                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="VehicleID">Vehicle</label>
                        </div>
                        <div class="editor-field s2">
                            @*@Html.SimpleDropDownFor(m => m.VehicleID, "/Config/DropDown/Vehicle", new { @class = " trVehicle form-control  selectDropdown" })*@

                            @Html.TextBoxFor(m => m.VehicleNo, null, new { @placeholder = "Vehicle No", @class = "cVehicleNo  form-control", @id = "IdVehicleNo" })

                        </div>
                    </div>
                    @*<div class="trk_5">
                        <div class="editor-label">
                            <label>&nbsp;</label>
                        </div>
                        <div class="editor-field">
                            <button type="button" title="Click to add Vehicle" class="sym-btn-add trkXSBtn" onclick="window.open('/VMS/Vehicle/Create')"></button>
                            <button type="button" title="Click to load Vehicles" class="sym-btn-refresh trkXSBtn" data-url="/Config/DropDown/Vehicle" onclick="refreshDropdown(this, 'VehicleID')"></button>
                        </div>
                    </div>*@

                  @*  <div class="col-md-2">*@
                    <div class="col-md-2">
                        <div class="editor-label">
                            <label for="VehicleType">Vehicle Type</label>
                        </div>
                        <div class="editor-field">
                            @*@Html.TextBoxFor(m => m.VehicleType, null, new { @placeholder = "Type", @class = "trVehicleType  form-control", @readonly = "readonly" })*@
                            @Html.TextBoxFor(m => m.VehicleType, null, new { @placeholder = "Type", @class = "cVehicleType  form-control" })
                        </div>
                    </div>



                </div>
            </div>
            <div class="thinbox col-md-12 formDesign trkMY-0">
                <div class="th_thinbox">
                    <p>Product</p>
                </div>
                <div class=" detailHeadRow ">

                    <div class="row">
                        @*<div class="col-md-4">
                            <div class="editor-label">
                                <label for="DItemName">Product</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("DItemName", "", new { @class = "form-control trItemName", @readonly = "readonly" })
                            </div>
                        </div>*@
                        <div class="col-md-1">
                            <div class="editor-label">
                                <label>Product Type</label>
                            </div>
                            <div class="editor-field">
                                @Html.SimpleDropDownFor(m => m.ProductType, "/Config/DropDown/ProductTypes", new { @class = " form-control notClearing cProductType" })
                            </div>
                        </div>
                        <div class="col-md-1">
                            <div class="editor-label">
                                <label>Product Group</label>
                            </div>
                            <div class="editor-field">
                                @*+ @Model.ProductType*@
                                @Html.SimpleDropDownFor(m => m.ProductCategoryId, "//", new { @class = " cProductCategoryId form-control selectDropdown " })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="editor-label">
                                <label for="Product">Product</label>
                            </div>
                            <div class="editor-field">
                                @Html.SimpleDropDown("Product", "/Config/DropDown/Product?IsRaw=" + @Model.ProductType, new { @class = " trProduct  form-control selectDropdown" })
                            </div>
                        </div>
                        <div class="trk_5">
                            <div class="editor-label">
                                <label>&nbsp;</label>
                            </div>
                            <div class="editor-field">
                                <button type="button" title="Click to Search Product" id="productBtn" class="sym-btn-search"></button>
                            </div>
                        </div>
                        <div class="trk_5">
                            <div class="editor-label">
                                <label>&nbsp;</label>
                            </div>
                            <div class="editor-field">
                                @*<button type="button" title="Click to add Product" class="sym-btn-add trkXSBtn" onclick="window.open('/VMS/Product/Create')"></button>*@
                                <button type="button" title="Click to add Product" class="sym-btn-add trkXSBtn" onclick="window.open('/VMS/Product/Create?TransactionType=Other')"></button>
                                <button type="button" title="Click to load Products" class="sym-btn-refresh trkXSBtn" data-url="/Config/DropDown/Product" onclick="refreshDropdown(this,'Product')"></button>
                            </div>
                        </div>
                        @Html.Hidden("productName", "", new { @class = " trName" })
                        @Html.Hidden("itemNo", "", new { @class = " trItemNo" })
                        @Html.Hidden("productCode", "", new { @class = " trProductCode" })
                        @Html.Hidden("BOMId", "", new { @class = " cBOMId" })
                        @Html.Hidden("UomConv", "1", new { @class = "cUomConv" })
                        @Html.Hidden("IsFixedOtherVAT", "", new { @class = "cIsFixedOtherVAT" })
                        @Html.Hidden("IsFixedOtherSD", "", new { @class = "cIsFixedOtherSD" })
                        @Html.Hidden("IsHouseRent", "", new { @class = "cIsHouseRent" })
                        @Html.Hidden("IsVDS", "", new { @class = "cIsVDS" })

                        @Html.Hidden("PreviousPurchaseInvoiceNo", "", new { @class = " cPreviousPurchaseInvoiceNo" })
                        @Html.Hidden("PreviousInvoiceDateTime", "", new { @class = " cPreviousInvoiceDateTime" })
                        @Html.Hidden("PreviousNBRPrice", "", new { @class = " cPreviousNBRPrice" })
                        @Html.Hidden("PreviousQuantity", "", new { @class = " cPreviousQuantity" })
                        @Html.Hidden("PreviousUOM", "", new { @class = " cPreviousUOM" })
                        @Html.Hidden("PreviousSubTotal", "", new { @class = " cPreviousSubTotal" })
                        @Html.Hidden("PreviousVATAmount", "", new { @class = " cPreviousVATAmount" })
                        @Html.Hidden("PreviousVATRate", "", new { @class = " cPreviousVATRate" })
                        @Html.Hidden("PreviousSD", "", new { @class = " cPreviousSD" })
                        @Html.Hidden("PreviousSDAmount", "", new { @class = " cPreviousSDAmount" })
                        @Html.Hidden("ReasonOfReturn", "", new { @class = " cReasonOfReturn" })

                        <div class="col-md-1">
                            <div class="editor-label">
                                <label for="UOM">UOM</label>
                            </div>
                            <div class="editor-field input-group">
                                @Html.TextBox("UOM", null, new { @placeholder = "UOM", @class = " trUOM right   form-control", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="col-md-1">
                            <div class="editor-label">
                                <label>Pkt Size</label>
                            </div>
                            <div class="editor-field">
                                <select class="Dropdown form-control DropdownInited trPackSize" id="PackSize"></select>
                            </div>
                        </div>



                        <div class="col-md-1">
                            <div class="editor-label">
                                <label for="Quantity">Quantity</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("Quantity", "0", new { @placeholder = "Quantity", @class = " trQuantity priceLen right   form-control" })
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="editor-label">
                                <label for="TotalPrice">Total Price</label>
                            </div>
                            <div class="editor-field ">
                                @Html.TextBox("TotalPrice", "0", new { @placeholder = "Total Pirce", @class = "trTotalPrice priceLen checkNumber right   form-control" })
                            </div>
                        </div>
                        <div class="col-md-1">
                            <div class="editor-label">
                                <label for="VAT">VAT</label>
                            </div>
                            <div class="editor-field input-group">
                                @Html.TextBox("VATRate", null, new { @placeholder = "VAT rate", @class = " trVATRate NumberCheckAddDetail   form-control", @readonly = "readonly" })
                                <span class="input-group-addon">%</span>
                            </div>
                        </div>
                        <div class="col-md-1">
                            <div class="editor-label">
                                <label for="VAT">VAT(Amt)</label>
                            </div>
                            <div class="editor-field input-group">
                                @Html.TextBox("LocalVATAmount", "0", new { @class = " cLocalVATAmount NumberCheckAddDetail   form-control", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-1">
                            <div class="editor-label">
                                <label for="SD">SD</label>
                            </div>
                            <div class="editor-field input-group">
                                @Html.TextBox("SD", null, new { @placeholder = "SD", @class = " trSDRate NumberCheckAddDetail  form-control", @readonly = "readonly" })
                                <span class="input-group-addon">%</span>
                            </div>
                        </div>
                        <div class="col-md-1">
                            <div class="editor-label">
                                <label for="SD">SD(Amt)</label>
                            </div>
                            <div class="editor-field input-group">
                                @Html.TextBox("LocalSDAmount", null, new { @class = " cLocalSDAmount NumberCheckAddDetail  form-control", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="col-md-1">
                            <div class="editor-label">
                                <label for="Stock">Stock</label>
                            </div>
                            <div class="editor-field ">
                                @Html.TextBox("Stock", null, new { @placeholder = "Stock", @class = " trStock NumberCheckAddDetail right   form-control", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="editor-label">
                                <label for="HSCode">HS Code</label>
                            </div>
                            <div class="editor-field ">
                                @Html.TextBox("HSCode", null, new { @placeholder = "HS Code", @class = " trHSCode   form-control", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="col-md-1">
                            <div class="editor-label">
                                <label>Type</label>
                            </div>
                            <div class="editor-field">
                                <select class="trType form-control">
                                    <option value="VAT">VAT</option>
                                    <option value="Non-VAT">Non-VAT</option>
                                    <option value="Tarrif">Tarrif</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-1">
                            <div class="editor-label">
                                <label for="VDSRate">VDSRate</label>
                            </div>
                            <div class="editor-field input-group">
                                @Html.TextBox("VDSRate", null, new { @class = " trVDSRate NumberCheckAddDetail  form-control" })
                                <span class="input-group-addon">%</span>
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="editor-label">
                                <label for="VDSAmount">VDS Amount</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("VDSAmount", null, new { @placeholder = "VDS Amount", @class = " trVDSAmount   form-control", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="col-md-1">
                            <div class="editor-label">
                                <label for="WithVDS">With VDS</label>
                            </div>
                            <div class="editor-field">
                                <select name="WithVDS" class="trVDS form-control">
                                    <option value="N">N</option>
                                    <option value="Y">Y</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-1">
                            <div class="editor-label">
                                <label>&nbsp;</label>
                            </div>
                            <div class="editor-field">
                                <div id="ItemExist" title="Add Detail" data-url="/Vms/Purchase/BlankItem" class="sym-btn-add-row AddRow" data-container="editorItemRows4">&nbsp;Add</div>
                            </div>
                        </div>
                    </div>
                </div>
                    <div>
                
                        <div class="fixedParent">

                            @if (Model.Details != null)
                        {
                                <table class="trkFixTable" id="itemTable">
                                    <thead>
                                        <tr>
                                            <th>
                                                Action
                                            </th>
                                            <th>Code</th>
                                            <th>Product Name</th>
                                            <th>UOM</th>
                                            <th>Quantity</th>
                                            <th>Unit Price</th>
                                            <th>SubTotal</th>
                                            <th>SD</th>
                                            <th>SD Amount</th>
                                            <th>VAT Rate</th>
                                            <th>VAT</th>
                                            <th>Total</th>
                                            <th>Type</th>
                                            <th>Base Price</th>
                                            <th>Base Qty</th>
                                            <th>Base UOM</th>
                                            <th>Convt. Factor</th>
                                            <th>VDS Rate</th>
                                            <th>VDS Amount</th>
                                            <th>PreviousPurchaseInvoiceNo</th>
                                            <th>PreviousInvoiceDateTime</th>
                                            <th>PreviousNBRPrice</th>
                                            <th>PreviousQuantity</th>
                                            <th>PreviousUOM</th>
                                            <th>PreviousSubTotal</th>
                                            <th>PreviousVATAmount</th>
                                            <th>PreviousVATRate</th>
                                            <th>PreviousSD</th>
                                            <th>PreviousSDAmount</th>
                                            <th>ReasonOfReturn</th>

                                        </tr>
                                    </thead>

                                    <tbody id="editorItemRows4">
                                        @foreach (var item in Model.Details)
                                    {
                                        Html.RenderPartial("_detailAdjustment", item);
                                    }
                                    </tbody>
                                </table>

                        }
                        </div>

                        <hr />
                        <div class="row trkBelowDiv">
                            <div class="col-md-1 trkLabelTopRight">
                                <label for="TotalAmount">Total</label>
                            </div>
                            <div class="col-md-2">
                                <div class="editor-field ">
                                    <strong>@Html.TextBoxFor(model => model.TotalAmount, null, new { @class = "totalAmount NumberCheckAddDetail right form-control", @readonly = "readonly" })</strong>
                                </div>
                            </div>

                            <div class="col-md-1 trkLabelTopRight">
                                <label for="SDTotal">SD Total</label>
                            </div>
                            <div class="col-md-2">
                                <div class="editor-field ">
                                    <strong>@Html.TextBox("SDTotal", null, new { @class = "SDTotal NumberCheckAddDetail right form-control", @readonly = "readonly" })</strong>
                                </div>
                            </div>

                            <div class="col-md-1 trkLabelTopRight">
                                <label for="TotalVATAmount">VAT Total</label>
                            </div>
                            <div class="col-md-2">
                                <div class="editor-field ">
                                    <strong>@Html.TextBoxFor(m => m.TotalVATAmount, null, new { @class = "VATTotal NumberCheckAddDetail right form-control", @readonly = "readonly" })</strong>
                                </div>
                            </div>
                            <div class="col-md-1 trkLabelTopRight">
                                <label for="GrandTotal">Grand Total</label>
                            </div>
                            <div class="col-md-2">
                                <div class="editor-field ">
                                    <strong>@Html.TextBox("GrandTotal", null, new { @class = "GrandTotal NumberCheckAddDetail right form-control", @readonly = "readonly" })</strong>
                                </div>
                            </div>
                        </div>

                        <div class="row trkBelowDiv">
                            <div class="col-md-1 trkLabelTopRight">
                                <label for="Comments">Comments</label>
                            </div>
                            <div class="col-md-2">
                                <div class="editor-field">
                                    @Html.TextAreaFor(m => m.Comments, new { @class = " form-control" })
                                </div>
                            </div>

                            <div class="col-md-2 trkLabelTopRight">
                                <label for="CustomHouse">Custom House</label>
                            </div>
                            <div class="col-md-3">
                                <div class="editor-field">
                                    @Html.TextBoxFor(m => m.CustomHouse, new { @class = " form-control" })
                                </div>
                            </div>

                            <div class="col-md-2 trkLabelTopRight">
                                <label for="LandedCost">Landed Cost</label>
                            </div>
                            <div class="col-md-2">
                                <div class="editor-field ">
                                    @Html.TextBoxFor(m => m.LandedCost, new { @class = " form-control right" })
                                </div>
                            </div>
                        </div>

                    </div>
                </div>

        </div>
    </div>
    <div class="headrow">
        @if (Model.Operation == "update")
        {
            <button type="button" title="Update Data" onclick="SaveData()" class="sym-btn-update">&nbsp;Update</button>
            <button type="button" title="Post Data" onclick="PostData(this)" class="sym-btn-post">&nbsp;Post</button>
             if (Model.TransactionType == "PurchaseReturn")
            {
            <button type="button" onclick="window.open('/VMS/NBRReport/Report_PurchaseReturn?SalesInvoiceNo=@Model.PurchaseInvoiceNo')" class=" sym-btn-report cVAT6_3Report">&nbsp;VAT6.8</button>
            }
        }
        else if (Model.Operation == "add")
        {
            <button type="button" title="Save Data" onclick="SaveData()" class="sym-btn-save">&nbsp;Save</button>
        }
        <button type="button" title="" class="sym-btn-report trVat16">&nbsp;VAT 6.1</button>
        @*<button type="button" title="View Report" class=" sym-btn-report vat18">&nbsp;VAT 18</button>*@
        <button type="button" title="" class="sym-btn-report purMIS">&nbsp;MIS</button>
        <button type="button" title="Go To Index" data-url="/VMS/Purchase?TransactionType=@Model.TransactionType" onclick="GoTo(this)" class="sym-btn-detail">&nbsp;Index</button>
        <button type="button" title="Add New Issue" data-url="/VMS/Purchase/Create?tType=@Model.TransactionType" onclick="GoTo(this)" id="" class="sym-btn-add ">&nbsp;New</button>
    </div>
    
}

<div id="myModal" class="trkmodal"></div>

<div id="productDetails" class="trkmodal">
    <div class="trkmodal-content">
    </div>
</div>
<div id="myHigherModal" class="HigherModal"></div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <script>
    // Date Time  flatpickr
    document.addEventListener("DOMContentLoaded", function () {
        var flatpickrInput = document.querySelector('.editor-field input.customflatpickr');
        var flatpickrTrigger = document.querySelector('.flatpickrTrigger');
        flatpickrTrigger.addEventListener('click', function () {
            debugger;
            flatpickrInput.click();
        });
        flatpickr(flatpickrInput, {
            enableTime: true,
            dateFormat: "d-M-Y H:i",
            time_24hr: true
            //,minuteIncrement: 1
        });
        $('.customflatpickr').prop("readonly", true);
    });

</script>


    
    @*for fixed table*@
    <script>
        ////fixed header column table 

        function callingFixedTable() {
            var args = [150, 120, 200, 60, 100, 100, 130, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 200, 200, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150];
            trkFixedTable("itemTable", 2, args);
        }
        
        $(function () {
            callingFixedTable();
        })

    </script>

    @*modal and navigation*@
    <script>
        function showModal() {
            var operation = '@Model.Operation';

            var modal = document.getElementById('myModal');
            var itemNo = $('.dItemNo').val();
            var invoiceDate = '@Model.InvoiceDate';

            var url = "/Vms/Purchase/PrintVAT16?itemNo="+itemNo+"&invoiceDate="+invoiceDate;
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    complete: function () { $(".loading").fadeOut(200).hide("slow") },
                    success: function (html) {
                        modal.style.display = "block";
                        $("#myModal").html(html);
                    }
                });
        }
        /////product search modal
        function modalInit() {
            var modal = document.getElementById('myModal');
            // Get the button that opens the modal
            var btn = document.getElementById("productBtn");
            // When the user clicks the button, open the modal 
            btn.onclick = function () {
                var code = $('.trProductCode').val();
                var url = "/Vms/Product/GetProducts?code="+code;
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    complete: function () { $(".loading").fadeOut(200).hide("slow") },
                    success: function (html) {
                        modal.style.display = "block";
                        $("#myModal").html(html);
                    }
                });
            }
        }
        ////Navigating function
        function navigatePage() {
            var interval = setInterval(function () {
                if (document.querySelectorAll('.trNavigateMenu option').length > 0) {
                    var id = '@Model.Id';
                    $('.trNavigateMenu').select2("val", id);
                    clearInterval(interval);
                }
            }, 200);
            ////navigating previous-next
            $('.changePage').click(function () {
                var id = '@Model.Id';
                var ttype='@Model.TransactionType';
                var btn = $(this).attr("data-pager-action");
                if (btn.toLocaleLowerCase() == "current") {
                    var targetId = $('.trNavigateMenu').val();
                    if (id == targetId) {
                        return;
                    }
                    id = targetId;
                }
                window.location = "/VMS/Purchase/Navigate?id=" + id + "&btn=" + btn + "&ttype=" + ttype;
            });
        }
        $('#productBtn').click(function () {
            var productCode = $('.trProductCode').val();
            var url = "/Vms/Product/GetProductPopUp?targetId=ProductName&ProductCode=" + productCode;
            modalInitHigher(url);
        });
        $('#vendorBtn').click(function () {
            var vendorName = $('.trVendorId option:selected').text();
            var url = "/Vms/Vendor/GetVendorPopUp?VendorName=" + vendorName;
            var modal = document.getElementById('myHigherModal');
            $.ajax({
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                success: function (html) {
                    modal.style.display = "block";
                    $("#myHigherModal").html(html);
                }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
            });
        });

        function callbackFromVendorModal(sender) {
            var id = $(sender).children('td.popUpVendorId').text();
            $('.trVendorId').select2('val', id);//robin
        }
        function callbackFromProductModal(sender) {
            var code = $(sender).children('td.popUpItemCode').text();
            var itemNo = $(sender).children('td.popUpItemNo').text();
            $('.trProductCode').val(code);
            $('.trItemNo').val(itemNo);
            ProductNameChange(code);
            $('.trProduct').select2('val', itemNo);
        }
        function showProductDetail() {
            var productDetail = document.getElementById('productDetails');
            $(document).on("dblclick", '.tablerow', function () {
                var code = $(this).find('input.dItemNo').val();
                var url = "/Vms/Product/ShowProduct?code=" + code;
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    complete: function () { $(".loading").fadeOut(200).hide("slow") },
                    success: function (html) {
                        productDetail.style.display = "block";
                        $(".trkmodal-content").html(html);
                    }
                });
            });
        }
    </script>
@*--------------------------PreviousSales--------------------------*@

<script>

    function PreviousPurchasePopUp(sender) {


        var url = "/Vms/Purchase/PopUpPreviousPurchase";

            var $closestRow = $(sender).closest('.tablerow');

            var code = $closestRow.find('.dProductCode').val();
            var name = $closestRow.find('.dItemName').val();
            var UOM = $closestRow.find('.dUOM').val();
            var Quantity = $closestRow.find('.dQuantity ').val();
            var UnitPrice = $closestRow.find('.dSalesPrice').val();
            //var UnitPrice = $closestRow.find('.dUnitPrice').val();
            var vSubTotal = $closestRow.find('.dSubTotal').val();
            var CnFAmount = $closestRow.find('.dCnFAmount').val();
            var InsuranceAmount = $closestRow.find('.dInsuranceAmount').val();
            var AssessableValue = $closestRow.find('.dAssessableValue ').val();
            var CDAmount = $closestRow.find('.dCDAmount  ').val();
            var RDAmount = $closestRow.find('.dRDAmount').val();
            var SD = $closestRow.find('.dSD').val();
            var SDAmount = $closestRow.find('.dSDAmount ').val();
            var VATRate = $closestRow.find('.dVATRate ').val();
            var VATAmount = $closestRow.find('.dVATAmount').val();
            var ATVAmount = $closestRow.find('.dATVAmount ').val();
            var AITAmount = $closestRow.find('.dAITAmount ').val();
            var OthersAmount = $closestRow.find('.dOthersAmount').val();
            var Total = $closestRow.find('.dTotal').val();
            var Type = $closestRow.find('.dType').val();
            var UOMPrice = $closestRow.find('.dBasePrice').val();
            var UOMQty = $closestRow.find('.dBaseQty ').val();
            var UOMn = $closestRow.find('.dBaseUOM').val();
            var UOMc = $closestRow.find('.dConvFactor').val();
            var VDSRate = $closestRow.find('.dVDSRate ').val();
            var VDSAmount = $closestRow.find('.dVDSAmount').val();
            var IsFixedVAT = $closestRow.find('.dIsFixedVAT').val();
            var FixedVATAmount = $closestRow.find('.dFixedVATAmount').val();
            var BOMId = $closestRow.find('.dBOMId').val();
            var USDValue = $closestRow.find('.dUSDValue').val();
            var USDVAT = $closestRow.find('.dUSDVAT').val();
            var VATableValue = $closestRow.find('.dVATableValue').val();
            var TDSSection = $closestRow.find('.dTDSSection').val();
            var TDSCode = $closestRow.find('.dTDSCode').val();
            var RebateAmount = $closestRow.find('.dRebateAmount').val();
            var ExpireDate = $closestRow.find('.dExpireDate').val();
            var CPCName = $closestRow.find('.dCPCName').val();
            var BEItemNo = $closestRow.find('.dBEItemNo').val();
            var TVBAmount = $closestRow.find('.dTVBAmount').val();
            var TVAAmount = $closestRow.find('.dTVAAmount').val();
            var NBRPrice = $closestRow.find('.dNBRPrice').val();
            var ItemNo = $closestRow.find('.dItemNo').val();
            var Comments = $closestRow.find('.dRemarks').val();
            var DutyRemarks = $closestRow.find('.dDutyRemarks').val();
            var RebateRate = $closestRow.find('.dRebateRate').val();
            var TransactionType = $closestRow.find('.dTransactionType').val();
            var PurchaseReturnId = $closestRow.find('.dPreviousPurchaseInvoiceNo').val();
            var PreviousInvoiceDateTime = $closestRow.find('.dPreviousInvoiceDateTime').val();
            var PreviousNBRPrice = $closestRow.find('.dPreviousNBRPrice').val();
            var PreviousQuantity = $closestRow.find('.dPreviousQuantity').val();
            var PreviousUOM = $closestRow.find('.dPreviousUOM').val();
            var PreviousSubTotal = $closestRow.find('.dPreviousSubTotal').val();
            var PreviousVATAmount = $closestRow.find('.dPreviousVATAmount').val();
            var PreviousVATRate = $closestRow.find('.dPreviousVATRate').val();
            var PreviousSD = $closestRow.find('.dPreviousSD').val();
            var PreviousSDAmount = $closestRow.find('.dPreviousSDAmount').val();
            var ReasonOfReturn = $closestRow.find('.dReasonOfReturn').val();
        console.log()
            var modelData = {
                ProductName: name,
                ProductCode: code,
                UOM: UOM,
                Quantity: Quantity,
                UnitPrice: UnitPrice,
                SubTotal: vSubTotal,
                CnFAmount: CnFAmount,
                InsuranceAmount: InsuranceAmount,
                AssessableValue: AssessableValue,
                CDAmount: CDAmount,
                RDAmount: RDAmount,
                SD: SD,
                SDAmount: SDAmount,
                VATRate: VATRate,
                VATAmount: VATAmount,
                ATVAmount: ATVAmount,
                AITAmount: AITAmount,
                OthersAmount: OthersAmount,
                Total: Total,
                Type: Type,
                UOMPrice: UOMPrice,
                UOMQty: UOMQty,
                UOMn: UOMn,
                UOMc: UOMc,
                VDSRate: VDSRate,
                VDSAmount: VDSAmount,
                IsFixedVAT: IsFixedVAT,
                FixedVATAmount: FixedVATAmount,
                BOMId: BOMId,
                USDValue: USDValue,
                USDVAT: USDVAT,
                VATableValue: VATableValue,
                TDSSection: TDSSection,
                TDSCode: TDSCode,
                RebateAmount: RebateAmount,
                ExpireDate: ExpireDate,
                CPCName: CPCName,
                BEItemNo: BEItemNo,
                TVBAmount: TVBAmount,
                TVAAmount: TVAAmount,
                NBRPrice: NBRPrice,
                ItemNo: ItemNo,
                Comments: Comments,
                DutyRemarks: DutyRemarks,
                RebateRate: RebateRate,
                TransactionType: TransactionType,
                PurchaseReturnId: PurchaseReturnId,
                PreviousInvoiceDateTime: PreviousInvoiceDateTime,
                PreviousNBRPrice: PreviousNBRPrice,
                PreviousQuantity: PreviousQuantity,
                PreviousUOM: PreviousUOM,
                PreviousSubTotal: PreviousSubTotal,
                PreviousVATAmount: PreviousVATAmount,
                PreviousVATRate: PreviousVATRate,
                PreviousSD: PreviousSD,
                PreviousSDAmount: PreviousSDAmount,
                ReasonOfReturn: ReasonOfReturn

            }

            console.log(modelData);

            $(sender).parents("tr:first").remove();

            SubTotal();

            var modal = document.getElementById('myHigherModal');

            $.ajax({
                data: modelData,
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                success: function (html) {
                    modal.style.display = "block";

                    $("#myHigherModal").html(html);

                }
            , complete: function () { $(".loading").fadeOut(200).hide("slow") }

            });



    }

    function callbackPreviousSalesModal(model) {

        console.log(model);

        url = "/Vms/Purchase/BlankItem";
        container = "editorItemRows4";
        $.ajax({
            data: model,
            url: url,
            cache: false,
            success: function (html) {
                $("#" + container).append(html);
                callingFixedTable();
                SubTotal();
            }
        });

    }

</script>

    @*--------------------------Product Dropdown--------------------------*@
<script>
    $(function () {
        $('.trProduct').change(function () {
            //alert("JS");
            var ItemNo = $('.trProduct').val();
            if (ItemNo == "") {
                return;
            }
            var url = "/VMS/Product/GetProductByItemNo?ItemNo=" + ItemNo;
            $.ajax({
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                success: function (data) {
                    var code = data.ProductCode;
                    var itemNo = data.ItemNo;
                    var productName = data.ProductName;
                    $('.trProductCode').val(code);
                    $('.trItemNo').val(itemNo);
                    $('.trProductName').val(productName)
                    ProductNameChange(code);
                    SelectBOMRaw();

                },
                complete: function () { $(".loading").fadeOut(200).hide("slow") }

            });
        });
    })
</script>

    @*Initial functions*@
    <script>
        $(function () {
            valiDation("frmPurchase");
            showProductDetail();
            MyCheckBox('False', 'input-SubTotalAll', 'SubTotalAll');
            ///clicking on vat16
            //$('.trVat16').click(function () {
            //    showModal();
            //});
            ////navigation mode
            var operation = '@Model.Operation';
            if (operation == "update") {
                navigatePage();
            }
            $('.customDatePicker').prop("readonly", false);
            /////closing modal
            window.onclick = function (event) {
                var productDetail = document.getElementById('productDetails');
                if (event.target == productDetail) {
                    $(".trkmodal-content").html("");
                    productDetail.style.display = "none";
                }
                var modal = document.getElementById('myModal');
                if (event.target == modal) {
                    $("#myModal").html("");
                    modal.style.display = "none";
                }
            }
            SubTotal();
        });
    </script>

    @*for add edit remove change product section*@
    <script>
        ////Clicking add button
        $('.AddRow').on("click", function () {
            var product = $('.trItemName').val();
            if (product == "0") {
                ShowResult("Fail", "Select a product first!");
                return;
            }

            var VATType = $('.trType').val();
            if (VATType == null || VATType == "" || VATType == " " || VATType == "Select" || VATType == "-") {
                ShowResult("Fail", "Select a VAT Type first!");
                return;
            }

            var quantity = parseFloat($('.trQuantity').val().replace(/\,/g, ''));
            if (isNaN(quantity) || quantity <= 0) {
                ShowResult("Fail", "Quantity can not be zero");
                $('.trQuantity').css('background-color', 'yellow');

                return;
            }

            var totalPrice = parseFloat($('.trTotalPrice').val().replace(/\,/g, ''));
            if (isNaN(totalPrice) || totalPrice <= 0) {
                ShowResult("Fail", "Total Price can not be zero");
                $('.trTotalPrice').css('background-color', 'yellow');

                return;
            }

            var convFact = GetConvFact();
            var itemNo = $('.trProductCode').val();
            var count = 0;

            $('.dItemNo').each(function () {
                var existing = $(this).val();
                if (itemNo == existing) {
                    count++;
                }
            });

            if (count > 0) {
                ShowResult("Fail", "Item already exists!");
                return;
            }

            var container = $(this).attr('data-container');
            var url = $(this).attr('data-url');
            AddRow(container, url)
            return false;
        });
        ////Getting uom conversion 
        function GetConvFact() {
            var uomConv = 1;
            var uomFrom = $('.trUOM').val();
            var uomTo = $('.trPackSize').val();
            if (uomFrom == uomTo || uomTo == null || uomTo == "") {
                uomConv = $('#ConvFactor').val();
            }
            return uomConv;
        }
        ////product change method
        function  ProductNameChange(productCode) {
            if (productCode == "0") {
                $('.trProductCode').val("");
                $('.trStock').val("");
                $('.trHSCode').val("");
                $('.trNBRPrice').val("");
                $('.trUOM').val("");
                $('.trName').val("");
                $('.trVATRate').val("");
                $('.trSDRate').val("");
                $('.trItemNo').val("");
                $('.cIsFixedOtherVAT').val("");
                $('.cIsFixedOtherSD').val("");
                $('.cIsHouseRent').val("");

                return;
            }
            var issueDate = $(".trInvoiceDate").val();
            var vatName = $(".trVAT1Name").val();
            var url = "/Vms/Purchase/SelectProductDetails?productCode=" + productCode + "&IssueDate=" + issueDate + "&vatName=" + vatName;
            $.getJSON(url, function (data) {
                //var code = data.split('~')[0];
                //var uom = data.split('~')[1];
                //var hscode = data.split('~')[2];
                //var salesPrice = data.split('~')[3];
                //var stock = data.split('~')[4];
                //var name = data.split('~')[5];
                //var vatRate = data.split('~')[6];
                //var SD = data.split('~')[7];
                //var itemNo = data.split('~')[8];

               

                $('.trProductCode').val(data.ProductCode);
                $('.trStock').val(data.Stock);
                $('.trHSCode').val(data.HSCodeNo);
                //$('.trSalesPrice').val(salesPrice);
                $('.trNBRPrice').val(data.SalesPrice);
                $('.trUOM').val(data.UOM);
                $('.trName').val(data.ProductName);
                $('.trVATRate').val(data.VATRate);
                $('.trSDRate').val(data.SD);
                $('.trItemNo').val(data.ItemNo);

                $('.cIsFixedOtherVAT').val(data.IsFixedVAT);
                $('.cIsFixedOtherSD').val(data.IsFixedOtherSD);
                $('.cIsHouseRent').val(data.IsHouseRent);


                $('.cIsVDS').val(IsVDS);

                $('.trVDS').val(IsVDS);

                //console.log(data.IsFixedOtherVAT)
                //console.log(data)
                if (data.IsFixedVAT.toLowerCase() == "y") {

                    $('.trType').val("FixedVAT");
                    $('.trVATRate').val(data.FixedVATAmount);

                }

                NumberFormatCheck();
                UomOptions(data.UOM)

            });
        }
        ////changing uom to/packet size
        $('.trPackSize').change(function () {
            GetConvFactor();
        });
        ////uom conversion method
        function GetConvFactor() {
            var uomFrom = $('.trUOM').val();
            var uomTo = $('.trPackSize').val();
            if (uomFrom == uomTo) {
                return;
            }
            var actionUrl = "/Vms/Purchase/GetConvFactor?uomFrom=" + uomFrom + "&UomTo=" + uomTo;
            $.getJSON(actionUrl, function (data) {
                uomConv = parseFloat(data);
                $('#ConvFactor').val(uomConv);
            });
        }
        ////uom option method
        function UomOptions(uom) {
            var uom = $('.trUOM').val();
            var url = "/Vms/Purchase/GetUomOption?uomFrom=" + uom;
            $.ajax({
                url: url,
                cache: false,
                success: function (uoms) {
                    var html = "";

                    if (uoms == null || uoms.length === 0) {
                        html += "<option value='" + uom + "'>" + uom + "</option>";
                    }
                    else {
                        html += "<option value='" + uom + "'>" + uom + "</option>";

                        uoms.forEach(function (item) {
                            html += "<option value='" + item.UOMTo + "'>" + item.UOMTo + "</option>";
                        });
                    }

                    $('#PackSize').append(html);
                    GetConvFactor();
                }
            });
        }

        function SelectBOMRaw() {

            var ItemNo = $('.trItemNo').val();
            var ProductCode = $('.trProductCode').val();
            var effectDate = $(".trInvoiceDate").val();

            if (ProductCode == "") {
                return;
            }
            var url = "/VMS/Product/SelectBOMRaw?ProductCode=" + ItemNo + "&effectDate=" + effectDate;
            $.ajax({
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                success: function (data) {
                    var BOMId = data;
                    $('.cBOMId').val(BOMId);
                },
                complete: function () { $(".loading").fadeOut(200).hide("slow") }

            });

        }

        ////add row method
        function AddRow(container, url) {
            VatAmountCal();

            var uomFrom = $('.trUOM').val();
            var uomTo = $('.trPackSize').val();
            var uomConv = 1;//unit conversion initial value
            //getting conversion factor//
            if (uomFrom != uomTo) {
                uomConv = $('#ConvFactor').val();
            }
            //form fields 
            var itemName = $('.trName').val();
            var code = $('.trProductCode').val();
            var itemNo = $('.trItemNo').val();
            var uomTo = $('.trPackSize').val();
            var quantity = parseFloat($('.trQuantity').val().replace(/\,/g, ''));
            var stock = parseFloat($('.trStock').val());
            var totalPrice = parseFloat($('.trTotalPrice').val().replace(/\,/g, ''));
            var unitPrice = parseFloat(totalPrice / quantity);
            var subTotal = totalPrice;
            var SD = parseFloat($('.trSDRate').val());
            var VATRate = parseFloat($('.trVATRate').val());
            var VATAmount = (subTotal * VATRate) / 100;
            var total = subTotal + VATAmount;
            var uomFrom = $('.trUOM').val();
            var hsCode = $('.trHSCode').val();
            var type = $('.trType').val();
            var vatType = "";
            var isImport = $('#IsImport').val();
            var TransactionType = '@Model.TransactionType';
            if (isImport == "True") {
                vatType = "Import-" + type;
            }
            else {
                vatType = type;
            }
            var LocalSDAmount = parseFloat($('.cLocalSDAmount').val().replace(/\,/g, ''));
            var LocalVATAmount = parseFloat($('.cLocalVATAmount').val().replace(/\,/g, ''));
            var PreviousPurchaseInvoiceNo = $('.cPreviousPurchaseInvoiceNo').val();
            var PreviousInvoiceDateTime = $('.cPreviousInvoiceDateTime').val();
            var PreviousNBRPrice = $('.cPreviousNBRPrice').val();
            var PreviousQuantity = $('.cPreviousQuantity').val();
            var PreviousUOM = $('.cPreviousUOM').val();
            var PreviousSubTotal = $('.cPreviousSubTotal').val();
            var PreviousVATAmount = $('.cPreviousVATAmount').val();
            var PreviousVATRate = $('.cPreviousVATRate').val();
            var PreviousSD = $('.cPreviousSD').val();
            var PreviousSDAmount = $('.cPreviousSDAmount').val();
            var ReasonOfReturn = $('.cReasonOfReturn').val();
            ////the detail view Model
            var model = {
                ProductName: itemName,
                ItemNo: itemNo,
                ProductCode:code,
                UOM: uomTo,
                Quantity: quantity,
                UnitPrice: unitPrice,
                SubTotal: subTotal,
                SD: SD,
                VATRate: VATRate,
                VATAmount: LocalVATAmount,
                SDAmount: LocalSDAmount,
                Total: total,
                Type: vatType,
                UOMPrice: unitPrice * uomConv,
                UOMc: uomConv,
                UOMn: uomFrom,
                UOMn: uomFrom,
                TransactionType: TransactionType,
                UOMQty: uomConv * quantity,
                PurchaseReturnId: PreviousPurchaseInvoiceNo,
                PreviousInvoiceDateTime: PreviousInvoiceDateTime,
                PreviousNBRPrice: PreviousNBRPrice,
                PreviousQuantity: PreviousQuantity,
                PreviousUOM: PreviousUOM,
                PreviousSubTotal: PreviousSubTotal,
                PreviousVATAmount: PreviousVATAmount,
                PreviousVATRate: PreviousVATRate,
                PreviousSD: PreviousSD,
                PreviousSDAmount: PreviousSDAmount,

                ReasonOfReturn: ReasonOfReturn
            }
            ////calling blank item function
            $.ajax({
                data: model,
                url: url,
                cache: false,
                success: function (html) {
                    $("#" + container).append(html);
                    callingFixedTable();
                    SubTotal();
                    $('.detailHeadRow :input').not('.notClearing').val("");

                }
            });
            
            ////reseting values

            $('.trItemName').val("");
            $('.trProductCode').val("");
            $('.trQuantity').val("");
            $('.trStock').val("");
            $('.trTotalPrice').val("");
            $('.trUOM').val("");
            $('.trPackSize').val("");
            $('.trPackSize').val("");
            $('.trHSCode').val("");
            $('.trVATRate').val("");
            $('.trSDRate').val("");
            $('.cPreviousPurchaseInvoiceNo').val("");
            $('.cPreviousInvoiceDateTime').val("");
            $('.cPreviousNBRPrice').val("");
            $('.cPreviousQuantity').val("");
            $('.cPreviousUOM').val("");
            $('.cPreviousSubTotal').val("");
            $('.cPreviousVATAmount').val("");
            $('.cPreviousVATRate').val("");
            $('.cPreviousSD').val("");
            $('.cPreviousSDAmount').val("");
            $('.cReasonOfReturn').val("");
        }
        ////edit a row
        function EditItem(sender) {
            ////setting the value
            var code = $(sender).closest('.tablerow').find('.dItemNo').val(); 
            var name = $(sender).closest('.tablerow').find('.dItemName').val();
            var type = $(sender).closest('.tablerow').find('.dType').val();
            var sdAmount = $(sender).closest('.tablerow').find('.dSDAmount').val();
            var VATAmount = $(sender).closest('.tablerow').find('.dVATAmount').val();



            $('.cPreviousPurchaseInvoiceNo').val($(sender).closest('.tablerow').find('.dPreviousPurchaseInvoiceNo').val());
            $('.cPreviousInvoiceDateTime').val($(sender).closest('.tablerow').find('.dPreviousInvoiceDateTime').val());
            $('.cPreviousNBRPrice').val($(sender).closest('.tablerow').find('.dPreviousNBRPrice').val());
            $('.cPreviousQuantity').val($(sender).closest('.tablerow').find('.dPreviousQuantity').val());
            $('.cPreviousUOM').val($(sender).closest('.tablerow').find('.dPreviousUOM').val());
            $('.cPreviousSubTotal').val($(sender).closest('.tablerow').find('.dPreviousSubTotal').val());
            $('.cPreviousVATAmount').val($(sender).closest('.tablerow').find('.dPreviousVATAmount').val());
            $('.cPreviousVATRate').val($(sender).closest('.tablerow').find('.dPreviousVATRate').val());
            $('.cPreviousSD').val($(sender).closest('.tablerow').find('.dPreviousSD').val());
            $('.cPreviousSDAmount').val($(sender).closest('.tablerow').find('.dPreviousSDAmount').val());
            $('.cReasonOfReturn').val($(sender).closest('.tablerow').find('.dReasonOfReturn').val());

            var filteredType = type.split('-')[0];
            if (filteredType.toLocaleLowerCase() == "import") {
                $('#IsImport').val("True");
            }
            $('.trItemName').val(name);
            //ProductNameChange(code);
           
           
            var issueDate = $(".trInvoiceDate").val();
            ////var vatName = $(".trVAT1Name").val();
            var vatName = "VAT 4.3";
            var url = "/Vms/Purchase/SelectProductDetails?productCode=" + code + "&IssueDate=" + issueDate + "&vatName=" + vatName;
            $.getJSON(url, function (data) {
               

                $('.cProductType').val(data.ProductType);

                LoadcProductCategoryDropDown(data.ProductType, data.CategoryID)
                LoadcProductDropDown(data.CategoryID, data.ProductType, data.ItemNo);

                $('.trProductCode').val(data.ProductCode);
                $('.trStock').val(data.Stock);
                $('.trHSCode').val(data.HSCodeNo);
                //$('.trSalesPrice').val(salesPrice);
                $('.trNBRPrice').val(data.SalesPrice);
                $('.trUOM').val(data.UOM);
                $('.trName').val(data.ProductName);
                $('.trVATRate').val(data.VATRate);
                $('.trSDRate').val(data.SD);
                $('.trItemNo').val(data.ItemNo);

                $('.cIsFixedOtherVAT').val(data.IsFixedVAT);
                $('.cIsFixedOtherSD').val(data.IsFixedOtherSD);
                $('.cIsHouseRent').val(data.IsHouseRent);


                $('.cIsVDS').val(IsVDS);

                $('.trVDS').val(IsVDS);

                //console.log(data.IsFixedOtherVAT)
                //console.log(data)
                if (data.IsFixedVAT.toLowerCase() == "y") {

                    $('.trType').val("FixedVAT");
                    $('.trVATRate').val(data.FixedVATAmount);

                }

                NumberFormatCheck();
                $('.cLocalSDAmount').val(sdAmount);
                $('.cLocalVATAmount').val(VATAmount);
            });

            var quantity = $(sender).closest('.tablerow').find('.dQuantity').val();
            $(".trQuantity").val(quantity);

            var totalPrice = $(sender).closest('.tablerow').find('.dSubTotal').val();
            $(".trTotalPrice").val(totalPrice);

            $(sender).parents("tr:first").remove();
            SubTotal();

            $(function () {
                var interval = setInterval(function () {
                    if ($('.trUOM').val() != "") {
                        UomOptions();
                        //GetConvFactor();
                        clearInterval(interval);
                    }
                }, 200);
            });
        }
        ////removing a row
        function RemoveItem(sender) {
            Ask("Are you sure to Delete the item!", function () {
                $(sender).parents("tr:first").remove();
                SubTotal();
            });
        }
        $(".chkAll").click(function () {
            $('input:checkbox').not(this).prop('checked', this.checked);
        });
        ////removing all selected row
        function RemoveMultiple() {
            var rows = $('.deleteCheckBox:checkbox:checked');
            if (rows.length == 0) {
                ShowResult("Fail", "Select a row first!");
                return;
            }
            Ask("Are you sure to Delete the item!", function () {
                rows.each(function () {
                    $(this).parents("tr:first").remove();
                });
            });
        }
    </script>

    @*for subtotal and save data*@
    <script>

        $('.trTotalPrice').change(function () {
            SDInputAmnt();
            VatAmountCal();
        });
        $('.trQuantity').change(function () {
            SDInputAmnt();
            VatAmountCal();
        });
        function SDInputAmnt() {

            var uCost = 0;
            var qty = 0;
            var sdRate = 0;
            var TotalSDAmount = 0;


            var IsTotalPrice = $('.cIsTotalPrice').val();
            //console.log(IsTotalPrice)
            var Quantity = parseFloat($('.trQuantity').val().replace(/\,/g, ''));
            var SDRate = parseFloat($('.trSDRate').val().replace(/\,/g, ''));
            var TotalPrice = parseFloat($('.trTotalPrice').val().replace(/\,/g, ''));

            uCost = TotalPrice;
            qty = Quantity;
            sdRate = SDRate;

            if (IsTotalPrice.toLowerCase() == "y") {
                TotalSDAmount = uCost * sdRate / 100;
                //console.log('IsTotalPrice', IsTotalPrice)

            }
            else {
                TotalSDAmount = uCost * qty * sdRate / 100;
                
                //console.log('TotalSDAmount', TotalSDAmount)

            }

            $('.cLocalSDAmount').val(TotalSDAmount);


        }

        function VatAmountCal() {

            var uCost = 0;
            var qty = 0;
            var sdRate = 0;
            var vdsRate = 0;
            var vatRate = 0;
            var TotalAmount = 0;
            var SDAmount = 0;
            var VATAmount = 0;


            var TotalPrice = parseFloat($('.trTotalPrice').val().replace(/\,/g, ''));
            var VATRate = parseFloat($('.trVATRate').val().replace(/\,/g, ''));
            var UomConv = parseFloat($('.cUomConv').val().replace(/\,/g, ''));
            var Quantity = parseFloat($('.trQuantity').val().replace(/\,/g, ''));
            var SDRate = parseFloat($('.trSDRate').val().replace(/\,/g, ''));
            var VDSRate = parseFloat($('.trVDSRate').val().replace(/\,/g, ''));
            var IsTotalPrice = $('.cIsTotalPrice').val();
            ////alert(IsTotalPrice);
            var IsFixedOtherVAT = $('.cIsFixedOtherVAT').val();
            var IsFixedOtherSD = $('.cIsFixedOtherSD').val();
            var IsHouseRent = $('.cIsHouseRent').val();

            var PriceIncludingVAT = $('#TotalPriceIncludingVAT').val();

            //////alert(PriceIncludingVAT);

            var varType = $('.trType').val();

            if (UomConv == 0) {
                UomConv = 1;
            }

            uCost = TotalPrice;
            qty = Quantity;
            vdsRate = VDSRate;
            sdRate = SDRate;
            vatRate = VATRate;

            if (IsTotalPrice.toLowerCase() == "y") {
                TotalAmount = uCost;
            }
            else {
                TotalAmount = qty * uCost;
      

            }

            if (IsFixedOtherSD.toLowerCase() == "y") {
                SDAmount = (qty * sdRate * UomConv);

            }
            else {
                SDAmount = TotalAmount * sdRate / 100;

            }

            if (PriceIncludingVAT.toLocaleLowerCase() == "y") {

                VATAmount = (TotalAmount * vatRate) / (100 + vatRate);
                VATAmount = VATAmount.toFixed(4);

            }
            else {

                if (VATAmount <= 0) {
                    VATAmount = (TotalAmount + SDAmount) * vatRate / 100;
          

                }

                if (IsFixedOtherVAT.toLowerCase() == "y") {
                    VATAmount = qty * vatRate * UomConv;

                }
                else {
                    VATAmount = (TotalAmount + SDAmount) * vatRate / 100;

                }

            }


            var VDSRate = 0;
            var VDSAmount = 0;

            if (IsHouseRent.toLowerCase() == "y") {

                if (IsFixedOtherVAT.toLowerCase() == "y") {
                    VDSAmount = VATAmount;
                }
                else {
                    VDSRate = vatRate;
                    VDSAmount = (TotalAmount + SDAmount) * VDSRate / 100;
                    //console.log('IsHouseRent', VDSAmount);
                }
            }

            else {

                VDSRate = 0;
                VDSAmount = 0;
            }

            if (varType == "UnRegister".toLowerCase()) {
                VDSRate = txtVDSRate.Text;
                VDSAmount = (TotalAmount + SDAmount) * VDSRate / 100;
            }

            $('.cLocalVATAmount').val(VATAmount);
            $('.cLocalSDAmount').val(SDAmount);
            $('.trVDSRate').val(VDSRate);
            $('.trVDSAmount').val(VDSAmount);

        }
        ////subtotal calculating method
        function SubTotal() {
            var TotalAmount = 0;
            var SDTotal = 0;
            var VATTotal = 0;
            var GrandTotal = 0;

            $(".tablerow").each(function () {
                TotalAmount += parseFloat($(this).find(".dSubTotal").val().replace(/\,/g, ''));
                SDTotal += parseFloat($(this).find(".dSDAmount").val().replace(/\,/g, ''));
                VATTotal += parseFloat($(this).find(".dVATAmount").val().replace(/\,/g, ''));
            });
            GrandTotal = TotalAmount + SDTotal + VATTotal;
            $(".totalAmount").val(TotalAmount);
            $(".SDTotal").val(SDTotal);
            $(".VATTotal").val(VATTotal);
            $(".GrandTotal").val(GrandTotal);
        }
        ////form posting method
        function SaveData() {
            var Post = $("#Post").val();
            if (Post.toLowerCase() == 'true' || Post.toLowerCase() == 'y') {
                ShowResult("Fail", "Data Already Posted. Can't Update!");
                return;
            }

            var trDate = $(".trDate").val();
            if (trDate == "") {
                ShowResult("Fail", "Please Select Issue Date!");
                return;
            }

            var items = $(".dItemName").length;
            if (items == 0) {
                ShowResult("Fail", "Please Add Product Details!");
                return;
            }


            pageSubmit('frmPurchase');
        }
    </script>

    @*for clicking purchase search*@
    <script>
        function modalInitHigher(url) {

            var ProductType = $(".cProductType :selected").val();
            var ProductCategoryId = $(".cProductCategoryId :selected").val();
            var ProductCategory = $(".cProductCategoryId :selected").text();

            url = url
                + "&ProductType=" + ProductType
                + "&ProductCategoryId=" + ProductCategoryId
                + "&ProductCategory=" + ProductCategory
            ;
            var modal = document.getElementById('myHigherModal');
            $.ajax({
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                complete: function () { $(".loading").fadeOut(200).hide("slow") },
                success: function (html) {
                    modal.style.display = "block";
                    $("#myHigherModal").html(html);
                }
            });
        }
        function getVendorId(returnId) {
            var url = "/Vms/Purchase/GetVendor?purchaseNo=" + returnId ;
            $.getJSON(url, function (data) {
                var vendorId = data.split('~')[0];
                var vendorName = data.split('~')[1];
                $('.trVendorId').val(vendorId);
                $('.trVendorName').val(vendorName);
                $('.trVendorId').select2('val', vendorId);


            });
        }
        //function getVendorId(returnId) {

        //    $('.trVendorId').val("");



        //   var VendorNames = "";

        //    var url = "/Vms/Purchase/GetVendor?purchaseNo=" + returnId;

        //    VendorNames += "<option value=0>Select</option>";
        //    $.getJSON(url, function (data) {
        //        $.each(data, function (i, state) {
        //            VendorNames += "<option value='" + state.Value + "'>" + state.Text + "</option>";
        //        });
        //        var value=data.split('~')[0];
        //        $('.trVendorId').html(VendorNames);

        //        $('.trVendorId').select2('val', value);
            

        //    });
        //}

        function callbackFromModal(returnId) {
            $("#editorItemRows4").html("");
            getVendorId(returnId);
            $.ajax({
                url: "/VMS/Purchase/BlankItems?purchaseNo=" + returnId,
                cache: false,
                success: function (html) {
                    $("#editorItemRows4").append(html);
                    callingFixedTable();
                    SubTotal();
                }
            });
        }
        $(function () {
            $('.purchaseBtn').click(function () {
                var url = "/Vms/Purchase/GetItemPopUp?targetId=ReturnId" + "&TransactionType=" + '@Model.TransactionType';
                modalInitHigher(url);
            });
        })
    </script>

    @*setting vendor name update operation*@
    <script>
        $(function () {
            var operation = '@Model.Operation';
            if (operation == "update") {
                var interval = setInterval(function () {
                    if (document.querySelectorAll('.trVendorId option').length > 0) {
                        var vendorId = '@Model.VendorID';
                        $('.trVendorId').select2("val", vendorId);
                        clearInterval(interval);
                    }
                }, 200);
            }
        })
    </script>

    @*post data*@
<script>
    function PostData(sender) {
        var Id = $("#Id").val();
        ////var Post = $("#Post").val();
        ////if (Post.toLowerCase() == 'true' || Post.toLowerCase() == 'y') {
        ////    ShowResult("Fail", "Data Already Posted!");
        ////    return;
        ////}
        var url = '/Vms/Purchase/Post?ids=' + Id + '~';
        var questionMSG = "Are you sure to Post Data!";
        singlePostDlete(questionMSG, url);
    }
</script>
@*Product Type Change*@
<script>

    $(function () {
        $(".cProductType").on("change", function () {

            ProductTypeChange(this);
        });
    });
    function ProductTypeChange(sender) {



        var ProductType = $(sender).val();
        if (ProductType != null && ProductType != "") {
            LoadcProductCategoryDropDown(ProductType);
            LoadcProductDropDown("0", ProductType);
        }
    }

    $(function () {
        $(".cProductCategoryId").on("change", function () {

            ProductCategoryChange(this);
        });
    });

    function ProductCategoryChange(sender) {

        var ProductCategoryId = $(sender).val();

        if (ProductCategoryId != null && ProductCategoryId != "") {
            LoadcProductDropDown(ProductCategoryId);
        }
    }
    function LoadcProductCategoryDropDown(ProductType, ProductGroup) {


        $DropDownProductCategory = $(".cProductCategoryId");
        $('select.cProductCategoryId').html("");

        var url = "/Config/DropDown/ProductCategory?IsRaw=" + ProductType;
        $DropDownProductCategory.append($("<option />").val("").text("Select"));
        $DropDownProductCategory.select2("val", '');

        $.ajax({
            url: url,
            type: 'GET',
            beforeSend: function () { $(".loading").show(); },
            success: function (data) {
                $.each(data, function (i, state) {
                    $DropDownProductCategory.append($("<option />").val(state.Value).text(state.Text));
                });
                if (ProductGroup != null || ProductGroup != "" || ProductGroup != "0") {
                    $DropDownProductCategory.select2("val", ProductGroup);
                }
            },
            complete: function () { $(".loading").fadeOut(200).hide("slow") }

        });
    }

    function LoadcProductDropDown(ProductCategoryId, IsRaw, ProductCode) {


        $DropDownProduct = $(".trProduct");
        $('select.trProduct').html("");
        if (IsRaw == null) {
            IsRaw = "";
        }
        var url = "/Config/DropDown/Product?CategoryID=" + ProductCategoryId + "&IsRaw=" + IsRaw;
        $DropDownProduct.append($("<option />").val("").text("Select"));
        $DropDownProduct.select2("val", '');

        $.ajax({
            url: url,
            type: 'GET',
            beforeSend: function () { $(".loading").show(); },
            success: function (data) {
                $.each(data, function (i, state) {
                    $DropDownProduct.append($("<option />").val(state.Value).text(state.Text));
                });
                if (ProductCode != null || ProductCode != "" || ProductCode != "0") {

                    ////console.log(ProductCode);

                    $(".trProduct").select2("val", ProductCode);
                }
            },
            complete: function () { $(".loading").fadeOut(200).hide("slow") }

        });
    }
    </script>
    @*for reporting*@
    <script>
        function modalInit(url) {
            var modal = document.getElementById('myModal');
            $.ajax({
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                complete: function () { $(".loading").fadeOut(200).hide("slow") },
                success: function (html) {
                    modal.style.display = "block";
                    $("#myModal").html(html);
                }
            });
        }
    $(function () {
        $('.trVat16').click(function () {
            var url = "/Vms/NBRReport/PrintVAT16";
            modalInit(url);
        });
        $('.purMIS').click(function () {
            var url = "/Vms/MISReport/PrintPurchase";
            modalInit(url);
        });
        $('.vat18').click(function () {
            var url = "/Vms/NBRReport/PrintVAT18";
            modalInit(url);
        });
    })


    $(function () {
        //alert(1);
        $('#IdVehicleNo').autocomplete({ source: '@Url.Action("AutocompleteVehicle", "Autocomplete", new { area = "Config" })', minLength: 2 });

    });

    $(document).ready(function () {
        $('#IdVehicleNo').on('autocompletechange selected ', function () {
            //var VehicleNo = this.value;
            //alert(VehicleNo);
            vehicleChange();

            function vehicleChange() {

                var vehicleId = $('.trVehicle :selected').val();

                var VehicleNo = $('#IdVehicleNo').val();

                if (VehicleNo == null || VehicleNo == "") {
                    return;
                }
                $('#VehicleID').val("");
                $('.cVehicleType').val("");

                //if (vehicleId == null || vehicleId == "") {
                //    return;
                //}
                var url = "/Vms/SaleInvoice/getVehicleDetails?vehicleId=" + VehicleNo;
                $.getJSON(url, function (data) {

                    $('#VehicleID').val(data.VehicleID);
                    $('.cVehicleType').val(data.VehicleType);

                });
            }

        })
    });


</script>



}