@model VATViewModel.DTOs.TransferMPLReceiveVM
@using UIHelper.MVC
@using (Html.BeginForm("CreateEdit", "TransferReceiveMPL", FormMethod.Post, new { enctype = "multipart/form-data", @Id = "frmTransferReceiveMPL" }))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.BranchId)
    @Html.HiddenFor(model => model.IsTransfer)
    @Html.HiddenFor(model => model.TransferDateTime)
    @Html.HiddenFor(model => model.RailwayReceiptDate)
    @Html.HiddenFor(model => model.TransferFrom)
    @Html.HiddenFor(model => model.Post)
    @Html.HiddenFor(model => model.Operation)
    @Html.HiddenFor(model => model.TransactionType)
@Html.HiddenFor(model => model.TransferIssueMasterRefId)
    @Html.HiddenFor(model => model.ReportType)
    @Html.HiddenFor(model => model.TransferType)


    <div class="headrow">
        @if (Model.Operation == "update")
        {
            <button type="button" title="Update Data" onclick="SaveData()" class="sym-btn-update">&nbsp;Update</button>
            <label class="pull-right">Transfer Receive > Edit > FG(In)</label>
        }
        else if (Model.Operation == "add")
        {
            <button type="button" title="Save Data" onclick="SaveData()" class="sym-btn-save">&nbsp;Save</button>
            <label class="pull-right">Transfer Receive > Create > FG(In)</label>
        }

        <button type="button" title="Go To Index" data-url="/VMS/TransferReceiveMPL/Index?TransactionType=62In" onclick="GoTo(this)" class="sym-btn-detail">&nbsp;Index</button>
        <button type="button" title="Post Data" onclick="PostData()" class="sym-btn-post">&nbsp;Post</button>
    </div>

    <div class="clearfix"></div>

<div class="tab-content">
        <div id="Sale" class="tab-pane fade  in active">
            <div class="thinbox formDesign trkMY-0">
                <div class="th_thinbox">
                    <p>Basic</p>
                </div>

                <div class="row">
                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="TransferReceiveNo">Transfer Receive No.</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.TransferReceiveNo, new { @placeholder = "Transfer Receive No", @class = " cTransferReceiveNo  form-control", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="ReceiveDateTime">Receive Date</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ReceiveDateTime, new { @placeholder = "Receive Date", @class = " cReceiveDateTime trVAT18Date customDatePicker trVAT17Date  form-control" })
                            @Html.ValidationMessageFor(model => model.ReceiveDateTime)
                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="TransferIssueNo">Transfer Issue No.</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.TransferIssueNo, new { @placeholder = "Transfer Issue No", @class = " cTransferIssueNo  form-control", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="TransferDateTime">Transfer Issue Date</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.TransferDateTime, new { @placeholder = "Transfer Date", @class = " cTransferDateTime trVAT18Date customDatePicker trVAT17Date  form-control", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.TransferDateTime)
                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="TransferFrom"> Transfer From </label>
                        </div>
                        <div class="editor-field">
                            @Html.SimpleDropDownFor(m => m.TransferFrom, "/Config/DropDown/OtherBranch", new { @class = " cTransferFrom required form-control ", @disabled = "disabled" })
                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="ReferenceNo"> Reference No.</label>
                        </div>
                        <div class="editor-field s2">
                            @Html.TextBoxFor(m => m.ReferenceNo, null, new { @placeholder = "Reference No.", @class = "cReferenceNo  form-control", @readonly = "readonly" })

                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            <label for="VehicleType">Vehicle Type</label>
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(m => m.VehicleType, null, new { @placeholder = "Type", @class = "cVehicleType  form-control", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="trk1_5" style="width:10% !important">
                        <div class="editor-label">
                            <label for="VehicleID">Vehicle No</label>
                        </div>
                        <div class="editor-field s2">
                            @Html.TextBoxFor(m => m.VehicleNo, null, new { @placeholder = "Vehicle No", @class = "cVehicleNo  form-control", @id = "IdVehicleNo", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                
            </div>

        </div>

        <div class="thinbox col-md-12 formDesign trkMY-0">
            <div class="th_thinbox">
                <p>Product Details</p>
            </div>

            <div class="fixedParent">
                @if (Model.TransferMPLReceiveDetailVMs != null)
                {
                    <table class="trkFixTable" id="itemTable">
                        <thead>
                            <tr>
                                <th>Product Code</th>
                                <th>Product Name</th>
                                <th>Package Unit</th>
                                <th>Quantity</th>
                                <th>Volumn</th>
                                <th>Is Completed</th>
                                <th>AlReady Receive Qty</th>
                                <th>Wagon No</th>
                                <th>Cost Price</th>
                                <th>Package Volumn</th>
                                <th>Req. Quantity</th>
                                <th>Req. Volumn</th>
                                <th>Sub Total</th>
              
                            </tr>
                        </thead>

                        <tbody id="editorItemRows4">
                            @foreach (var item in Model.TransferMPLReceiveDetailVMs)
                            {
                                Html.RenderPartial("_detail", item);
                            }
                        </tbody>
                    </table>

                }
            </div>

            <br/>
            

            <div class="row">
                <div class="trk1_5 right">
                    <label>Weight Chargeed</label>
                </div>
                <div class="trk1_5">
                    <div class="editor-field">
                        @Html.TextBoxFor(m => m.WeightChargeed, "{0:N2}", new { @class = " cWeightChargeed right form-control", @readonly = "readonly" })
                    </div>
                </div>
                <div class="trk1_5 right">
                    <label>Freight To Pay</label>
                </div>
                <div class="trk1_5">
                    <div class="editor-field">
                        @Html.TextBoxFor(m => m.FreightToPay, "{0:N2}", new { @class = " cFreightToPay right form-control", @readonly = "readonly" })
                    </div>
                </div>
                <div class="trk1_5 right">
                    <label>Freight Prepaid</label>
                </div>
                <div class="trk1_5">
                    <div class="editor-field">
                        @Html.TextBoxFor(m => m.FreightPrepaid, "{0:N2}", new { @class = " cFreightPrepaid right form-control", @readonly = "readonly" })
                    </div>
                </div>
                <div class="trk1_5 right">
                    <label>Grand Total</label>
                </div>
                <div class="trk1_5">
                    <div class="editor-field">
                        @Html.TextBoxFor(m => m.TotalAmount, new { @class = " cTotalAmount right form-control", @readonly = "readonly" })
                    </div>
                </div>

            </div>

        </div>
    <div id="Sale" class="tab-pane fade  in active">
        <div class="thinbox formDesign trkMY-0">
            <div class="th_thinbox">
                <p>Others</p>
            </div>

            <div class="row">
                <div class="trk1_5">
                    <div class="editor-label">
                        <label for="ArrivalDate">Arrival Date</label>
                    </div>
                    <div class="editor-field s2">
                        @Html.TextBoxFor(model => model.ArrivalDate, new { @placeholder = "Arrival Date", @class = " cArrivalDate trVAT18Date customDatePicker trVAT17Date  form-control" })

                    </div>
                </div>

                <div class="trk1_5">
                    <div class="editor-label">
                        <label for="RailwayReceiptDate">Railway Receipt Date</label>
                    </div>
                    <div class="editor-field s2">
                        @Html.TextBoxFor(model => model.RailwayReceiptDate, new { @placeholder = "Railway Receipt Date", @class = " cRailwayReceiptDate trVAT18Date customDatePicker trVAT17Date  form-control", @disabled = "disabled" })
                    </div>
                </div>
                <div class="trk1_5">
                    <div class="editor-label">
                        <label for="RailwayReceiptNo">Railway Receipt No.</label>
                    </div>
                    <div class="editor-field s2">
                        @Html.TextBoxFor(m => m.RailwayReceiptNo, null, new { @placeholder = "Railway Receipt No.", @class = "cRailwayReceiptNo  form-control", @readonly = "readonly" })
                    </div>
                </div>
                <div class="trk1_5">
                    <div class="editor-label">
                        <label for="RailwayInvoiceNo">Railway Invoice No.</label>
                    </div>
                    <div class="editor-field s2">
                        @Html.TextBoxFor(m => m.RailwayInvoiceNo, null, new { @placeholder = "Railway Invoice No.", @class = "cRailwayInvoiceNo  form-control", @readonly = "readonly" })
                    </div>
                </div>
            </div>


        </div>

    </div>

        <div class="headrow">
            @if (Model.Operation == "update")
                {
            <button type="button" title="Update Data" onclick="SaveData()" class="sym-btn-update">&nbsp;Update</button>
                }
                else if (Model.Operation == "add")
                {
            <button type="button" title="Save Data" onclick="SaveData()" class="sym-btn-save">&nbsp;Save</button>
                }

            <button type="button" title="Go To Index" data-url="/VMS/TransferReceiveMPL/Index?TransactionType=62In" onclick="GoTo(this)" class="sym-btn-detail">&nbsp;Index</button>
            <button type="button" title="Post Data" onclick="PostData()" class="sym-btn-post">&nbsp;Post</button>
        </div>

    </div>
}
<div id="myModal" class="trkmodal"></div>
<div id="productDetails" class="trkmodal">
    <div class="trkmodal-content">
    </div>
</div>

<div id="myHigherModal" class="HigherModal"></div>
@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")

    <script>

        $(document).ready(function () {
            callingFixedTable();
        });


    </script>

    @*--------------------------Autocomplete--------------------------*@
    <script>


        $(function () {
            $('#IdVehicleNo').autocomplete({ source: '@Url.Action("AutocompleteVehicle", "Autocomplete", new { area = "Config" })', minLength: 2 });

        });

        $(document).ready(function () {
            $('#IdVehicleNo').on('autocompletechange selected ', function () {
                debugger;
                vehicleChange();
            })
        });

        $(function () {
            $('.trCustomerId').change(function () {
                CustomerChange();
            });
        });

        function CustomerChange() {
            debugger;
            var CustomerId = $('.trCustomerId :selected').val();

            if (CustomerId == null || CustomerId == "") {
                return;
            }

            var url = "/Vms/SaleInvoice/getCustomerAddress?CustomerId=" + CustomerId;
            $.getJSON(url, function (data) {

                debugger;

                $('.cDeliveryAddress').val(data.Address1);

            });
        }

        $(function () {
            $('.cBOMReferenceNo').change(function () {
                BOMReferenceNoChange();
            });
        });

        function BOMReferenceNoChange() {

            var issueDate = $(".trTransferDateTime").val();
            var vatName = $(".trVAT1Name").val();
            var BOMReferenceNo = $('.cBOMReferenceNo :selected').val();
            var ItemNo = $('.trItemNo').val();
            if (BOMReferenceNo == null || BOMReferenceNo == "" || BOMReferenceNo == "N/A" || BOMReferenceNo == "NA") {
                return;
            }
            if (ItemNo == null || ItemNo == "") {
                return;
            }


            var url = "/Vms/SaleInvoice/getNBRPriceByBOMReferenceNo?BOMReferenceNo=" + BOMReferenceNo + "&ItemNo=" + ItemNo + "&issueDate=" + issueDate + "&vatName=" + vatName;
            $.getJSON(url, function (data) {

                //alert(data.Address1);

                $('.trNBRPrice').val(data.NBRPrice);
                $('.cBOMId').val(data.BOMId);

            });
        }

    </script>

    @*--------------------------Integration--------------------------*@

    <script>
        $(function () {

            $('.saleIntegration_BCL').click(function () {

                var url = "/Vms/Integration/ViewSaleForm_BCL";

                var modal = document.getElementById('myHigherModal');
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    success: function (html) {
                        modal.style.display = "block";
                        $("#myHigherModal").html(html);
                    }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
                });

            });
        });

    </script>

    @*--------------------------FormMaker--------------------------*@
    <script>
        $(function () {
            FormMaker();
            var ProductCategoryId = $("#ProductCategoryId").val();
            var ProductGroup = $("#ProductGroup").val();
            LoadcProductCategoryDropDown(ProductGroup, ProductCategoryId);

        });

        function FormMaker() {
            var tType = '@Model.TransactionType';
            switch (tType) {
                case "Other":
                    {

                    }
                    break;
                default:
                    break;
            }
        }

    </script>

    @*--------------------------addrow and changing product and vehicles--------------------------*@
    <script>

        //$('.cTankId').change(function (e) {
        //    debugger;
        //    var txt = this;
        //    var dropdown = document.getElementById("TankId");
        //    var selectedOption = dropdown.options[dropdown.selectedIndex];
        //    var innerText = selectedOption.text;
        //    $('.trTankCode').val(innerText);
        //});

        $('.AddRow').on("click", function () {
            debugger;
            var product = $('.trProductName').val();
            if (product == "0" || product == "") {
                ShowResult("Fail", "Select a product first!");
                return;
            }

            var SaleQuantity = parseFloat($('.trRequestedQuantity').val());
            if (isNaN(SaleQuantity) || SaleQuantity <= 0) {
                ShowResult("Fail", "Quantity can not be zero");
                $('.cRequestedQuantity').css('background-color', 'yellow');
                return;
            }

            var convFact = GetConvFact();
            var itemNo = $('.trProductCode').val();
            var count = 0;


            var container = $(this).attr('data-container');
            console.log(container);
            var url = $(this).attr('data-url');
            AddRow(container, url);
            return false;
        });

        ////add row method
        function AddRow(container, url) {
            debugger;
            var uomConv = 1;
            var CurrencyRateFromBDT = $('.cCurrencyRateFromBDT').val();
            console.log(CurrencyRateFromBDT)
            var cDate = $('.trTransferDateTime').val();
            var Rowtype = $('.cRowtype').val();
            $('#CConversionDate').val(cDate);

            if (Rowtype == "" || Rowtype == null) {
                Rowtype = "New";

                $('.cRowtype').val(Rowtype);

            }

            $('.trDTransferDateTime').val(cDate);

            var model = $('.detailHeadRow :input').serialize();

            var productCode = $('.trProductCode').val();
            var deliveryAddress = $('.cDeliveryAddress').val();
            var mySelect = $('.cItemCode');
            mySelect.append($('<option></option>').val(productCode).html(productCode))


            var productName = $('.trProductName').val();
            var mySelect2 = $('.ccItemCode');
            mySelect2.append($('<option></option>').val(productCode).html(productName))

            var uOMn = $('.trPackSize').val();
            var productCode = $('.trPackSize').val();
            var transferTo = $('.cTransferTo').val();

            var costPrice = $('.trCostPrice').val();
            var quantity = $('.trQuantity').val();

            var subTotal = (parseFloat(costPrice.replace(',', '')) * parseFloat(quantity.replace(',', '')));

            model += "&SubTotal=" + subTotal;
            model += "&UOMn=" + uOMn;
            model += "&ProductCode=" + productCode;
            model += "&TransferTo=" + transferTo;
            model += "&TransactionType=" + '@Model.TransactionType';
            debugger;
            console.log(model);
            $.ajax({
                data: model,
                url: url,
                cache: false,
                success: function (html) {
                    debugger;
                    $("#" + container).append(html);
                    callingFixedTable();
                    SubTotal();
                    NumberFormatCheck();

                    $('.detailHeadRow :input').not('.notClearing').val("");
                    $('.trProduct').select2("val", "");
                    $('.trPackSize').prop('selectedIndex', -1);
                    //$('.cTankId').prop('selectedIndex', -1);
                    $("#EngineInfoTab #popUpTbody").html("");
                }
            });
        }

    </script>



    @*--------------------------for editing and removing a product row--------------------------*@
    <script>
        ////removing all selected row
        function RemoveMultiple() {
            var rows = $('.deleteCheckBox:checkbox:checked');
            if (rows.length == 0) {
                ShowResult("Fail", "Select a row first!");
                return;
            }
            Ask("Are you sure to Delete the item!", function () {
                rows.each(function () {
                    $(this).parents("tr:first").remove();
                });
            });
        }

        $(".cChkExpLoc").change(function () {
            if (this.checked) {
                $('#ChkLoc').text("Export");

            }
            else {
                $('#ChkLoc').text("Local");

            }

            Type();

        });

        $(".trCurrencyId").change(function () {

            var ConversionDate = $(".cConversionDateMaster").val();

            var CFrom = $(".trCurrencyId option:selected").text();
            var CTo = "BDT";
            var currencyBdtId = "260";
            var currencyUsdId = "249";
            console.log(CFrom, CFrom)

            if (CFrom != null && CFrom != "") {
                console.log(CFrom, CTo)

                if (CFrom.toLowerCase() === CTo.toLowerCase()) {

                    $('.cCurrencyRateFromBDT').val('1');

                }
                else {

                    var url = "/Vms/SaleInvoice/SelectCurrencyDetails?ConversionDate=" + ConversionDate;

                    $.getJSON(url, function (data) {

                        $('.cCurrencyRateFromBDT').val(data.CurrencyRate);


                    })
                }

            }

        });

        $(".chkAll").click(function () {
            $('input:checkbox').not(this).prop('checked', this.checked);
        });

        $(".trQuantity").on('change', function () {
            debugger;
            var qty = $('.trQuantity').val();
            var volumn = $('.trRequestedVolumn').val();
            var reqQty = parseFloat(qty) * parseFloat(volumn);
            $('.trRequestedQuantity').val(reqQty);
        });

        ////edit a row
        function EditItem(sender) {
            debugger;
            var $closestRow = $(sender).closest('.tablerow');

            var code = $closestRow.find('.dItem_No').val();
            var NBRPrice = $closestRow.find('.dCostPrice').val().replace(/\,/g, '');
            var UOM = $closestRow.find('.dUOM').val();
            var reqQuantity = $closestRow.find('.dRequestedQuantity').val();
            var vatAmnt = $closestRow.find('.dVATAmount').val();
            var itemName = $closestRow.find('.dItemName').val();
            var requestedVolumn = $closestRow.find('.dRequestedVolumn').val();
            var quantity = $closestRow.find('.dQuantity').val();
            //var tankId = $closestRow.find('.dTankId').val();
            var transferDateTime = $closestRow.find('.dTransferDateTime').val();
            var productCode = $closestRow.find('.dProductCode').val();
            var temperature = $closestRow.find('.dTemperature').val();
            var sP_Gravity = $closestRow.find('.dSP_Gravity').val();
            var qtyAt30Temperature = $closestRow.find('.dQtyAt30Temperature').val();
            var transferTo = $closestRow.find('.dTransferTo').val();
            var tankCode = $closestRow.find('.dTankCode').val();

            $('.trProductName').val(itemName);

            var issueDate = $(".cTransferDateTime").val();
            var vatName = "VAT 4.3";

            if (code == null || code == "" || code == "null") {
                return;
            }

            debugger;
            var url = "/Vms/SaleInvoice/SelectProductDetails?productCode=" + code + "&IssueDate=" + issueDate + "&vatName=" + vatName;

            $.getJSON(url, function (data) {
                debugger;
                $('.trProductCode').val(data.ProductCode);
                $('.trStock').val(data.Stock);
                $('.trProductName').val(data.ProductName);
                $('.trItemNo').val(data.ItemNo);

                LoadcProductCategoryDropDown(data.ProductType, data.CategoryID)
                LoadcProductDropDown(data.CategoryID, data.ProductType, data.ItemNo);

                debugger;
                $('.trProduct').val(code);
                $('.trPackSize').val(UOM);
                $('.trUOM').val(UOM);
                $('.trCostPrice').val(NBRPrice);
                $('.trRequestedQuantity').val(reqQuantity);
                $('.trVATAmount').val(vatAmnt);
                $('.trRequestedVolumn').val(requestedVolumn);
                $('.trQuantity').val(quantity);
                //$('.cTankId').val(tankId);
                $('.trTransferDateTime').val(transferDateTime);
                $('.trProductCode').val(productCode);
                $('.trTemperature').val(temperature);
                $('.trSP_Gravity').val(sP_Gravity);
                $('.trQtyAt30Temperature').val(qtyAt30Temperature);
                $('.trTransferTo').val(transferTo);
                $('.trTankCode').val(tankCode);

                //ProductNameChange(code);

                $(function () {
                    var interval = setInterval(function () {

                        BOMReferenceNoChange();

                        if ($('.trUOM').val() != "") {

                            UomOptions();

                            clearInterval(interval);
                        }
                    }, 200);
                });

                //SearchEngine();
                //debugger;
                //BOMReferenceNoLoad("NA");
                //LoadcProductCategoryDropDown(data.ProductType, data.CategoryID)
                //LoadcProductDropDown(data.CategoryID, data.ProductType, data.ItemNo);

            });

            debugger;
            $(sender).parents("tr:first").remove();

            //SubTotal();

            //LoadUOM(baseUOM, setUOM);

            //function setUOM() {
            //    debugger;
            //    $(".trPackSize").val(UOM);
            //    GetConvFactor();
            //}

        };


        $("#EngineInfoTab #btnAdd").on("click", function () {

            var ItemNo = $("#Sale .trItemNo").val()
            var TransactionType = '@Model.TransactionType';

            if (ItemNo == "" || ItemNo == null) {
                ShowResult("Fail", "Please Select Product First !");
                return;
            }
            var SalesInvoiceNo = $("#Sale .trSalesInvoiceNo").val();

            var ProductCode = $("#Sale .trProductCode").val();
            var CompanyCode = $("#Sale .trSalesInvoiceNo").val();

            var url = "/Vms/SaleInvoice/AddEngine?ItemNo=" + ItemNo + "&SalesInvoiceNo=" + SalesInvoiceNo + "&ProductCode=" + ProductCode + "&TransactionType=" + TransactionType;


            modalInit(url);
        });
        $("#EngineInfoTab #btnRemoveEngine").on("click", function () {


            var questionMSG = "Are you sure to Remove Data!";
            Ask(questionMSG, function () {

                RemoveEngine();

            });

        });

        $("#EngineInfoTab #btnChange").on("click", function () {

            var questionMSG = "Are you sure to Change Total Qunatity!";
            Ask(questionMSG, function () {

                var $Items = $("#EngineInfoTab .dSelected:input:checkbox:not(:checked)");
                var totalQty = $Items.length;
                $(".trQuantity").val(totalQty);
            });


        });

        function SearchEngine() {
            var model = {
                ItemNo: $("#Sale .trItemNo").val()
            , SalesInvoiceNo: $("#Sale .trSalesInvoiceNo").val()
            }

            $.ajax({
                data: model
            , url: "/Vms/SaleInvoice/GetEngine_ACI"
            , cache: false
            , traditional: true
            , type: "POST"
            , beforeSend: function () { $(".loading").show(); }
            , success: function (html) {
                $("#EngineInfoTab #popUpTbody").html("");
                $("#EngineInfoTab #popUpTbody").html(html);

            }
            , complete: function () { $(".loading").fadeOut(200).hide("slow") }
            });
        }
        function RemoveEngine() {


            IDs = [];


            var $Items = $("#EngineInfoTab .dSelected:input:checkbox:checked");
            if ($Items == null || $Items.length == 0) {
                ShowResult("Fail", "You are requested to Select before Remove!");
                return;
            }
            var Post = $("#Post").val();

            if (Post.toLowerCase() == 'true' || Post.toLowerCase() == 'y') {
                ShowResult("Fail", "Data Already Posted. Can't Remove!");
                return;
            }

            $Items.each(function () {

                var SalesInvoiceNo = $(this).closest('tr').find('.SalesInvoiceNo').text();
                var ItemNo = $(this).closest('tr').find('.ItemNo').text();
                var EngineNumber = $(this).closest('tr').find('.EngineNumber').text();
                var ChassisNumber = $(this).closest('tr').find('.ChassisNumber').text();


                if (SalesInvoiceNo == null || SalesInvoiceNo == "") {
                    return;
                }
                item = {}
                item["SalesInvoiceNo"] = SalesInvoiceNo;
                item["ItemNo"] = ItemNo;
                item["EngineNumber"] = EngineNumber;
                item["ChassisNumber"] = ChassisNumber;

                IDs.push(item);

            });


            var model = {
                IDs: IDs
            }
            console.log(model)
            var url = '/VMS/SaleInvoice/MultipleEngineRemove';


            $.ajax({
                url: url
            , data: JSON.stringify(model)
            , type: 'Post'
            , traditional: true
            , beforeSend: function () { $(".loading").show(); }
            , success: function (rVM) {
                ShowResult(rVM.Status, rVM.Message);

                if (rVM.Status == "Success") {
                    SearchEngine();
                }
            }
            , complete: function () { $(".loading").fadeOut(200).hide("slow") }
            , contentType: 'application/json; charset=utf-8'
            , dataType: 'json'

            });

        }

        function SaveEngine() {


            IDs = [];


            var $Items = $("#EngineInfoTab .dSelected:input:checkbox:checked");
            if ($Items == null || $Items.length == 0) {
                ShowResult("Fail", "You are requested to Select before Remove!");
                return;
            }
            var Post = $("#Post").val();

            if (Post.toLowerCase() == 'true' || Post.toLowerCase() == 'y') {
                ShowResult("Fail", "Data Already Posted. Can't Remove!");
                return;
            }

            $Items.each(function () {

                var SalesInvoiceNo = $(this).closest('tr').find('.SalesInvoiceNo').text();
                var ItemNo = $(this).closest('tr').find('.ItemNo').text();
                var EngineNumber = $(this).closest('tr').find('.EngineNumber').text();
                var ChassisNumber = $(this).closest('tr').find('.ChassisNumber').text();


                if (SalesInvoiceNo == null || SalesInvoiceNo == "") {
                    return;
                }
                item = {}
                item["SalesInvoiceNo"] = SalesInvoiceNo;
                item["ItemNo"] = ItemNo;
                item["EngineNumber"] = EngineNumber;
                item["ChassisNumber"] = ChassisNumber;

                IDs.push(item);

            });


            var model = {
                IDs: IDs
            }

            var url = '/VMS/SaleInvoice/MultipleEngineRemove';


            $.ajax({
                url: url
            , data: JSON.stringify(model)
            , type: 'Post'
            , traditional: true
            , beforeSend: function () { $(".loading").show(); }
            , success: function (rVM) {
                ShowResult(rVM.Status, rVM.Message);

                if (rVM.Status == "Success") {
                    SearchEngine();
                }
            }
            , complete: function () { $(".loading").fadeOut(200).hide("slow") }
            , contentType: 'application/json; charset=utf-8'
            , dataType: 'json'

            });

        }


        ////removing a row
        function RemoveItem(sender) {
            debugger;
            Ask("Are you sure to Delete the item!", function () {
                $(sender).parents("tr:first").remove();
                SubTotal();
                //////ShowHide();
            });
        }
    </script>

    @*--------------------------for subtotal and save method--------------------------*@
    <script>
        function SubTotal() {
            var TotalAmount = 0;
            var SDTotal = 0;
            var VATTotal = 0;
            var GrandTotal = 0;

            debugger;
            var rows = $("#itemTable tbody tr");
            rows.each(function (index, row) {
                debugger;
                var costPrice = $(row).find('.dCostPrice').val() || 0;
                var requestedVolumn = $(row).find('.dRequestedVolumn').val() || 0;
                var quantity = $(row).find('.dQuantity').val() || 0;
                var reqQuantity = $(row).find('.dRequestedQuantity').val() || 0;
                var vatAmnt = 0;//$(row).find('.dVATAmount').val() || 0;

                //var reqQty = parseFloat(quantity.replace(',', '')) * parseFloat(requestedVolumn.replace(',', ''));

                TotalAmount += parseFloat(quantity.replace(',', '')) * parseFloat(costPrice.replace(',', ''));
                SDTotal += 0;
                VATTotal += 0;

            });

            GrandTotal = TotalAmount + SDTotal + VATTotal;

            debugger;
            SDTotal = parseFloat(SDTotal).toLocaleString('en-US', { minimumFractionDigits: 2 });
            VATTotal = parseFloat(VATTotal).toLocaleString('en-US', { minimumFractionDigits: 2 });
            GrandTotal = parseFloat(GrandTotal).toLocaleString('en-US', { minimumFractionDigits: 2 });
            $(".cTotalSDAmount").val(SDTotal);
            $(".cTotalVATAmount").val(VATTotal);
            $(".cTotalAmount").val(GrandTotal);
        };

        function SaveData() {
            debugger;
            var Post = $("#Post").val();
            if (Post.toLowerCase() == 'true' || Post.toLowerCase() == 'y') {
                ShowResult("Fail", "Data Already Posted. Can't Update!");
                return;
            }

            var a = requiredFields('frmTransferReceiveMPL');


            //var CustomerId = $(".trCustomerId :selected").val();
            //if (CustomerId == "" || CustomerId == null) {
            //    ShowResult("Fail", "Please Select Customer!");
            //    return;
            //}

            var CustomName = $('.cCustomName').val();
            if (CustomName == "" || CustomName == "0") {
                ShowResult("Fail", "Please Select a CustomHouse");
                return;
            }

            var SerialNo = $('.cSerialNo').val();


            var items = $(".dItemName").length;
            if (items == 0) {
                ShowResult("Fail", "Please Add Product Details!");
                $(".accordionProduct").trigger("click");
                return;
            }

            if (a != 0) {
                return;
            }

            pageSubmit('frmTransferReceiveMPL');
        }
    </script>

    @*--------------------------for post method--------------------------*@
    <script>
       function PostData() {
            debugger;            
            var Id = $("#Id").val();
            var Post = $("#Post").val();
            if (Post.toLowerCase() == 'true' || Post.toLowerCase() == 'y') {
                ShowResult("Fail", "Data Already Posted!");
                return;
            }
            var branchId = '@Session["BranchId"]';
            var searchBranchId = $('#BranchId').val();
            if (branchId != searchBranchId) {
                ShowResult("Fail", "This Information not for this Branch!");
                return;
            }

            var questionMSG = "Are you sure to Post Data!";

            Ask(questionMSG, function () {
                debugger;
                var model = {
                    IDs: Id,
                }
                debugger;
                var url = '/VMS/TransferReceiveMPL/TransferMPLReceivePost';

                $.ajax({
                    url: url
                    , data: model
                    , type: 'Post'
                    , traditional: true
                    , beforeSend: function () { $(".loading").show(); }
                    , success: function (rVM) {
                        debugger;
                        ShowResult(rVM[0], rVM[1]);

                        if (rVM[0] == "Success") {
                            $("#Post").val('Y');

                        }
                    }
                    , complete: function () { $(".loading").fadeOut(200).hide("slow") }

                });
            });
        };

    </script>

    @*--------------------------fixed header column table--------------------------*@
    <script>
        function fixedScrolltrkFixedTable(tableId, leftTotal) {
            $('#' + tableId + ' tbody').scroll(function (e) {
                var i;
                var j = 2;
                for (i = 1; i <= leftTotal; i++) {
                    $('#' + tableId + ' tbody td:nth-child(' + i + ')').css("z-index", "1");
                    $('#' + tableId + ' thead th:nth-child(' + i + ')').css("left", $("#" + tableId + " tbody").scrollLeft());

                    $('#' + tableId + ' tbody td:nth-child(' + j + ')').css("z-index", "1");
                    $('#' + tableId + ' tbody td:nth-child(' + j + ')').css("left", $("#" + tableId + " tbody").scrollLeft());
                    $('#' + tableId + ' tbody td:nth-child(' + j + ')').css("left", $("#" + tableId + " tbody").scrollLeft());
                    j++;
                }
                $('#' + tableId + ' thead').css("left", -$("#" + tableId + " tbody").scrollLeft());
                //$('#' + tableId + ' thead th:nth-child(2)').css("left", $("#" + tableId + " tbody").scrollLeft());

            });
        }
        function settingtrkFixedColumnWidth(tableId, widthArgs) {
            if (widthArgs == null) {
                return;
            }
            var i;
            var j = 2;
            for (i = 1; i <= widthArgs.length; i++) {
                $('#' + tableId + ' tr td:nth-child(' + j + ')').css("min-width", widthArgs[i - 1] + "px");
                $('#' + tableId + ' tr th:nth-child(' + i + ')').css("min-width", widthArgs[i - 1] + "px");
                j++;
            }
        }
        function fixLeftColumns(tableId, leftTotal) {
            var i;
            var j = 2;
            for (i = 1; i <= leftTotal; i++) {
                //fixed column header style
                $('#' + tableId + ' thead th:nth-child(' + i + ')').css("height", "20px");
                $('#' + tableId + ' thead th:nth-child(' + i + ')').css("position", "relative");
                $('#' + tableId + ' thead th:nth-child(' + i + ')').css("z-index", "2");
                //fixed column rows style
                $('#' + tableId + ' tbody tr td:nth-child(' + j + ')').css("height", "20px");
                $('#' + tableId + ' tbody tr td:nth-child(' + j + ')').css("position", "relative");
                j++;
            }
        }
        function settingWidth(tableId) {
            var parentWidth = $('#' + tableId).closest('.fixedParent').width();
            $('#' + tableId + ' thead').width(parentWidth);
            $('#' + tableId + ' tbody').width(parentWidth);
        }


        function trkFixedTable(tableId, leftTotal, args) {
            debugger;
            settingWidth(tableId);
            fixLeftColumns(tableId, leftTotal);
            fixedScrolltrkFixedTable(tableId, leftTotal);
            settingtrkFixedColumnWidth(tableId, args);
        }
        function callingFixedTable() {
            var args = [150, 150, 120, 100, 100, 100, 100, 135, 100, 100, 100, 100, 150, 100, 100, 100, 150, 150, 100, 100, 150, 100, 100, 100, 100, 100, 100, 100, 100, 150, 200, 150, 150, 150, 150, 150, 150, 150, 150, 100];
            trkFixedTable("itemTable", 3, args);
        }

        $(function () {
            callingFixedTable();
        })


    </script>

    @*--------------------------for navigation--------------------------*@
    <script>
        function navigatePage() {
            var interval = setInterval(function () {
                if (document.querySelectorAll('.trNavigateMenu option').length > 0) {
                    var id = '@Model.Id';
                    $('.trNavigateMenu').select2("val", id);
                    clearInterval(interval);
                }
            }, 200);
            ////navigating previous-next
            $('.changePage').click(function () {
                var id = '@Model.Id';
                var ttype = '@Model.TransactionType';
                var btn = $(this).attr("data-pager-action");
                if (btn.toLocaleLowerCase() == "current") {
                    var targetId = $('.trNavigateMenu').val();
                    if (id == targetId) {
                        return;
                    }
                    id = targetId;
                }
                window.location = "/VMS/SaleInvoice/Navigate?id=" + id + "&btn=" + btn + "&ttype=" + ttype;
            });
        }
    </script>

    @*for showing product details and toggle accordion*@
    <script>
        function showProductDetail() {
            var productDetail = document.getElementById('productDetails');
            $(document).on("dblclick", '.tablerow', function () {
                var code = $(this).find('input.dItemNo').val();
                var url = "/Vms/Product/ShowProduct?code=" + code;
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    complete: function () { $(".loading").fadeOut(200).hide("slow") },
                    success: function (html) {
                        productDetail.style.display = "block";
                        $(".trkmodal-content").html(html);
                    }
                });
            });
        }
    </script>

    @*Initial function*@
    <script>
        $(function () {
            valiDation("frmTransferReceiveMPL");

            Type();


            $('.customDatePicker').prop("readonly", false);
            ////for navigation

            var operation = '@Model.Operation';

            if (operation == "update") {

                navigatePage();

                $('.trCustomerId').select2('data', { id: '@Model.TransferTRCode', text: '@Model.TransferTRCode' });

                $('.trVehicle').select2('data', { id: '@Model.VehicleNo', text: '@Model.VehicleNo' });

            }

            setCABalance();

            SubTotal();

            ////for counting discount amount based on % symbol
            MyToggleBox('discountType');

            ////initializing modal
            //showProductDetail();
            debugger;
            /////closing modal
            window.onclick = function (event) {

                var productDetail = document.getElementById('productDetails');

                if (event.target == productDetail) {
                    $(".trkmodal-content").html("");
                    productDetail.style.display = "none";
                }
                //var modal = document.getElementById('myModal');
                //if (event.target == modal) {
                //    $("#myModal").html("");
                //    modal.style.display = "none";
                //}
            }

        });

        function CustomerSelect(CustomerID) {
            debugger;
            $('.trCustomerId').val("");

            @*var value = '@Model.CustomerID';*@

            var value = CustomerID;

            var CustomerNames = "";

            var url = "/Config/DropDown/DropDownByCustomerID/?CustomerID=" + value;
            CustomerNames += "<option value=0>Select</option>";
            $.getJSON(url, function (data) {
                $.each(data, function (i, state) {
                    CustomerNames += "<option value='" + state.Value + "'>" + state.Text + "</option>";
                });

                $('.trCustomerId').html(CustomerNames);

                $('.trCustomerId').select2('val', CustomerID);

                CustomerChange();
            });
        }



    </script>

    @*for calculating discount*@
    <script>
        $(function () {
            $('.discountType').click(function () {
                setTimeout(function () {
                    calculateDiscount();
                }, 500);
            });
            $(".trDiscount").blur(function () {
                calculateDiscount();
            });
        })
        function calculateDiscount() {
            var status = $('#discountType').val();
            var nbrprice = parseFloat($('.CostPrice').val().replace(/\,/g, ''));
            var discount = parseFloat($('.trDiscount').val().replace(/\,/g, ''));
            if (isNaN(discount)) {
                discount = 0;
            }
            if (isNaN(nbrprice)) {
                nbrprice = 0;
            }
            var disountedNBRPrice = 0;
            if (status == 'True') {
                disountedNBRPrice = nbrprice - (nbrprice * discount / 100);
            }
            else {
                disountedNBRPrice = nbrprice - discount;
            }
            if (disountedNBRPrice < 0) {
                ShowResult("Fail", "Discount can't be greater than price!");
                $('.trCostPrice').val(nbrprice);
                $('.trDiscount').val("0");
                return;
            }
            $('.trCostPrice').val(disountedNBRPrice);
        }
    </script>

    @*for setting products and ca balance*@
    <script>
        ////Setting C.A Balance
        function setCABalance() {
            var interval = setInterval(function () {
                var challanDate = $('.trTransferDateTime').val();
                if (challanDate != "") {
                    var url = "/Vms/SaleInvoice/getCABalance?startDate=" + challanDate;
                    $.getJSON(url, function (data) {
                        $('.trTDBalance').val(data);
                    });
                    clearInterval(interval);
                }
            }, 500);

        }
    </script>

    @*--------------------------MISC Functions--------------------------*@
    <script>

        ////Getting uom conversion
        function GetConvFact() {

            //////alert(3);
            var uomConv = 1;
            var uomFrom = $('.trUOM').val();
            var uomTo = $('.trPackSize').val();
            if (uomFrom != uomTo) {
                uomConv = $('#ConvFactor').val();
            }
            return uomConv;
        }

        ////changing vehicle
        $(function () {
            $('.trVehicle').change(function () {
                vehicleChange();
            });
        });

        ////vehicle change method
        function vehicleChange() {
            debugger;
            var vehicleId = $('.trVehicle :selected').val();

            var VehicleNo = $('#IdVehicleNo').val();

            if (VehicleNo == null || VehicleNo == "") {
                return;
            }
            $('#VehicleID').val("");
            $('.cVehicleType').val("");
            debugger;
            var url = "/Vms/SaleInvoice/getVehicleDetails?vehicleId=" + VehicleNo;
            $.getJSON(url, function (data) {
                debugger;
                $('#VehicleID').val(data.VehicleID);
                $('.cVehicleType').val(data.VehicleType);
            });
        }

        ////product category change method
        function ProductGroupChange() {
            debugger;
            $('.trProductName').val("");
            var value = $('#ItemGroup').val().toString();
            var productNames = "";

            var url = "/Config/DropDown/DropDownProductByCategory/?id=" + value;
            productNames += "<option value=0>Select</option>";
            $.getJSON(url, function (data) {
                $.each(data, function (i, state) {
                    productNames += "<option value='" + state.Value + "'>" + state.Text + "</option>";
                });

                $('.trProductName').html(productNames);
            });
        }

        ////product change method
        function ProductNameChange(code, ItemEdit) {
            debugger;
            var issueDate = $(".cTransferDateTime").val();
            var vatName = "VAT 4.3";
            if (code == null || code == "" || code == "null") {
                return;
            }

            var url = "/Vms/SaleInvoice/SelectProductDetails?productCode=" + code + "&IssueDate=" + issueDate + "&vatName=" + vatName;
            $.getJSON(url, function (data) {
                debugger;
                $('.trProductCode').val(data.ProductCode);
                $('.trStock').val(data.Stock);
                $('.trHSCode').val(data.HSCodeNo);

                //trProductDescription
                $('.CostPrice').val(data.SalesPrice);
                $('.trCostPrice').val(data.SalesPrice);
                $('.trUOM').val(data.UOM);
                $('.trProductName').val(data.ProductName);
                $('.trVATRate').val(data.VATRate);
                $('.trSDRate').val(data.SD);
                $('.trItemNo').val(data.ItemNo);
                $('.trRequestedVolumn').val(data.Volume);

                if (data.IsRaw.toLowerCase() === "trading") {

                    $('.trVATRate').val(data.TradingSaleVATRate);
                    $('.trSDRate').val(data.TradingSaleSD);

                }
                else { vVatRate = 0; }

                BOMReferenceNoLoad();

                NumberFormatCheck();

                var vVatRate = $('.trVATRate').val();
                VATTypeCal(vVatRate);

            });

        }

        ////changing product
        $(function () {
            $('.trProduct').change(function () {
                var Productname = $('.trProduct :selected').text();

                $('.trProductDescription').val(Productname);

                var productCode = $(this).val();


                $('#ProductDescription').attr('data-code', productCode); //setter

                if (productCode == "") {
                    return;
                }

                ProductNameChange(productCode);

                $(function () {
                    var interval = setInterval(function () {

                        BOMReferenceNoChange();

                        if ($('.trUOM').val() != "") {

                            UomOptions();

                            clearInterval(interval);
                        }
                    }, 200);
                });

            });
        })


        function BOMReferenceNoLoad(BOMReferenceNo) {
            debugger;
            var ItemNo = $(".trItemNo").val();
            var VatName = $(".trVAT1Name").val();
            var EffectDate = $(".trTransferDateTime").val();
            var CustomerID = $(".trCustomerId").val();

            var url = "/Config/DropDown/DropDownBOMReferenceNo";
            url = url + "?" + "ItemNo=" + ItemNo
            + "&VatName=" + VatName
            + "&EffectDate=" + EffectDate
            + "&CustomerID=" + CustomerID;


            var $Dropdown = $(".cBOMReferenceNo");

            DropdownLoad($Dropdown, url, BOMReferenceNo);

        }


        ////changing uom to/packet size
        $('.trPackSize').change(function () {

            GetConvFactor();
        });

        ////uom conversion method
        function GetConvFactor() {

            //////alert(1);
            var uomFrom = $('.trUOM').val();
            var uomTo = $('.trPackSize').val();

            if (uomFrom == uomTo) {
                $('#UOMc').val("1");
                return;
            }
            var actionUrl = "/Vms/SaleInvoice/GetConvFactor?uomFrom=" + uomFrom + "&UomTo=" + uomTo;
            $.getJSON(actionUrl, function (data) {
                uomConv = parseFloat(data);
                $('#UOMc').val(uomConv);
            });
        }

        ////uom option method
        function UomOptions() {
            var uom = $('.trUOM').val();
            var url = "/Vms/SaleInvoice/GetUomOption?uomFrom=" + uom;
            $.ajax({
                url: url,
                cache: false,
                success: function (uoms) {

                    var html = "";

                    if (uoms == null || uoms.length === 0) {
                        html += "<option value='" + uom + "'>" + uom + "</option>";
                    }
                    else {
                        html += "<option value='" + uom + "'>" + uom + "</option>";

                        uoms.forEach(function (item) {
                            html += "<option value='" + item.UOMTo + "'>" + item.UOMTo + "</option>";
                        });
                    }

                    $('#PackSize').html(html);
                    GetConvFactor();
                }
            });
        }
        ////uom option method
        function LoadUOM(uom, callBack) {
            //var uom = $('.trUOM').val();
            var url = "/Vms/SaleInvoice/GetUomOption?uomFrom=" + uom;
            $.ajax({
                url: url,
                cache: false,
            }).done(function (uoms) {

                var html = "";

                if (uoms == null || uoms.length === 0) {
                    html += "<option value='" + uom + "'>" + uom + "</option>";
                }
                else {
                    html += "<option value='" + uom + "'>" + uom + "</option>";

                    uoms.forEach(function (item) {
                        html += "<option value='" + item.UOMTo + "'>" + item.UOMTo + "</option>";
                    });
                }

                $('#PackSize').html(html);

                if (callBack) {
                    callBack();
                }
            })
        }

    </script>

    @*--------------------------Modal--------------------------*@

    <script>
        $(function () {

            function modalInit(url) {
                var modal = document.getElementById('myModal');
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    complete: function () { $(".loading").fadeOut(200).hide("slow") },
                    success: function (html) {
                        modal.style.display = "block";
                        $("#myModal").html(html);
                    }
                });
            }

            $('.ProductDsc').click(function () {
                var url = "/VMS/SaleInvoice/ProductDscripition";

                modalInit(url);
            });

        });
    </script>

    @*calling higher products modal*@

    <script>

        function modalInitHigher(url) {
            debugger;
            var ProductType = $(".cProductType :selected").val();
            var ProductCategoryId = $(".cProductCategoryId :selected").val();
            var ProductCategory = $(".cProductCategoryId :selected").text();

            url = url
            + "&ProductType=" + ProductType
            + "&ProductCategoryId=" + ProductCategoryId
            + "&ProductCategory=" + ProductCategory
            ;

            var modal = document.getElementById('myHigherModal');
            $.ajax({
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                success: function (html) {
                    modal.style.display = "block";
                    $("#myHigherModal").html(html);
                }
            , complete: function () { $(".loading").fadeOut(200).hide("slow") }
            });
        }

        function callbackFromProductModal(sender) {
            var code = $(sender).children('td.popUpItemCode').text();
            var itemNo = $(sender).children('td.popUpItemNo').text();
            $('.trProductCode').val(code);
            $('.trItemNo').val(itemNo);
            ProductNameChange(code);
            //$('.trProduct').select2('val', code);
            $('.trProduct').select2('val', itemNo);

            $(function () {
                var interval = setInterval(function () {
                    if ($('.trUOM').val() != "") {

                        UomOptions();

                        clearInterval(interval);
                    }
                }, 200);
            });
        }

        function redirectToSaleWithId(refNo) {

            window.location = "/VMS/SaleInvoice/SelectSale?refNo=" + refNo;
        }

        function callbackFromCustomerModal(sender) {
            var id = $(sender).children('td.popUpCustomerId').text();
            var CustomerName = $(sender).children('td.popUpCustomerName').text();

            CustomerSelect(id);

            //$('.trCustomerId').select2('val', id);

        }

        function callbackFromCustomerAddressModal(sender) {
            var CustomerAddress = $(sender).children('td.popUpCustomerAddress').text();
            $('.cDeliveryAddress').val(CustomerAddress);

        }

        function callbackFromCustomHouseModal(sender) {
            var CustomName = $(sender).children('td.popUpCustomsHouseName').text();
            var CustomCode = $(sender).children('td.popUpCustomHouseCode').text();

            //$('.cCustomHouse').select2('val', CustomHouse);
            $('.cCustomName').val(CustomName);
            $('.cCustomCode').val(CustomCode);
        }

        $(function () {
            $('#productBtn').click(function () {
                debugger;
                var productCode = $('.trProduct').val();
                var ItemNo = $('.trItemNo').val();


                var url = "/Vms/Product/GetProductPopUp?targetId=ProductName&ProductCode=" + productCode;

                modalInitHigher(url);
            });

            $('#saleIntegration').click(function () {

                var url = "/Vms/SaleInvoice/GetSaleIntegration";

                var modal = document.getElementById('myHigherModal');
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    success: function (html) {
                        modal.style.display = "block";
                        $("#myHigherModal").html(html);
                    }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
                });

            });

            //1
            $('#customerBtn').click(function () {
                debugger;
                var customerName = $('.trCustomerId option:selected').text();
                if (customerName.indexOf("SelectSelect") !== -1) {
                    debugger;
                    customerName = "";
                }
                var url = "/Vms/Customer/GetCustomerPopUp?CustomerName=" + customerName;
                var modal = document.getElementById('myHigherModal');
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    success: function (html) {
                        debugger;
                        modal.style.display = "block";
                        $("#myHigherModal").html(html);
                    }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
                });
            });

            $('#customerAddressBtn').click(function () {
                var customerName = $('.trCustomerId option:selected').text();
                var customerId = $('.trCustomerId option:selected').val();
                var url = "/Vms/Customer/GetCustomerAddressPopUp?CustomerName=" + customerName + "&CustomerId=" + customerId;
                var modal = document.getElementById('myHigherModal');
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    success: function (html) {
                        modal.style.display = "block";
                        $("#myHigherModal").html(html);
                    }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
                });
            });

            $('#CustomNameBtn').click(function () {
                var CustomName = $('.cCustomName').val(); //$('.cCustomHouse option:selected').text();
                var url = "/Vms/CustomsHouse/GetCustomHousePopUp?CustomsHouseName=" + CustomName;
                console.log(url);
                var modal = document.getElementById('myHigherModal');
                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    success: function (html) {
                        modal.style.display = "block";
                        $("#myHigherModal").html(html);
                    }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
                });
            });


        });

        $(function () {
            $('#productDescriptionBtn').click(function () {
                var productCode = $('.trProductCode').val();
                if (productCode === "") {
                    ShowResult("Fail", "Please Select Procduct First! ");
                    return;
                }
                var url = "/Vms/Product/GetProductNamesPopUp?targetId=ProductName&ProductCode=" + productCode;

                modalInitHigher(url);
            });

            //$('#customerBtn').click(function () {
            //    var customerName = $('.trCustomerId option:selected').text();
            //    var url = "/Vms/Customer/GetCustomerPopUp?CustomerName=" + customerName;
            //    var modal = document.getElementById('myHigherModal');
            //    $.ajax({
            //        url: url,
            //        cache: false,
            //        beforeSend: function () { $(".loading").show(); },
            //        success: function (html) {
            //            modal.style.display = "block";
            //            $("#myHigherModal").html(html);
            //        }
            //    , complete: function () { $(".loading").fadeOut(200).hide("slow") }
            //    });
            //});



            $('#btnEXPFormNo').click(function () {

                ///
                var url = "/Vms/SaleInvoice/GetEXPFormNoPopUp";
                //console.log(url)
                //modalInitHigher(url);

                var modal = document.getElementById('myHigherModal');

                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    success: function (html) {
                        modal.style.display = "block";
                        $("#myHigherModal").html(html);
                    }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }

                });


            });

            $('#SearchEXPbtn').click(function () {

                ///
                var url = "/Vms/SaleInvoice/PopUpGetEXP";
                //console.log(url)
                //modalInitHigher(url);

                var modal = document.getElementById('myHigherModal');

                $.ajax({
                    url: url,
                    cache: false,
                    beforeSend: function () { $(".loading").show(); },
                    success: function (html) {
                        modal.style.display = "block";
                        $("#myHigherModal").html(html);
                    }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
                });


            });

        });

    </script>

    <script>

        function Type() {

            var ChkLoc = $('.cChkExpLoc:checked').val();

            if (ChkLoc) {
                var url = "/Config/DropDown/EnumVATExport";
            }
            else {
                var url = "/Config/DropDown/EnumVAT";
            }

            var $Dropdown = $(".trType");
            @*DropdownLoad($Dropdown, url, '@Model.SaleType');*@

            console.log("VAT Type Load")
        }

        $(function () {
            $(".cProductType").on("change", function () {
                ProductTypeChange(this);

            });
        });

        function ProductTypeChange(sender) {
            var ProductType = $(sender).val();
            if (ProductType != null && ProductType != "") {
                LoadcProductCategoryDropDown(ProductType);
                LoadcProductDropDown("0", ProductType);
            }
        }

        function LoadcProductCategoryDropDown(ProductType, ProductGroup) {
            console.log(ProductType)
            console.log(ProductGroup)
            $DropDownProductCategory = $(".cProductCategoryId");
            $('select.cProductCategoryId').html("");

            var url = "/Config/DropDown/ProductCategory?IsRaw=" + ProductType;
            $DropDownProductCategory.append($("<option />").val("").text("Select"));
            $DropDownProductCategory.select2("val", '');

            $.ajax({
                url: url,
                type: 'GET',
                beforeSend: function () { $(".loading").show(); },
                success: function (data) {
                    $.each(data, function (i, state) {
                        $DropDownProductCategory.append($("<option />").val(state.Value).text(state.Text));
                    });
                    if (ProductGroup != null || ProductGroup != "" || ProductGroup != "0") {
                        $DropDownProductCategory.select2("val", ProductGroup);
                    }

                },
                complete: function () { $(".loading").fadeOut(200).hide("slow") }

            });
        }


    </script>

    <script>
        $(function () {
            $(".cProductCategoryId").on("change", function () {
                ProductCategoryChange(this);
            });
        });

        function ProductCategoryChange(sender) {

            var ProductCategoryId = $(sender).val();

            if (ProductCategoryId != null && ProductCategoryId != "") {
                LoadcProductDropDown(ProductCategoryId);
            }
        }

        function LoadcProductDropDown(ProductCategoryId, IsRaw, ProductCode) {
            $DropDownProduct = $(".trProduct");
            $('select.trProduct').html("");
            if (IsRaw == null) {
                IsRaw = "";
            }
            var url = "/Config/DropDown/Product?CategoryID=" + ProductCategoryId + "&IsRaw=" + IsRaw;
            $DropDownProduct.append($("<option />").val("").text("Select"));
            $DropDownProduct.select2("val", '');

            $.ajax({
                url: url,
                type: 'GET',
                beforeSend: function () { $(".loading").show(); },
                success: function (data) {
                    $.each(data, function (i, state) {
                        $DropDownProduct.append($("<option />").val(state.Value).text(state.Text));
                    });
                    if (ProductCode != null || ProductCode != "" || ProductCode != "0") {
                        $(".trProduct").select2("val", ProductCode);
                    }
                },
                complete: function () { $(".loading").fadeOut(200).hide("slow") }
            });
        }


    </script>

    @*for reporting*@

    <script>
        function modalInit(url) {
            var modal = document.getElementById('myModal');
            $.ajax({
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                success: function (html) {
                    modal.style.display = "block";
                    $("#myModal").html(html);
                },
                complete: function () { $(".loading").fadeOut(200).hide("slow") }

            });
        }
        $(function () {
            $('.vat11Report').click(function () {
                var post = $('#Post').val();
                //var IdCheek=$('#Id').val()
                //console.log(post);
                if (post == "N" || post == "") {
                    ShowResult("Fail", "Data Not Posted!");
                    return;
                }
                //if (IdCheek == null) {
                //    ShowResult("Fail", "Please select Invoice No");
                //    return;
                //}

                var SalesInvoiceNo = $('.trSalesInvoiceNo').val();

                var url = "/Vms/NBRReport/PrintVAT11?SalesInvoiceNo=" + SalesInvoiceNo + "&Ids=" + '@Model.Id';
                modalInit(url);
            });
            $('.saleReport').click(function () {
                var url = "/Vms/MISReport/PrintSale";
                modalInit(url);
            });
            $('.vat17Report').click(function () {
                //var url = "/Vms/NBRReport/PrintVAT17";
                var ItemNo = $('.trItemNo').val();


                var url = "/Vms/NBRReport/PrintVAT17?itemNo=" + ItemNo;
                modalInit(url);
            });

            $('.trVat16').click(function () {

                var itemNo = $('tr.active .dItem_No').val();
                var invoiceDate = $('.trTransferDateTime').val();

                var url = "/Vms/NBRReport/PrintVAT16?itemNo=" + itemNo + "&invoiceDate=" + invoiceDate;
                modalInit(url);
            });

            $('.vat6_2_1Report').click(function () {
                //var url = "/Vms/NBRReport/PrintVAT17";
                var ItemNo = $('.trItemNo').val();

                var url = "/Vms/NBRReport/PrintVAT6_2_1?itemNo=" + ItemNo;
                modalInit(url);
            });
            $('.vat18Report').click(function () {
                var url = "/Vms/NBRReport/PrintVAT18";
                modalInit(url);
            });


            $('.vat11Report').click(function () {
                var post = $('#Post').val();
                //var IdCheek=$('#Id').val()
                //console.log(post);
                if (post == "N" || post == "") {
                    ShowResult("Fail", "Data Not Posted!");
                    return;
                }
                //if (IdCheek == null) {
                //    ShowResult("Fail", "Please select Invoice No");
                //    return;
                //}

                var SalesInvoiceNo = $('.trSalesInvoiceNo').val();

                var url = "/Vms/NBRReport/PrintVAT11?SalesInvoiceNo=" + SalesInvoiceNo + "&Ids=" + '@Model.Id';
                modalInit(url);
            });
        })
    </script>

    <script>

        $(function () {

            $("#tripSearch").on("click", function () {

                var tripNo = $(".cSerialNo").val();


                $.getJSON("/vms/SaleInvoice/Searchtrip?tripNo=" + tripNo,
                function (data) {

                    if (data.productName && data.code && data.quantity) {

                        var newOption = new Option(data.productName, data.code, false, false);

                        //$(".trQuantity").val(data.quantity);
                        $('.trProduct').append(newOption);
                        $('.trProduct').val(data.code);
                        $('.trProduct').trigger('change');

                        ProductNameChange(data.code);

                    } else if (data.message) {
                        ShowResult("Fail", data.message);
                    }
                });

            })



        });

        $('.trVATRate').change(function () {

            var VATRate = parseFloat($('.trVATRate').val().replace(/\,/g, ''));
            $('.trType').val(VATRate);
            VATTypeCal($('.trVATRate').val());

        });

        function VATTypeCal(VatRate) {
            debugger;
            if (VatRate == undefined) {
                VatRate = 0;
            }
            var rate = parseFloat(VatRate);

            var type = "";

            if (rate >= 15) {
                type = "VAT";
            }
            else if (rate == 0) {
                type = "NonVAT";

            }
            else if (rate > 0 && rate < 15) {
                type = "OtherRate";
            }
            console.log(type);
            debugger;
            $(".trType").select2("val", type);

            //console.log("VAT Type Set", Type)

        }

    </script>

    @*--------------------------Update CPC Name--------------------------*@

    <script>

        function CPCNameUpdateSalesPopUp(sender) {


            var url = "/Vms/SaleInvoice/PopUpCPCNameUpdateSales";

            var $closestRow = $(sender).closest('.tablerow');

            var code = $closestRow.find('.dItemNo').val();
            var name = $closestRow.find('.dItemName').val();
            var UOM = $closestRow.find('.dUOM').val();
            var Quantity = $closestRow.find('.dQuantity ').val();
            var PromotionalQuantity = $closestRow.find('.dPQuantity ').val();
            var NBRPrice = $closestRow.find('.dSalesPrice').val();
            var vSubTotal = $closestRow.find('.dSubTotal').val();
            var TradingMarkUp = $closestRow.find('.dTradingD  ').val();
            var SD = $closestRow.find('.dSD').val();
            var SDAmount = $closestRow.find('.dSDAmount').val();
            var VATRate = $closestRow.find('.dVATRate ').val();
            var VATAmount = $closestRow.find('.dVATAmount ').val();
            var Total = $closestRow.find('.dTotal').val();
            var Type = $closestRow.find('.dType ').val();
            var UOMPrice = $closestRow.find('.dBasePrice ').val();
            var UOMc = $closestRow.find('.dConvFactor').val();
            var UOMn = $closestRow.find('.dBaseUOM   ').val();
            var UOMQty = $closestRow.find('.dBaseQty').val();
            var CurrencyValue = $closestRow.find('.dBDT').val();
            var DollerValue = $closestRow.find('.dDollerValue ').val();
            var VatName = $closestRow.find('.dVatName').val();
            var CConversionDate = $closestRow.find('.dCConversionDate').val();
            var Weight = $closestRow.find('.dWeight ').val();
            var ValueOnly = $closestRow.find('.dValueOnly').val();
            var TotalValue = $closestRow.find('.dTotalValue').val();
            var WareHouseRent = $closestRow.find('.dWareHouseRent').val();
            var WareHouseVAT = $closestRow.find('.dWareHouseVAT').val();
            var ATVRate = $closestRow.find('.dATVRate').val();
            var ATVablePrice = $closestRow.find('.dATVablePrice').val();
            var ATVAmount = $closestRow.find('.dATVAmount').val();
            var IsCommercialImporter = $closestRow.find('.dIsCommercialImporter').val();
            var ProductDescription = $closestRow.find('.dProductDescription').val();
            var CDNVATAmount = $closestRow.find('.dCDNVATAmount').val();
            var CDNSDAmount = $closestRow.find('.dCDNSDAmount').val();
            var CDNSubtotal = $closestRow.find('.dCDNSubtotal').val();

            var ItemNo = $closestRow.find('.dItem_No').val();
            var TradingD = $closestRow.find('.dTradingD').val();
            var NonStockD = $closestRow.find('.dNonStockD').val();
            var SaleTypeD = $closestRow.find('.dSaleTypeD').val();
            var CommentsD = $closestRow.find('.dCommentsD').val();
            var InvoiceLineNo = $closestRow.find('.dInvoiceLineNo').val();

            var PreviousSalesInvoiceNoD = $closestRow.find('.dPreviousSalesInvoiceNo').val();
            var PreviousInvoiceDateTime = $closestRow.find('.dPreviousInvoiceDateTime').val();
            var PreviousNBRPrice = $closestRow.find('.dPreviousNBRPrice').val();
            var PreviousQuantity = $closestRow.find('.dPreviousQuantity').val();
            var PreviousUOM = $closestRow.find('.dPreviousUOM').val();
            var PreviousSubTotal = $closestRow.find('.dPreviousSubTotal').val();
            var PreviousVATAmount = $closestRow.find('.dPreviousVATAmount').val();
            var PreviousVATRate = $closestRow.find('.dPreviousVATRate').val();
            var PreviousSD = $closestRow.find('.dPreviousSD').val();
            var PreviousSDAmount = $closestRow.find('.dPreviousSDAmount').val();
            var ReasonOfReturn = $closestRow.find('.dReasonOfReturn').val();
            var BEItemNo = $closestRow.find('.dBEItemNo').val();
            var CPCName = $closestRow.find('.dCPCName').val();
            var TransactionType = $closestRow.find('.dTransactionType').val();
            var BillingPeriodFrom = $closestRow.find('.dBillingPeriodFrom').val();
            var BillingPeriodTo = $closestRow.find('.dBillingPeriodTo').val();
            var BillingDays = $closestRow.find('.dBillingDays').val();
            var BOMReferenceNo = $closestRow.find('.dBOMReferenceNo').val();
            var IsFixedVAT = $closestRow.find('.dIsFixedVAT').val();
            var BOMId = $closestRow.find('.dBOMId').val();

            var modelData = {
                ProductName: name,
                ProductCode: code,
                UOM: UOM,
                Quantity: Quantity,
                PromotionalQuantity: PromotionalQuantity,
                NBRPrice: NBRPrice,
                SubTotal: vSubTotal,
                TradingMarkUp: TradingMarkUp,
                SD: SD,
                SDAmount: SDAmount,
                VATRate: VATRate,
                VATAmount: VATAmount,
                Total: Total,
                Type: Type,
                UOMPrice: UOMPrice,
                UOMc: UOMc,
                UOMn: UOMn,
                UOMQty: UOMQty,
                CurrencyValue: CurrencyValue,
                DollerValue: DollerValue,
                VatName: VatName,
                CConversionDate: CConversionDate,
                Weight: Weight,
                ValueOnly: ValueOnly,
                TotalValue: TotalValue,
                WareHouseRent: WareHouseRent,
                WareHouseVAT: WareHouseVAT,
                ATVRate: ATVRate,
                ATVablePrice: ATVablePrice,
                ATVAmount: ATVAmount,
                IsCommercialImporter: IsCommercialImporter,
                ProductDescription: ProductDescription,
                CDNVATAmount: CDNVATAmount,
                CDNSDAmount: CDNSDAmount,
                CDNSubtotal: CDNSubtotal,

                ItemNo: ItemNo,
                TradingD: TradingD,
                NonStockD: NonStockD,
                SaleTypeD: SaleTypeD,
                CommentsD: CommentsD,
                InvoiceLineNo: InvoiceLineNo,

                PreviousSalesInvoiceNoD: PreviousSalesInvoiceNoD,
                PreviousInvoiceDateTime: PreviousInvoiceDateTime,
                PreviousNBRPrice: PreviousNBRPrice,
                PreviousQuantity: PreviousQuantity,
                PreviousUOM: PreviousUOM,
                PreviousSubTotal: PreviousSubTotal,
                PreviousVATAmount: PreviousVATAmount,
                PreviousVATRate: PreviousVATRate,
                PreviousSD: PreviousSD,
                PreviousSDAmount: PreviousSDAmount,
                ReasonOfReturn: ReasonOfReturn,
                BEItemNo: BEItemNo,
                CPCName: CPCName,
                TransactionType: TransactionType,
                BillingPeriodFrom: BillingPeriodFrom,
                BillingPeriodTo: BillingPeriodTo,
                BillingDays: BillingDays,
                BOMReferenceNo: BOMReferenceNo,
                IsFixedVAT: IsFixedVAT,
                BOMId: BOMId

            }

            console.log(modelData);

            $(sender).parents("tr:first").remove();

            SubTotal();

            var modal = document.getElementById('myHigherModal');

            $.ajax({
                data: modelData,
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                success: function (html) {
                    modal.style.display = "block";
                    $("#myHigherModal").html(html);

                }
            , complete: function () { $(".loading").fadeOut(200).hide("slow") }

            });


        }

        function callbackCPCNameUpdateSalesModal(model) {

            url = "/Vms/SaleInvoice/CPCNameUpdate";
            container = "editorItemRows4";
            $.ajax({
                data: model,
                url: url,
                cache: false,
                success: function (html) {
                    $("#" + container).append(html);
                    callingFixedTable();
                    SubTotal();
                }
            });

        }

        $("#EngineInfoTabNita #btnTraking").on("click", function () {

            var questionMSG = "Are you sure to Save Trakings!";
            Ask(questionMSG, function () {

                var SalesInvoiceNo = $("#Sale .trSalesInvoiceNo").val();
                var TransactionType = '@Model.TransactionType';
                @*var BranchId = '@Model.BranchId';*@
                //TransactionType
                if (SalesInvoiceNo == null || SalesInvoiceNo == "") {
                    ShowResult("Fail", "You are requested to Save before Change!");
                    return;
                }

                ////var $Items = $("#EngineInfoTab .dSelected:input:checkbox:checked");
                var $Items = $("#EngineInfoTabNita .dIsSelect:input:checkbox:checked");

                if ($Items == null || $Items.length == 0) {
                    ShowResult("Fail", "You are requested to Select before Change!");
                    return;
                }

                IDs = [];
                console.log($Items);

                $Items.each(function (item) {


                    ////var SalesInvoiceNo = $(this).closest('tr').find('.SalesInvoiceNo').text();
                    var ItemNo = $(this).closest('tr').find('.dItemNoT').val();
                    var IsSale = $(this).closest('tr').find('.dIsSale').val();
                    var FinishItemNo = $(this).closest('tr').find('.dFinishItemNo').val();
                    var Heading1 = $(this).closest('tr').find('.dHeading1T').val();
                    //var SalesInvoiceNo = $(this).closest('tr').find('.dSaleInvoiceNo').text();

                    //console.log(SalesInvoiceNo);

                    //if (SalesInvoiceNo == null || SalesInvoiceNo == "") {
                    //    return;
                    //}



                    items = {}
                    items["SaleInvoiceNo"] = SalesInvoiceNo;
                    items["ItemNo"] = ItemNo;
                    items["IsSale"] = "Y";
                    items["FinishItemNo"] = FinishItemNo;
                    items["Heading1"] = Heading1;
                    items["transactionType"] = TransactionType;
                    //item["ProductCode"] = ProductCode;

                    IDs.push(items);
                    //console.log(item)

                });


                var model = {
                    IDs: IDs,
                    //BranchId: BranchId
                }
                console.log(model)
                var url = '/VMS/SaleInvoice/TrakingsUpdate';


                $.ajax({
                    url: url
                , data: JSON.stringify(model)
                , type: 'Post'
                , traditional: true
                , beforeSend: function () { $(".loading").show(); }
                , success: function (rVM) {
                    ShowResult(rVM.Status, rVM.Message);

                    if (rVM.Status == "Success") {
                        //SearchEngine();
                    }
                }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
                , contentType: 'application/json; charset=utf-8'
                , dataType: 'json'

                });



            });


        });


        $('.AddRowDeliveryTraking').on("click", function () {

            //var product = $('.trProduct').val();
            //if (product == "0" || product == "") {
            //    ShowResult("Fail", "Select a product first!");
            //    return;
            //}

            //var PurchaseNo = $('.trPurchaseNo').val();
            //if (PurchaseNo == "0" || PurchaseNo == "") {
            //    ShowResult("Fail", "Select a Purchase No first!");
            //    return;
            //}


            var itemName = $('.trProductName').val();
            var count = 0;

            $('.dItemName').each(function () {
                var existing = $(this).val();
                if (itemName == existing) {
                    count++;
                }
            });

            if (count > 0) {
                ShowResult("Fail", "Item already exists!");
                return;
            }

            var container = $(this).attr('data-container');
            var url = $(this).attr('data-url');
            AddRowDeliveryTraking(container, url)
            return false;
        });


        $("#DeliveryChallanTraking #btnDeliveryTraking").on("click", function () {

            var questionMSG = "Are you sure to Save Sale delivery challan!";
            Ask(questionMSG, function () {

                var SalesInvoiceNo = $("#Sale .trSalesInvoiceNo").val();
                var TransactionType = '@Model.TransactionType';
                @*var BranchId = '@Model.BranchId';*@
                //TransactionType
                if (SalesInvoiceNo == null || SalesInvoiceNo == "") {
                    ShowResult("Fail", "You are requested to Save before Change!");
                    return;
                }

                var post = $("#Post").val();
                if (post == "N" || post == "") {
                    ShowResult("Fail", "You are requested to Post sales challan before delivery challan save!");
                    return;
                }

                ////var $Items = $("#EngineInfoTab .dSelected:input:checkbox:checked");
                //var $Items = $("#EngineInfoTabNita .dIsSelect:input:checkbox:checked");
                //var $ItemsDC = $("#DeliveryChallanTraking .dIsSelect:input:checkbox:checked");
                var $ItemsDC = $("#DeliveryChallanTraking .ddItemName:input");

                if ($ItemsDC == null || $ItemsDC.length == 0) {
                    ShowResult("Fail", "You are requested to add before Save!");
                    return;
                }

                var customerId = $(".trCustomerId").val();
                var ChallanDate = $(".trTransferDateTime").val();
                var PONo = $(".cPONo").val();
                var PODate = $(".trPODate").val();
                debugger

                dcIDs = [];
                console.log($ItemsDC.length);

                $ItemsDC.each(function (itemDC) {

                    ////alert(item);
                    ////var SalesInvoiceNo = $(this).closest('tr').find('.SalesInvoiceNo').text();
                    var ItemNo = $(this).closest('tr').find('.ddItemNo').val();
                    var Quantity = $(this).closest('tr').find('.ddQuantity').val();
                    var UnitPrice = $(this).closest('tr').find('.ddUnitPrice').val();
                    var SubTotal = $(this).closest('tr').find('.ddSubTotal').val();
                    var PartialDescription = $(this).closest('tr').find('.ddPartialDescription').val();
                    //var SalesInvoiceNo = $(this).closest('tr').find('.dSaleInvoiceNo').text();

                    ////alert(Quantity);
                    console.log(ItemNo);

                    console.log(PartialDescription);

                    //if (SalesInvoiceNo == null || SalesInvoiceNo == "") {
                    //    return;
                    //}




                    itemsDC = {}
                    itemsDC["DeliveryChallanNo"] = SalesInvoiceNo;
                    itemsDC["CustomerID"] = customerId;
                    itemsDC["ItemNo"] = ItemNo;
                    itemsDC["ChallanDate"] = ChallanDate;
                    itemsDC["PONo"] = PONo;
                    itemsDC["PODate"] = PODate;
                    itemsDC["Quantity"] = Quantity;
                    itemsDC["UnitPrice"] = UnitPrice;

                    itemsDC["SubTotal"] = SubTotal;
                    itemsDC["PartialDescription"] = PartialDescription;

                    itemsDC["transactionType"] = TransactionType;
                    //item["ProductCode"] = ProductCode;

                    dcIDs.push(itemsDC);
                    //console.log(item)

                });


                var model = {
                    IDs: dcIDs,
                    //BranchId: BranchId
                }
                console.log(model)
                var url = '/VMS/SaleInvoice/SaleDeliveryAdd';


                $.ajax({
                    url: url
                , data: JSON.stringify(model)
                , type: 'Post'
                , traditional: true
                , beforeSend: function () { $(".loading").show(); }
                , success: function (rVM) {
                    ShowResult(rVM.Status, rVM.Message);

                    if (rVM.Status == "Success") {
                        //SearchEngine();
                    }
                }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
                , contentType: 'application/json; charset=utf-8'
                , dataType: 'json'

                });



            });


        });

        $("#DeliveryChallanTraking #btnDeliveryTrakingUpdate").on("click", function () {

            var questionMSG = "Are you sure to Update Sale delivery challan!";
            Ask(questionMSG, function () {

                var SalesInvoiceNo = $("#Sale .trSalesInvoiceNo").val();
                var TransactionType = '@Model.TransactionType';
                @*var BranchId = '@Model.BranchId';*@
                //TransactionType
                if (SalesInvoiceNo == null || SalesInvoiceNo == "") {
                    ShowResult("Fail", "You are requested to Save before Change!");
                    return;
                }

                var post = $("#Post").val();
                if (post == "N" || post == "") {
                    ShowResult("Fail", "You are requested to Post sales challan before delivery challan save!");
                    return;
                }

                ////var $Items = $("#EngineInfoTab .dSelected:input:checkbox:checked");
                //var $Items = $("#EngineInfoTabNita .dIsSelect:input:checkbox:checked");
                //var $ItemsDC = $("#DeliveryChallanTraking .dIsSelect:input:checkbox:checked");
                var $ItemsDC = $("#DeliveryChallanTraking .ddItemName:input");

                if ($ItemsDC == null || $ItemsDC.length == 0) {
                    ShowResult("Fail", "You are requested to add before Save!");
                    return;
                }

                var customerId = $(".trCustomerId").val();
                var ChallanDate = $(".trTransferDateTime").val();
                var PONo = $(".cPONo").val();
                var PODate = $(".trPODate").val();
                var post = "";
                debugger

                dcIDs = [];
                console.log($ItemsDC.length);

                $ItemsDC.each(function (itemDC) {

                    ////alert(item);
                    ////var SalesInvoiceNo = $(this).closest('tr').find('.SalesInvoiceNo').text();
                    var ItemNo = $(this).closest('tr').find('.ddItemNo').val();
                    var Quantity = $(this).closest('tr').find('.ddQuantity').val();
                    var UnitPrice = $(this).closest('tr').find('.ddUnitPrice').val();
                    var SubTotal = $(this).closest('tr').find('.ddSubTotal').val();
                    var PartialDescription = $(this).closest('tr').find('.ddPartialDescription').val();
                    //var SalesInvoiceNo = $(this).closest('tr').find('.dSaleInvoiceNo').text();
                    post = $(this).closest('tr').find('.ddPost').val();

                    ////alert(Quantity);
                    console.log(ItemNo);

                    console.log(PartialDescription);

                    //if (SalesInvoiceNo == null || SalesInvoiceNo == "") {
                    //    return;
                    //}




                    itemsDC = {}
                    itemsDC["DeliveryChallanNo"] = SalesInvoiceNo;
                    itemsDC["CustomerID"] = customerId;
                    itemsDC["ItemNo"] = ItemNo;
                    itemsDC["ChallanDate"] = ChallanDate;
                    itemsDC["PONo"] = PONo;
                    itemsDC["PODate"] = PODate;
                    itemsDC["Quantity"] = Quantity;
                    itemsDC["UnitPrice"] = UnitPrice;

                    itemsDC["SubTotal"] = SubTotal;
                    itemsDC["PartialDescription"] = PartialDescription;

                    itemsDC["transactionType"] = TransactionType;
                    //item["ProductCode"] = ProductCode;

                    dcIDs.push(itemsDC);
                    //console.log(item)

                });

                if (post.toLowerCase() == 'true' || post.toLowerCase() == 'y') {
                    ShowResult("Fail", "Data Already Posted!");
                    return;
                }

                var model = {
                    IDs: dcIDs,
                    //BranchId: BranchId
                }
                console.log(model)
                var url = '/VMS/SaleInvoice/SaleDeliveryUpdate';


                $.ajax({
                    url: url
                , data: JSON.stringify(model)
                , type: 'Post'
                , traditional: true
                , beforeSend: function () { $(".loading").show(); }
                , success: function (rVM) {
                    ShowResult(rVM.Status, rVM.Message);

                    if (rVM.Status == "Success") {
                        //SearchEngine();
                    }
                }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }
                , contentType: 'application/json; charset=utf-8'
                , dataType: 'json'

                });



            });


        });



        function PostDataDeliveryChallan(sender) {

            var SalesInvoiceNo = $("#Sale .trSalesInvoiceNo").val();
            debugger
            //var Id = $("#Id").val();
            //var Post = $("#Post").val();

            var $ItemsDC = $("#DeliveryChallanTraking .ddItemName:input");
            var post = "";
            $ItemsDC.each(function (itemDC) {


                //var ItemNo = $(this).closest('tr').find('.ddItemNo').val();

                post = $(this).closest('tr').find('.ddPost').val();


            });

            debugger
            //var post = $(this).closest('tr').find('.ddPost').val();
            if (post.toLowerCase() == 'true' || post.toLowerCase() == 'y') {
                ShowResult("Fail", "Data Already Posted!");
                return;
            }
            var url = '/Vms/SaleInvoice/PostDeleveryChallan?ids=' + SalesInvoiceNo + '~';
            var questionMSG = "Are you sure to Post Data!";
            singlePostDlete(questionMSG, url);
        }



    </script>
}

