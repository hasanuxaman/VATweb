@model VATViewModel.DTOs.ReceiveMasterVM
@using UIHelper.MVC
@using SymOrdinary
@using System.Threading;
@using VATServer.Ordinary

@{ 
    ShampanIdentity identity = null;
    try
    {
        identity = (ShampanIdentity)Thread.CurrentPrincipal.Identity;
    }
    catch (Exception)
    {
        Response.Redirect("/VMS/Home/Login");
        return;
    }
}

@{
    ViewBag.Title = "Index";
}

@Html.HiddenFor(model => model.transactionType, new { @class = " cTransactionType" })


<div class="headrow">
    <div style="display: none" id="formAppend"></div>
    <button type="button" title="Add New Receive" data-url="/VMS/Receive/Create?tType=@Model.transactionType" onclick="GoTo(this)" id="" class="sym-btn-add ">&nbsp;New</button>
    @*<button type="button" title="Post Checked Issue" data-url="/VMS/Receive/Post" onclick="postedData(this, 'myDataTable');" id="" class="sym-btn-post">&nbsp;Post</button>*@
 
        @if (Model.transactionType == "TollFinishReceive")
        {
            <label class="pull-right">Production Receive Invoice (@Model.transactionType)</label>
        }
        else
        {
        <label class="pull-right">Receive Invoice (@Model.transactionType)</label>            
        }

</div>
<div class=" tabMenu">
    <ul style="font-size: 1.4em;" class="tabDesign nav nav-tabs">
        @if (Model.transactionType == "TollFinishReceive")
        {
          <li class="tabDefault active"><a data-toggle="tab" href="#ReceiveIndex">Production Index</a></li>
        }
        else
        {
          <li class="tabDefault active"><a data-toggle="tab" href="#ReceiveIndex">Receive Index</a></li>  
        }
        
        
        <li class="tabDefault"><a data-toggle="tab" href="#Excel" class="vdsInfoTab">Excel Upload</a></li>
        <li class="tabDefault"><a data-toggle="tab" href="#Integration" class="">Integration</a></li>

    </ul>
</div>
<div class="tab-content">
    <div id="ReceiveIndex" class="tab-pane fade  in active">
        <div class="thinbox  animated zoomIn faster">
            <div class="th_thinbox">
                <p>Receive Invoices</p>
            </div>
            <div class="dtSearch formDesign">
                <div class="row">

                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.SearchField)
                        </div>
                        <div class="editor-field">
                            @Html.SimpleDropDownFor(m => m.SearchField, "/Config/DropDown/ReceiveColumnSearch", new { @class = " form-control " })
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.SearchValue)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.SearchValue, new { @placeholder = "Search Value", @class = "  form-control" })
                        </div>
                    </div>

                    @*<div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ReceiveNo)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ReceiveNo, new { @placeholder = "Receive No", @class = "  form-control" })
                        </div>
                    </div>*@
                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IssueDateTimeFrom)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.IssueDateTimeFrom, new { @placeholder = "Issue Date From", @class = "customDatePicker defaultDate  form-control" })
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.IssueDateTimeTo)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.IssueDateTimeTo, new { @placeholder = "Issue Date To", @class = "customDatePicker defaultDate  form-control" })
                        </div>
                    </div>
                    <div class="col-md-1">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Post)
                        </div>
                        <div class="editor-field">
                            <select id="Post" class="form-control">
                                <option value=""></option>
                                <option value="Y">Y</option>
                                <option value="N">N</option>
                            </select>
                        </div>
                    </div>

                    <div class="trk1_5">
                        <div class="editor-label">
                            <label>Branch Name</label>
                        </div>
                        <div class="editor-field">
                            @*@Html.SimpleDropDownFor(model => model.BranchId, "/Config/DropDown/BranchProfile", new { @class = " cBranchId form-control" })*@
                            @*@Html.SimpleDropDownFor(model => model.BranchId, "/Config/DropDown/UserBranchProfile", new { @class = " cBranchId form-control" })*@
                            @Html.DropDownListFor(model => model.BranchId, new SelectList(Model.BranchList, "BranchID", "BranchName", Model.BranchId), new { @class = "cBranchId form-control" })
                        </div>
                    </div>

                    <div class="trk1_5">
                        <div class="editor-label">
                            <label>Select Top</label>
                        </div>
                        <div class="editor-field">
                            @Html.SimpleDropDownFor(model => model.SelectTop, "/Config/DropDown/RecordSelectList", new { @class = " cBranchId form-control" })
                            &nbsp;
                        </div>
                    </div>


                </div>
                    <div class="row">
                    <div class="col-md-4">
                        <div class="editor-label">
                            <label>&nbsp;</label>
                        </div>
                        <div class="editor-field">
                            <button type="button" title="Click to Search" id="btnDialog" class="sym-btn-search">&nbsp;Search</button>
                            <button type="button" title="Clear Data" id="Clear" class=" sym-btn-clear">&nbsp;Clear</button>
                            <button type="button" title="Post Data" onclick="PostData()" class="sym-btn-post">&nbsp;Post</button>
                            <button type="button" title="Export Data" onclick="ExportExcel()" class="sym-btn-Excel-Export">&nbsp;Export</button>
                        </div>
                    </div>
                    <div class="col-md-1">
                        <div class="editor-label">
                            <label>Export All</label>
                        </div>
                        <div class="editor-field">
                            @Html.CheckBox("ExportAll", new { id = "idExportAll", @class = "cExportAll form-control", @name = "att[]" })
                        </div>
                    </div>
                </div>
              
            </div>
            <p>&nbsp;</p>
            <table id="myDataTable" class="display">
                <thead>
                    <tr>
                        <th class="center"><input type="checkbox" class="chkAll" /> Action</th>
                        <th>Receive No</th>
                        <th>Receive Date</th>
                        <th>TotalAmount</th>
                        <th>transactionType</th>
                        <th>Serial No</th>
                        <th>Is Posted</th>
                        <th>Import Id</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <br />
        </div>
        <div class="headrow">
            <button type="button" title="Add New Receive" data-url="/VMS/Receive/Create?tType=@Model.transactionType" " onclick=" goto(this)" id="" class="sym-btn-add ">&nbsp;New</button>
            @*<button type="button" title="Post Checked Issue" data-url="/VMS/Receive/Post" onclick="postedData(this, 'myDataTable');" id="" class="sym-btn-post">&nbsp;Post</button>*@
        </div>
        <div id="myModal" class="trkmodal"></div>
    </div>
    <div id="Excel" class="tab-pane fade  in ">

        <div class="thinbox row">
            <div class="th_thinbox">
                <p>Excel Import</p>
            </div>
            @using (Html.BeginForm("ImportExcel", "Receive", FormMethod.Post, new { enctype = "multipart/form-data", @Id = "frmReceiveImport" }))
        {
    @Html.HiddenFor(model => model.transactionType)

    <div class="col-md-offset-6 col-md-6 verticalLine">
        <div class="col-md-6">
            <label>File</label>
            @Html.TextBoxFor(model => model.File, new { @type = "file", @accept = ".xlsx,.xls", @class = " form-control" })
        </div>
        <div class="col-md-6">
            <label>&nbsp;</label>
            <button type="button" onclick="pageSubmit('frmReceiveImport');" class="sym-btn-file-upload">&nbsp;Upload</button>
        </div>
    </div>
        }
        </div>
    </div>

    <div id="Integration" class="tab-pane fade  in formDesign">
        <div class="thinbox">
            <div class="th_thinbox">
                <p>Integration</p>
            </div>

            @if (Model.transactionType == "Other" || Model.transactionType == "ReceiveReturn")
            {

                if (OrdinaryVATDesktop.IsACICompany(Convert.ToString(Session["CompanyCode"])))
                {
                    @Html.Partial("~/Areas/VMS/Views/Integration/_ReceiveHeader_ACI.cshtml")

                }
                if (Convert.ToString(Session["CompanyCode"]).ToLower() == "smc" || Convert.ToString(Session["CompanyCode"]).ToLower() == "smcholding")
                {
                    @Html.Partial("~/Areas/VMS/Views/Integration/_ReceiveHeader_SMC.cshtml")

                }

                else if (Convert.ToString(Session["CompanyCode"]) == "EON" || Convert.ToString(Session["CompanyCode"]).ToLower() == "purofood" || Convert.ToString(Session["CompanyCode"]).ToLower() == "eahpl" || Convert.ToString(Session["CompanyCode"]).ToLower() == "eail" || Convert.ToString(Session["CompanyCode"]).ToLower() == "eeufl" || Convert.ToString(Session["CompanyCode"]).ToLower() == "exfl")
                {
                    @Html.Partial("~/Areas/VMS/Views/Integration/_ReceiveHeader_EON.cshtml")

                }
                else if (Convert.ToString(Session["CompanyCode"]).ToLower() == "BERGER".ToLower())
                {
                    @Html.Partial("~/Areas/VMS/Views/Integration/_ReceiveHeader_Berger.cshtml")

                }

                else if (Convert.ToString(Session["CompanyCode"]).ToLower() == "JAPFA".ToLower())
                {
                    @Html.Partial("~/Areas/VMS/Views/Integration/_ReceiveHeader_JAPFA.cshtml")

                }

                else if (OrdinaryVATDesktop.IsNourishCompany(Convert.ToString(Session["CompanyCode"])))
                {
                    @Html.Partial("~/Areas/VMS/Views/Integration/_ReceiveHeader_Nourish.cshtml")

                }

            }



        </div>
    </div>


</div>

<script>

    debugger;
    var fileInput = document.getElementById('File');
    fileInput.addEventListener('change', function () {
        debugger;
        var filePath = this.value;
        var allowedExtensions = /(\.xls[xm]?|\.xlsm|\.csv|\.txt|\.sun|\.pdf)$/i; // Modified regex to include .xls, .xlsx, .xlsm , .csv, .txt, .sun ,.pdf
        if (filePath) {
            if (!allowedExtensions.test(filePath)) {
                ShowResult("Warning", "Please select files with allowed extensions: .xls, .xlsx, .xlsm, .csv, .txt, .sun, .pdf");
                this.value = '';
            }
        }
    });


</script>


    <script>

        function PostData() {

            var questionMSG = "Are you sure to Post Data!";

            Ask(questionMSG, function () {


                var IDs = [];
                var $Items = $(".dSelected:input:checkbox:checked");

                if ($Items == null || $Items.length == 0) {
                    ShowResult("Fail", "You are requested to Select before Post!");
                    return;
                }

                $Items.each(function () {
                    var ID;
                    ID = $(this).attr("data-Id");

                    var vID = ID.split("~")[0];

                    IDs.push(vID);
                });

                var model = {
                    IDs: IDs
                }
                var url = '/VMS/Receive/MultiplePost';

                $.ajax({
                    url: url
                    , data: model
                    , type: 'Post'
                    , traditional: true
                    , beforeSend: function () { $(".loading").show(); }
                    , success: function (rVM) {
                        ShowResult(rVM.Status, rVM.Message);
                    }
                    , complete: function () { $(".loading").fadeOut(200).hide("slow") }

                });
            });

        }

        function ExportExcel() {

            var questionMSG = "Are you sure to Export Excel!";

            Ask(questionMSG, function () {

                var ReceiveNo = $('#ReceiveNo').val();
                var IssueDateTimeFrom = $('#IssueDateTimeFrom').val();
                var IssueDateTimeTo = $('#IssueDateTimeTo').val();
                var Post = $('#Post').val();
                

                var SelectTop = $('#SelectTop').val();
                var ExportAll = $('#idExportAll').is(":checked");
                var TransactionType = $('.cTransactionType').val();


                var IDs = [];
                var $Items = $(".dSelected:input:checkbox:checked");

                if (!ExportAll) {
                    if ($Items == null || $Items.length == 0) {
                        ShowResult("Fail", "You are requested to Select before Export!");
                        return;
                    }
                }

                $Items.each(function () {
                    var ID;
                    ID = $(this).attr("data-Id");

                    var vID = ID.split("~")[0];

                    IDs.push(vID);
                });

                var model = {
                    IDs: IDs
                }
                var url = '/VMS/Receive/ExportExcel';
                var form = $('<form action="' + url + '"></form>');

                IDs.forEach(function (item) {
                    form.append($('<input  value="' + item + '" name="Ids" />'))

                })

                form.append($('<input  value="' + ReceiveNo + '" name="ReceiveNo" />'))
                form.append($('<input  value="' + IssueDateTimeFrom + '" name="IssueDateTimeFrom" />'))
                form.append($('<input  value="' + IssueDateTimeTo + '" name="IssueDateTimeTo" />'))
                form.append($('<input  value="' + Post + '" name="Post" />'))

                form.append($('<input  value="' + SelectTop + '" name="SelectTop" />'))
                form.append($('<input  value="' + ExportAll + '" name="ExportAll" />'))
                form.append($('<input  value="' + TransactionType + '" name="TransactionType" />'))
               // console.log(1);
                form.appendTo('#formAppend').submit()
                // form.appendTo('body').submit()

                //$.ajax({
                //    url: url
                //    , data: model
                //    , type: 'Post'
                //    , traditional: true
                //    , beforeSend: function () { $(".loading").show(); }
                //    , success: function (rVM) {
                //        ShowResult(rVM.Status, rVM.Message);
                //    }
                //    , complete: function () { $(".loading").fadeOut(200).hide("slow") }

                //});
            });

        }


    </script>

    <script language="javascript" type="text/javascript">

        $(document).ready(function () {

            SelectAllForDelete();
            $.datepicker.regional[""].dateFormat = 'dd/M/y';
            $.datepicker.setDefaults($.datepicker.regional['']);
            var oTable = $('#myDataTable').dataTable({
                "bServerSide": true,
                "sAjaxSource": "/VMS/Receive/_index?transactionType=@Model.transactionType",
                "bProcessing": true,
                "aLengthMenu": tablelength(),
                "bJqueryUI": true,
                "bAutoWidth": false,

                "fnServerData": function (sSource, aoData, fnCallback) {
                    $('.dtSearch :input').each(function () {
                        var Name = $(this).attr("Id")
                        var Value = $(this).val()
                        aoData.push({ "name": Name, "value": Value });
                    });
                    $.getJSON(sSource, aoData, function (json) {
                        fnCallback(json);
                    });
                },

                "aoColumns": [
                                {
                                    "sName": "Id",
                                    "bSearchable": false,
                                    "bSortable": false,
                                    "sWidth": "15%",
                                    "sClass": "center",
                                    "fnRender": function (oObj) {
                                        return ' <input onclick="CheckAll(this)" class="dSelected" type="checkbox" data-Id="' + oObj.aData[0] + '">'
                                            + '&nbsp; <a title="Click on for Edit" href=\"/VMS/Receive/Edit/' + oObj.aData[0].split('~')[0] + '?TransactionType=' + oObj.aData[8] + '\" class="sym-btn-edit-row"></a>'
                                            + '&nbsp; <a title="Click on for Post" data-url="/VMS/Receive/Post"  onclick=btnPost(this); data-Id="' + oObj.aData[0] + '\" class="sym-btn-post-row"></a>'
                                        ;
                                    }
                                }
                                , { "sName": "ItemNo", "sWidth": "15%" }
                                , { "sName": "IssueDateTime", "sWidth": "10%" }
                                , { "sName": "TotalVat", "sWidth": "15%" }
                                , { "sName": "TotalAmount", "sWidth": "10%" }
                                , { "sName": "SerialNo", "sWidth": "12%" }
                                , { "sName": "Post", "sWidth": "10%" }
                                , { "sName": "ImportId", "sWidth": "20%" }
                ]
            });

            $('#btnDialog').click(function () {
                var model = $('.dtSearch :input').serialize();
                $.ajax({
                    url: "/VMS/Receive/Index",
                    cache: false,
                    data: model,
                    success: function (html) {
                        oTable.fnDraw();
                    }
                });
            });
            ////clearing fields
            $("#Clear").on('click', function () {
                $(".Dropdown").select2("val", "");
                $(".form-control").val("");
            });

        });
    </script>

