@model VATViewModel.DTOs.PopUpViewModel
@using UIHelper.MVC
@{
    Layout = "~/Areas/VMS/Views/Shared/_ModalLayout.cshtml";
}
<style>
    .trkMT10 {
        margin-top: 10px;
    }

    .sortableHeader {
        cursor: pointer;
    }
    table.trkFixTable tr.trSelectPopUpProduct td {
        overflow-x: hidden;
    }

</style>
<div class="HigherModal-content">
    <div class="HigherModal-header">
        <span class="closeHigher">&times;</span>
        <h2 class="text-center">Payment Receive Search</h2>
    </div>
    <div class="HigherModal-body formDesign">
        <div class="row">
            <div class="col-md-2">
                <label>Search Field</label>
                @Html.SimpleDropDown("SearchField", "/Config/DropDown/BankPaymentReceiveColumnSearch", new { @class = " form-control " })
            </div>
            <div class="col-md-2">
                <label>Search Value</label>
                @Html.TextBox("SearchValue", "", new { @class = " form-control" })
            </div>
            <div class="col-md-2">
                <label>From Date</label>
                @Html.TextBoxFor(model => model.FromDate, new { @placeholder = "From Date", @class = "  customDatePicker  form-control" })
            </div>
            <div class="col-md-2">
                <label>To Date</label>

                @Html.TextBoxFor(model => model.ToDate, new { @placeholder = "To Date", @class = "  customDatePicker  form-control" })
                @Html.HiddenFor(m => m.CustomerId, new { @class = "dCustomerId" })




            </div>
            <div class="col-md-1">
                <div class="editor-field">
                    <label>&nbsp;</label>
                    <button type="button" title="Click to Search" id="searchBtn" class="sym-btn-search btnPopUpSearch">&nbsp;Search</button>
                </div>
            </div>
            <div class="col-md-1">
                <label>&nbsp;</label>
                <button type="button" title="Clear Data" id="Clear" class=" sym-btn-clear">&nbsp;Clear</button>
            </div>
        </div>
        <div class="row">
            <div class="fixedParent">
                <table class="trkFixTable" id="productPopUpTable">
                    <thead>
                        <tr>
                            <th>SL</th>
                            <th hidden="">Id</th>
                            <th hidden="">BDBankId</th>
                            <th>Credit Code</th>
                            <th>Bank Code</th>
                            <th>Bank Name</th>
                            <th>Mode Of Payment</th>
                            <th>Instrument No</th>
                            <th>InstrumentDate</th>
                            <th>Amount</th>
                            <th>IsUsed DS</th>
                  
                        </tr>
                    </thead>
                    <tbody id="popUpTbody1"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@*product group loading code*@
<script>
 
    ////if product type is selected but product group is not selected

</script>

@*fixed table*@
<script language="javascript" type="text/javascript">


    function callingFixedPopUpTable() {
        var args = [100, 100, 100, 200, 100, 150, 150, 100, 100, 100, 100, 200, 200, 200, 200, 200, 200, 200, 200];
        trkFixedPopUpTable("productPopUpTable", 3, args);
        debugger;

    }
    $(function () {
        callingFixedPopUpTable();
    })
</script>

<script>
    ////closing higher modal
    function closeHigherModal() {
        $("#myHigherModal").html("");
        trkmodal.style.display = "none";
    }
    var span = document.getElementsByClassName("closeHigher")[0];
    var trkmodal = document.getElementById('myHigherModal');
    span.onclick = function () {
        closeHigherModal();
    }

    $(function () {
        $('#productPopUpTable').unbind().on('dblclick', '.trSelectPopUpProduct', function () {
            
            var Id = $(this).children('td.popUpId').text();
            var BankName = $(this).children('td.popUpBankName').text();
            var BDBankId = $(this).children('td.popUpBDBankId').text();
            var ModeOfPayment = $(this).children('td.popUpModeOfPayment').text();
            var InstrumentNo = $(this).children('td.popUpInstrumentNo').text();
            var InstrumentDate = $(this).children('td.popUpInstrumentDate').text();
            var Amount = $(this).children('td.popUpAmount').text();
            var IsUsedDS = $(this).children('td.popUpIsUsedDS').text();
            var productData = {
                Id: Id,
                BankName: BankName,
                ModeOfPayment: ModeOfPayment,
                InstrumentNo: InstrumentNo,
                InstrumentDate: InstrumentDate,
                Amount: Amount,
                IsUsedDS: IsUsedDS,
                BDBankId: BDBankId
            };
            selectPopUpProduct(productData);
        });
        function selectPopUpProduct(productData) {
        

            callbackPaymentReceiveModal(productData);
            closeHigherModal();
        }
        $(document).on('click', '.trSelectPopUpProduct', function () {
            var activeEl = $('tr.active');
            activeEl.removeClass("active");
            $(this).addClass(" active");
        });
    })
</script>

<script>

    $('#SearchValue').on('input', function (e) {
        
        SearchProducts();
        debugger;

    });
   
    function ShowSelectedProduct() {
      
        var interval = setInterval(function () {
            if (document.querySelectorAll('#SearchField option').length > 0) {
              
                SearchProducts();
                clearInterval(interval);
            }
        }, 200);
    }
    function SearchProducts() {
       
        var FromDate = $('#FromDate').val();
        var ToDate = $('#ToDate').val();
        var CustomerId = $('#CustomerId').val();
       
        var SearchField = $('#SearchField').val();
        var SearchValue = $('#SearchValue').val();

        var model = {
            SearchField: SearchField,
            SearchValue: SearchValue,
            FromDate: FromDate,
            ToDate: ToDate,
            CustomerId: CustomerId,
        }
        console.log(model);
        $.ajax({
            data: model
            , url: "/Vms/MPLBankPaymentReceive/GetFilteredPaymentReceive"
            , cache: false
            , beforeSend: function () { $(".loading").show(); }
            , success: function (html) {
                $("#popUpTbody1").html("");
                $("#popUpTbody1").html(html);
                callingFixedPopUpTable();
            }
            , complete: function () { $(".loading").fadeOut(200).hide("slow") }
        });

    }
    $(function () {
        ShowSelectedProduct();
        $('.btnPopUpSearch').click(function () {
            SearchProducts();
        });
        $("#Clear").on('click', function () {
            $(".HigherModal-body .Dropdown").select2("val", "");
            $(".HigherModal-body .form-control").val("");
        });
    });
</script>

@*for sorting column*@
<script>
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("productPopUpTable");
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            if (rows.length > 150) {
                ShowResult("Fail", "There is too much data to sort");
                return;
            }
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1) ; i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
