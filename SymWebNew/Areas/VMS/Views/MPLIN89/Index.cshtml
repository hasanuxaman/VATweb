@model VATViewModel.DTOs.MPLIN89VM
@using UIHelper.MVC
@using SymOrdinary
@using System.Threading;
@using VATServer.Ordinary
@{
    ShampanIdentity identity = null;
    try
    {
        identity = (ShampanIdentity)Thread.CurrentPrincipal.Identity;
    }
    catch (Exception)
    {
        Response.Redirect("/VMS/Home/Login");
        return;
    }
}

@{
    ViewBag.Title = "Index";
}

@Html.HiddenFor(model => model.TransactionType)

<style>
    .aTag {
        background-color: darkgray !important;
    }

    .aActiveTag {
        background-color: deepskyblue !important;
    }
</style>

<div class="headrow">
    <button type="button" title="Post Data" onclick="PostData()" class="sym-btn-post">&nbsp;Post</button>
    <label class="pull-right">IN89</label>
</div>

<div class=" tabMenu">
    <ul style="font-size: 1.4em;" class="tabDesign nav nav-tabs">
        <li class="tabDefault active"><a id="aTagReceive" class="aTag" href="/VMS/MPLIN89/Index?TransactionType=Other">IN-89</a></li>
        <li class="tabDefault active"><a id="aTagIssue" class="aTag" href="/VMS/MPLIN89/TransferReceiveIndex">Transfer Receive</a></li>
    </ul>
</div>


<div class="tab-content">
    <div id="SaleIndex" class="tab-pane fade  in active">
        <div class="thinbox  animated zoomIn animated zoomIn faster">
            <div class="th_thinbox">
                @if (Model.TransactionType.ToLower() == "other")
                {
                    <p>Transfer Receive List </p>
                }
            </div>
            <div class="dtSearch formDesign">
                <div class="row">
                    <div class="trk1_5">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.SearchField)
                        </div>
                        <div class="editor-field">
                            @Html.SimpleDropDownFor(m => m.SearchField, "/Config/DropDown/ReceiveIN89ColumnSearch", new { @class = " form-control " })
                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.SearchValue)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.SearchValue, new { @class = "  form-control" })
                        </div>
                    </div>

                    <div class="trk_5">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Post)
                        </div>
                        <div class="editor-field">
                            <select id="Post" class="form-control">
                                <option value=""></option>
                                <option value="Y">Y</option>
                                <option value="N">N</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-1">
                        <div class="editor-label">
                            <label>Select Top</label>

                        </div>
                        <div class="editor-field">

                            @Html.SimpleDropDownFor(model => model.SelectTop, "/Config/DropDown/RecordSelectList", new { @class = " cBranchId form-control" })

                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.FromDate)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.FromDate, new { @placeholder = "Date From", @class = "customDatePicker defaultDate form-control" })
                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.ToDate)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.ToDate, new { @placeholder = "Date To", @class = "customDatePicker defaultDate form-control" })
                        </div>
                    </div>
                    <div class="trk1_5">
                        <div class="editor-label">
                            <label>Branch Name</label>
                        </div>
                        <div class="editor-field">
                            <div class="editor-field">
                                @Html.DropDownListFor(model => model.BranchId, new SelectList(Model.BranchList, "BranchID", "BranchName", Model.BranchId), new { @class = "cBranchId form-control"})
                            </div>
                        </div>
                    </div>

                </div>

                <div class="row">
                    <div class="col-md-7">
                        <div class="editor-label">
                            <label>&nbsp;</label>
                        </div>
                        <div class="editor-field">
                            <button type="button" title="Click to Search" id="btnDialog" class="sym-btn-search">&nbsp;Search</button>
                            <button type="button" title="Clear Data" id="Clear" class=" sym-btn-clear">&nbsp;Clear</button>
                        </div>
                    </div>

                </div>

            </div>
            <p>&nbsp;</p>
            <table id="myDataTable" class="display">
                <thead>
                    <tr>
                        <th class="center"><input type="checkbox" class="chkAll" />Action</th>
                        <th>Code</th>
                        <th>Transaction Date</th>
                        <th>Issue Natural Qty</th>
                        <th>Receive Natural Qty</th>
                        <th>Gain Natural Qty</th>
                        <th>Is Posted</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
            <br />
        </div>

        <div class="headrow">
            <button type="button" title="Post Data" onclick="PostData()" class="sym-btn-post">&nbsp;Post</button>
        </div>

        <form id="ReportForm" method="post" target="_blank"></form>
    </div>


</div>



<div id="myHigherModal" class="HigherModal"></div>

<script>


    function PostData() {
        debugger;
        var questionMSG = "Are you sure to Post Data!";

        Ask(questionMSG, function () {
            debugger;
            var IDs = [];
            var $Items = $("#SaleIndex  .dSelected:input:checkbox:checked");

            if ($Items == null || $Items.length == 0) {
                ShowResult("Fail", "You are requested to Select before Post!");
                return;
            }

            $Items.each(function () {
                var ID = $(this).attr("data-Id");
                ID = ID.split("~");
                if (ID[1] == "N") {
                    IDs.push(ID[0]);
                }
            });
            var model = {
                IDs: IDs,
            }
            debugger;
            var url = '/VMS/MPLIN89/MPLIN89Post';

            $.ajax({
                url: url
                , data: model
                , type: 'Post'
                , traditional: true
                , beforeSend: function () { $(".loading").show(); }
                , success: function (rVM) {
                    debugger;
                    if (rVM == "Already Posted!") {
                        ShowResult("Fail", rVM);
                    }
                    else {
                        ShowResult(rVM[0], rVM[1]);
                    }
                }
                , complete: function () { $(".loading").fadeOut(200).hide("slow") }

            });
        });
    };


</script>



<script language="javascript" type="text/javascript">

    $(document).ready(function () {
        debugger;
        var pathname = window.location.pathname;
        if (pathname == "/Index" || pathname == "/VMS/MPLIN89/Index") {
            $('#aTagReceive').removeClass("aTag");
            $('#aTagReceive').addClass("aActiveTag");    
        }
        else if (pathname == "/ReceiveIndex" || pathname == "/VMS/MPLIN89/TransferReceiveIndex") {
            $('#aTagIssue').removeClass("aTag");
            $('#aTagIssue').addClass("aActiveTag");
        }
        

        SelectAllForDelete();
        $.datepicker.regional[""].dateFormat = 'dd/M/y';
        $.datepicker.setDefaults($.datepicker.regional['']);
        var oTable = $('#myDataTable').dataTable({
            "bServerSide": true,
            "sAjaxSource": "/VMS/MPLIN89/_index?TransactionType=@Model.TransactionType",
            "bProcessing": true,
            "aLengthMenu": tablelength(),
            "bJqueryUI": true,
            "bAutoWidth": false,

            "fnServerData": function (sSource, aoData, fnCallback) {
                $('.dtSearch :input').each(function () {
                    var Name = $(this).attr("Id")
                    var Value = $(this).val()
                    aoData.push({ "name": Name, "value": Value });
                });


                $.getJSON(sSource, aoData, function (json) {
                    debugger;
                    console.log(json.aaData);
                    $.each(json.aaData, function (index, element) {
                        //debugger;
                        //console.log(index, element[3]);
                        //var totalAmnt = element[4].replace(',', '');
                        //var totalVat = element[5].replace(',', '');

                        //json.aaData[index][4] = parseFloat(totalAmnt).toLocaleString('en-US', { minimumFractionDigits: 2 });
                        //json.aaData[index][5] = parseFloat(totalVat).toLocaleString('en-US', { minimumFractionDigits: 2 });
                    });
                    debugger;
                    fnCallback(json);
                });
            },

            "aoColumns": [
                            {
                                "sName": "Id",
                                "bSearchable": false,
                                "bSortable": false,
                                "sWidth": "12%",
                                "sClass": "center",
                                "fnRender": function (oObj) {
                                    debugger;
                                    return ' <input onclick="CheckAll(this)" class="dSelected" type="checkbox" data-Id="' + oObj.aData[0] + '" data-post="' + oObj.aData[0].split('~')[1] + '">'
                                        + '&nbsp; <a title="Click on for Edit" href=\"/VMS/MPLIN89/Edit/' + oObj.aData[0].split('~')[0] + '?TransactionType=' + oObj.aData[7] + '\" class="sym-btn-edit-row"></a>'
                                    ;
                                }
                            }
                            , { "sName": "Code", "sWidth": "11%" }
                            , { "sName": "TransactionDateTime", "sWidth": "11%" }
                            , { "sName": "IssueNaturalQuantity", "sWidth": "11%" }
                            , { "sName": "ReceiveNaturalQuantity", "sWidth": "10%" }
                            , { "sName": "GainNaturalQuantity", "sWidth": "10%" }
                            , { "sName": "Status", "sWidth": "10%" }
            ]
        });

        $('#btnDialog').click(function () {
            debugger
            var model = $('.dtSearch :input').serialize();
            
            $.ajax({
                url: "/VMS/MPLIN89/Index",
                cache: false,
                success: function (html) {
                    oTable.fnDraw();
                }
            });
        });

        ////clearing fields
        $("#Clear").on('click', function () {
            $(".Dropdown").select2("val", "");
            $(".form-control").val("");
        });


    });

    function checkValidBranch(element, branchId) {
        if ('@Session["BranchId"]' != branchId) {
            ShowResult("Fail", "This Information not for this Branch!");
            return;
        }

        btnPost(element);
    };


</script>
