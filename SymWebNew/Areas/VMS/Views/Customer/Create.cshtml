@model VATViewModel.DTOs.CustomerVM
@using UIHelper.MVC

@using (Html.BeginForm("CreateEdit", "Customer", FormMethod.Post, new { enctype = "multipart/form-data", @Id = "frmCustomerMy" }))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Operation)
    @Html.HiddenFor(model => model.CustomerID)

    <div class="headrow">
        @if (Model.Operation == "add")
        {
            <button type="button" name="btnName" value="Save" title="Save Data" onclick="pageSubmit('frmCustomerMy')" class="sym-btn-save">&nbsp;Save</button>
            <label class="pull-right">Customer > Create</label>
        }
        else
        {
            <button type="button" name="btnName" value="Update" title="Update Data" onclick="pageSubmit('frmCustomerMy')" class="sym-btn-update">&nbsp;Update</button>
            <label class="pull-right">Customer > Edit</label>
        }
        <button type="button" title="Go To Index" data-url="/VMS/Customer" onclick="GoTo(this)" class="sym-btn-detail">&nbsp;Index</button>
        <button type="button" title="Add New Customer" data-url="/VMS/Customer/Create" onclick="GoTo(this)" id="" class=" sym-btn-add ">&nbsp;New</button>

    </div>
    if (Model.Operation == "update")
    {
        <div class="col-sm-12 col-md-12">
            <div class="input-group   col-lg-8  col-md-8  col-sm-8 col-xs-12 text-color col-md-offset-2" style="">
                <a class="input-group-addon btn btn-primary hidden-xs changePage" data-pager-action='first' id="first"><i class="fa fa-angle-double-left"></i>First</a>
                <a class="input-group-addon btn btn-primary hidden-xs changePage" data-pager-action='previous' id="precode"><i class="fa fa-angle-left"></i>Previous</a>
                @Html.SimpleDropDown("", "/Config/DropDown/IdNameDropdown?tableName=Customers&Id=CustomerID&Name=CustomerName&AllData=no&code=CustomerCode", new { @class = " trNavigateMenu form-control selectDropdown " })
                <a class="input-group-addon btn btn-primary changePage" data-pager-action='current' id="current"><i class="fa fa-search"></i></a>
                <a class="input-group-addon btn btn-primary hidden-xs changePage" data-pager-action='next' id="nextcode">Next <i class="fa  fa-angle-right"></i></a>
                <a class="input-group-addon btn btn-primary hidden-xs changePage" data-pager-action='last' id="last">Last <i class="fa  fa-angle-double-right"></i></a>
            </div>
        </div>
    }

    <div class="col-md-6 trkPL-0 trkPR-2">
        <div class="thinbox animated zoomIn faster">
            <div class="th_thinbox">
                <p>Basic</p>
            </div>
            <div class="row">
                <div class="form-group">
                    <label for="CustomerCode" class="col-md-4 control-label text-right trkLabelMargin">Code</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.CustomerCode, new { @placeholder = "Customer Code", @class = " required form-control" })
                        @Html.ValidationMessageFor(model => model.CustomerCode)
                    </div>
                    <label for="CustomerName" class="col-md-4 control-label text-right trkLabelMargin">Name</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.CustomerName, new { @placeholder = "Customer Name", @class = " required form-control" })
                        @Html.ValidationMessageFor(model => model.CustomerName)
                    </div>
                </div>

                <div class="form-group">
                    <label for="CustomerGroupID" class="col-md-4 control-label text-right trkLabelMargin">Customer Group</label>
                    <div class="col-md-8">
                        <div class="input-group col-md-6" style="margin-bottom:6px;">
                            @Html.SimpleDropDownFor(model => model.CustomerGroupID, "/Config/DropDown/CustomerGroup", new { @class = "required form-control trkMT-0" })
                        </div>
                        @Html.ValidationMessageFor(model => model.CustomerGroupID)
                    </div>
                    <label for="StartDateTime" class="col-md-4 control-label text-right trkLabelMargin">Start Date</label>
                    <div class="col-md-8">
                        <div class="input-group col-md-6" style="margin-bottom:6px;">
                            @Html.TextBoxFor(model => model.StartDateTime, new { @class = " trDate customDatePicker required  form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.StartDateTime)
                    </div>
                </div>

                <div class="form-group">
                    <label for="TINNo" class="col-md-4 control-label text-right trkLabelMargin">TIN No</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.TINNo, new { @placeholder = "TIN No.", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.TINNo)
                    </div>
                    <label for="VATRegistrationNo" class="col-md-4 control-label text-right trkLabelMargin">BIN / VAT Registration No.</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.VATRegistrationNo, new { @placeholder = "BIN / VAT Registration No.", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.VATRegistrationNo)
                    </div>

                    <label for="NIDNo" class="col-md-4 control-label text-right trkLabelMargin">NID No.</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.NIDNo, new { @placeholder = "NID No.", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.NIDNo)
                    </div>
                </div>
            </div>
        </div>
        <div class="thinbox animated zoomIn faster">
            <div class="th_thinbox">
                <p>Business</p>
            </div>
            <div class="row">
                <div class="form-group">
                    <label for="BusinessType" class="col-md-4 control-label text-right trkLabelMargin">Business Type</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.BusinessType, new { @placeholder = "Business Type", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.BusinessType)
                    </div>
                    <label for="BusinessCode" class="col-md-4 control-label text-right trkLabelMargin">Business Code</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.BusinessCode, new { @placeholder = "Business Code", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.BusinessCode)
                    </div>

                   
                    <label for="IsCreditCustomer" class="col-md-4 control-label text-right trkLabelMargin">IsCreditCustomer</label>
                    <div class="col-md-4" >
                        @Html.SimpleDropDownFor(m => m.IsCreditCustomer, "/Config/DropDown/DecisionList", new { @class = " trNavigateMenu form-control " })


                    </div>
                </div>
            </div>
            <div style="padding-bottom:20px"></div>
        </div>
    </div>

    <div class="col-md-6 trkPX-0">
        <div class="thinbox animated zoomIn faster">
            <div class="th_thinbox">
                <p>Detail</p>
            </div>
            <div class="row">
                <div class="form-group">
                    <label for="Address1" class="col-md-4 control-label text-right trkLabelMargin">Address</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.Address1, new { @placeholder = "Address", @class = "  form-control" })
                        @Html.ValidationMessageFor(model => model.Address1)
                    </div>
                    <label for="Address3" class="col-md-4 control-label text-right trkLabelMargin">Address3</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.Address3, new { @placeholder = "Address3", @class = "  form-control" })
                        @Html.ValidationMessageFor(model => model.Address3)
                    </div>
                    <label for="City" class="col-md-4 control-label text-right trkLabelMargin">City</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.City, new { @placeholder = "City", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.City)
                    </div>

                    @*<label for="Address2" class="col-md-4 control-label text-right trkLabelMargin" >Address2</label>
                        <div class="col-md-8">
                            @Html.TextBoxFor(model => model.Address2, new { @placeholder = "Address 2", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Address2)
                        </div>*@
                </div>

                <div class="form-group">
                    @*<label for="Address3" class="col-md-4 control-label text-right trkLabelMargin">Address3</label>
                        <div class="col-md-8">
                            @Html.TextBoxFor(model => model.Address3, new { @placeholder = "Address 3", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Address3)
                        </div>*@

                </div>

                <div class="form-group">

                    <label for="Country" class="col-md-4 control-label text-right trkLabelMargin">Country</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.Country, new { @placeholder = "Country", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.Country)
                    </div>
                </div>

                <div class="form-group">
                    <label for="Email" class="col-md-4 control-label text-right trkLabelMargin">Email</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.Email, new { @placeholder = "Email", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                    <label for="FaxNo" class="col-md-4 control-label text-right trkLabelMargin">FaxNo</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.FaxNo, new { @placeholder = "Fax Number", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.FaxNo)
                    </div>
                    <label for="TelephoneNo" class="col-md-4 control-label text-right trkLabelMargin">Telephone No</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.TelephoneNo, new { @placeholder = "Telephone No.", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.TelephoneNo)
                    </div>
                </div>

                <div class="form-group">
                    @*<label for="VDSPercent" class="col-md-4 control-label text-right trkLabelMargin">VDSPercent</label>
                        <div class="col-md-8" style="margin-bottom:6px;">
                            <div class="input-group">
                                @Html.TextBoxFor(model => model.VDSPercent, new { @placeholder = "VDS Percent", @class = "priceLen form-control" })
                                <span class="input-group-addon">%</span>
                                @Html.ValidationMessageFor(model => model.VDSPercent)
                            </div>
                          </div>*@
                    <label for="ShortName" class="col-md-4 control-label text-right trkLabelMargin">Short Name</label>
                    <div class="col-md-8">
                        @Html.TextBoxFor(model => model.ShortName, new { @placeholder = "Short Name", @class = " cShortName form-control" })
                        @Html.ValidationMessageFor(model => model.ShortName)
                    </div>


                </div>

                <div class="form-group">

                    <label for="Comments" class="col-md-4 control-label text-right trkLabelMargin">Comments</label>
                    <div class="col-md-8">
                        @Html.TextAreaFor(model => model.Comments, new { @placeholder = "Comments", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.Comments)
                    </div>

                    <label class="col-md-4 control-label text-right trkLabelMargin">Institution</label>
                    <div class="form-group">
                        <div class="col-md-3" style="margin-top:6px;">
                            @Html.SimpleDropDownFor(m => m.IsInstitution, "/Config/DropDown/DecisionList", new { @class = " trNavigateMenu form-control required" })
                        </div>
                    </div>

                </div>



                <div class="form-group">
                    <label class="col-md-2 control-label text-right trkLabelMargin">Is Active</label>
                    <div class="form-group">
                        <div class="col-md-3" style="margin-top:6px;">
                            @Html.SimpleDropDownFor(m => m.ActiveStatus, "/Config/DropDown/DecisionList", new { @class = " trNavigateMenu form-control required" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @*<label for="ShortName" class="col-md-4 control-label text-right trkLabelMargin">Is Examted</label>
                    <div class="col-md-8">
                        <div class="col-md-3" style="margin-top:6px;">
                            @Html.SimpleDropDownFor(m => m.IsExamted, "/Config/DropDown/DecisionList", new { @class = " trNavigateMenu form-control" })
                        </div>
                    </div>*@
                    <label class="col-md-4 control-label text-right trkLabelMargin">IsExamted</label>
                    <div class="form-group">
                        <div class="col-md-3" style="margin-top:6px;">
                            @Html.SimpleDropDownFor(m => m.IsExamted, "/Config/DropDown/DecisionList", new { @class = " trNavigateMenu form-control " })
                        </div>
                    </div>
                </div>

                @*<div class="form-group">
                    <label for="IsTax" class="col-md-4 control-label text-right trkLabelMargin">Is Tax</label>
                    <div class="col-md-8">
                        <div class="col-md-3" style="margin-top:6px;">
                            @Html.SimpleDropDownFor(m => m.IsTax, "/Config/DropDown/DecisionList", new { @class = " trNavigateMenu form-control" })
                        </div>
                    </div>
                </div>*@

                <div class="form-group">
                    <label class="col-md-2 control-label text-right trkLabelMargin">IsTax</label>
                    <div class="form-group">
                        <div class="col-md-3" style="margin-top:6px;">
                            @Html.SimpleDropDownFor(m => m.IsTax, "/Config/DropDown/DecisionList", new { @class = " trNavigateMenu form-control " })
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <div class="col-md-12 trkPX-0">
        <div class="thinbox animated zoomIn faster">
            <div class="th_thinbox">
                <p>Others</p>
            </div>
            <div class="row trkBelowDiv">

                <div class="col-md-2 trkLabelTopRight">
                    <label>SC</label>
                </div>
                <div class="trk1_5">
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.SC, new { @class = " cVATTotal NumberCheck right form-control" })
                    </div>
                </div>

                <div class="col-md-2 trkLabelTopRight">
                    <label>RF</label>
                </div>
                <div class="trk1_5">
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.RF, new { @class = " cTC NumberCheck right form-control" })
                    </div>
                </div>

                <div class="col-md-1 trkLabelTopRight">
                    <label>SSLF</label>
                </div>
                <div class="trk1_5">
                    <div class="editor-field">
                        @Html.TextBoxFor(model => model.SSLF, new { @class = " cLF NumberCheck right form-control" })
                    </div>
                </div>

                <div class="col-md-1 trkLabelTopRight">
                    <label>DC</label>
                </div>
                <div class="trk1_5">
                    <div class="editor-field">
                        @Html.TextBoxFor(m => m.DC, new { @class = " cOtherTotalAmnt NumberCheck right form-control" })
                    </div>
                </div>

            </div>

        </div>
    </div>
    
    <div class="col-md-12 trkPX-0">
        <div class="thinbox animated zoomIn faster">
            <div class="th_thinbox">
                <p>Contact Person</p>
            </div>
            <div class="row">
                <div class="form-group">
                    <label for="ContactPerson" class="col-md-2 control-label text-right trkLabelMargin">Name</label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.ContactPerson, new { @placeholder = "Contact Person", @class = "   form-control" })
                        @Html.ValidationMessageFor(model => model.ContactPerson)
                    </div>
                    <label for="ContactPersonDesignation" class="col-md-2 control-label text-right trkLabelMargin">Designation</label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.ContactPersonDesignation, new { @placeholder = "Designation", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.ContactPersonDesignation)
                    </div>
                </div>

                <div class="form-group">
                    <label for="ContactPersonTelephone" class="col-md-2 control-label text-right trkLabelMargin">Telephone</label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.ContactPersonTelephone, new { @placeholder = "Telephone No.", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.ContactPersonTelephone)
                    </div>
                    <label for="ContactPersonEmail" class="col-md-2 control-label text-right trkLabelMargin">Email</label>
                    <div class="col-md-4">
                        @Html.TextBoxFor(model => model.ContactPersonEmail, new { @placeholder = "Email", @class = " form-control" })
                        @Html.ValidationMessageFor(model => model.ContactPersonEmail)
                    </div>
                </div>
            </div>
        </div>
    </div>
    

    <div class="col-md-12 trkPX-0 trkPR-2">

        <div class="thinbox animated zoomIn faster trkMY-0">
            <div class="th_thinbox">
                <p> Address</p>
            </div>
            <div class="row">
                <div class="form-group">
                    <label for="ProductName" class="col-md-2 control-label text-right trkLabelMargin">Customer Address</label>
                    <div class="col-md-6" style="margin-bottom: 6px;">
                        @Html.TextBox("CustomerAddress", "", new { @placeholder = "Customer Address", @class = "cCustomerAddress  form-control" })
                    </div>

                    @Html.Hidden("Id", "", new { @class = " cAddressId" })

                    <label class="col-md-1"></label>
                    <button type="button" id="AddressAdd" data-url="/VMS/Customer/BlankItem" title="Add Customer Address" name="btnName" value="Save" class="sym-btn-add-row AddRow" data-container="AddressAdd">&nbsp;Add</button>
                    <button type="button" id="AddressUpdate" data-url="/VMS/Customer/BlankItem" title="Update Customer Address" name="btnName" value="Update" class="sym-btn-update AddRow" data-container="AddressUpdate">&nbsp;Update</button>


                </div>

                <div>
                    <style>
                        table {
                            font-family: arial, sans-serif;
                            border-collapse: collapse;
                            width: 100%;
                        }

                        td, th {
                            border: 1px solid #dddddd;
                            text-align: left;
                            padding: 8px;
                            background-color: #B4E391;
                        }

                        tr:nth-child(even) {
                            background-color: #dddddd;
                        }
                    </style>
                    <table>
                        <tr>
                            <th style="width:08%"> Action</th>
                            <th>Customer Address</th>

                        </tr>
                        <tbody id="customerAddressRows">
                            @if (Model.Details != null)
                                {
                                    foreach (var item in Model.Details)
                                    {
                                        Html.RenderPartial("_customerAddress", item);
                                    }
                                }

                        </tbody>
                    </table>
                </div>

            </div>
            <div style="padding-bottom:15px;">
            </div>
        </div>

    </div>

    <div class="col-md-12 trkPX-0 trkPR-2">

        <div class="thinbox animated zoomIn faster trkMY-0">
            <div class="th_thinbox">
                <p>Discount</p>
            </div>
            <div class="row">
                <div class="form-group">

                    <label for="StockQuantity" class="col-md-2 control-label text-right trkLabelMargin">Min Value</label>
                    <div class="col-md-2" style="margin-bottom: 6px;">
                        @Html.TextBox("MinValue", "", new { @placeholder = "Min Value", @class = "cMinValue  form-control" })
                    </div>

                    <label for="StockValue" class="col-md-2 control-label text-right trkLabelMargin">Max Value</label>
                    <div class="col-md-2" style="margin-bottom: 6px;">
                        @Html.TextBox("MaxValue", "", new { @placeholder = "Max Value", @class = "cMaxValue  form-control" })
                    </div>

                    <label for="StockValue" class="col-md-2 control-label text-right trkLabelMargin">Rate(%)</label>
                    <div class="col-md-2" style="margin-bottom: 6px;">
                        @Html.TextBox("Rate", "", new { @placeholder = "Rate(%)", @class = "cRate  form-control" })
                    </div>

                    <label for="Comments" class="col-md-2 control-label text-right trkLabelMargin">Description</label>
                    <div class="col-md-2" style="margin-bottom: 6px;">
                        @Html.TextBox("Comments", "", new { @placeholder = "Description", @class = "cComments  form-control" })
                    </div>

                    @Html.Hidden("Id", "", new { @class = " cDiscountId" })

                    <label class="col-md-1"></label>
                    <button type="button" id="DiscountAdd" data-url="/VMS/Customer/BlankItems" title="Add Stock" name="btnName" value="Save" class="sym-btn-add-row AddRowDiscount" data-container="DiscountAdd">&nbsp;Add</button>

                    <button type="button" id="DiscountUpdate" data-url="/VMS/Customer/BlankItems" title="Add Stock" name="btnName" value="Update" class="sym-btn-update AddRowDiscount" data-container="DiscountUpdate">&nbsp;Update</button>


                </div>


                <div>
                    <style>
                        table {
                            font-family: arial, sans-serif;
                            border-collapse: collapse;
                            width: 100%;
                        }

                        td, th {
                            border: 1px solid #dddddd;
                            text-align: left;
                            padding: 8px;
                            background-color: #B4E391;
                        }

                        tr:nth-child(even) {
                            background-color: #dddddd;
                        }
                    </style>
                    <table>
                        <tr>
                            <th style="width:08%"> Action</th>
                            <th>DiscountId</th>
                            <th>CustomerID</th>
                            <th>MinValue</th>
                            <th>MaxValue</th>
                            <th>Rate</th>
                            <th>Comments</th>

                        </tr>
                        <tbody id="DiscountRows">

                            @if (Model.Discount != null)
                                {
                                    foreach (var item in Model.Discount)
                                    {
                                        Html.RenderPartial("_customerDiscount", item);
                                    }
                                }

                        </tbody>
                    </table>
                </div>

            </div>
            <div style="padding-bottom:15px;">
            </div>
        </div>

    </div>

    if (Model.CompanyCode.ToLower() == "TelNet".ToLower())
    {
        if (Model.Operation == "update")
        {

            <div class="col-md-12 trkPX-0 trkPR-2">

                <div class="thinbox animated zoomIn faster trkMY-0">
                    <div class="th_thinbox">
                        <p>Customer Bill Process</p>
                    </div>
                    <div class="row">
                        <div class="form-group ">

                            <label for="January" class="col-md-1 control-label text-right trkLabelMargin">January</label>
                            <div class="col-md-1 pt-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.JanChecked, new { @class = "cJanChecked checkBoxStyle form-control", id = "IdJanChecked" })
                            </div>

                            <label for="February" class="col-md-1 control-label text-right trkLabelMargin">February</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.FebChecked, new { @class = "cFebChecked checkBoxStyle form-control", id = "IdFebChecked" })
                            </div>

                            <label for="March" class="col-md-1 control-label text-right trkLabelMargin">March</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.MarChecked, new { @class = "cMarChecked checkBoxStyle form-control", id = "IdMarChecked" })
                            </div>

                            <label for="April" class="col-md-1 control-label text-right trkLabelMargin">April</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.AprChecked, new { @class = "cAprChecked checkBoxStyle form-control", id = "IdAprChecked" })
                            </div>

                            <label for="May" class="col-md-1 control-label text-right trkLabelMargin">May</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.MayChecked, new { @class = "cMayChecked checkBoxStyle form-control", id = "IdMayChecked" })
                            </div>

                            <label for="June" class="col-md-1 control-label text-right trkLabelMargin">June</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.JunChecked, new { @class = "cJunChecked checkBoxStyle form-control", id = "IdJunChecked" })
                            </div>

                            <label for="July" class="col-md-1 control-label text-right trkLabelMargin">July</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.JulChecked, new { @class = "cJulChecked checkBoxStyle form-control", id = "IdJulChecked" })
                            </div>

                            <label for="August" class="col-md-1 control-label text-right trkLabelMargin">August</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.AugChecked, new { @class = "cAugChecked checkBoxStyle form-control", id = "IdAugChecked" })
                            </div>

                            <label for="September" class="col-md-1 control-label text-right trkLabelMargin">September</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.SepChecked, new { @class = "cSepChecked checkBoxStyle form-control", id = "IdSepChecked" })
                            </div>

                            <label for="October" class="col-md-1 control-label text-right trkLabelMargin">October</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.OctChecked, new { @class = "cOctChecked checkBoxStyle form-control", id = "IdOctChecked" })
                            </div>

                            <label for="November" class="col-md-1 control-label text-right trkLabelMargin">November</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.NovChecked, new { @class = "cNovChecked checkBoxStyle form-control", id = "IdNovChecked" })
                            </div>

                            <label for="December" class="col-md-1 control-label text-right trkLabelMargin">December</label>
                            <div class="col-md-1">
                                @Html.CheckBoxFor(model => model.CustomerBillProcess.DecChecked, new { @class = "cDecChecked checkBoxStyle form-control", id = "IdDecChecked" })
                            </div>

                            <label for="All" class="col-md-1 control-label text-right trkLabelMargin">All</label>
                            <div class="col-md-1">
                                @Html.CheckBox("All", new { @class = "cAll checkBoxStyle form-control" })
                            </div>

                            <label class="col-md-1"></label>
                            @*<button type="button" id="DiscountAdd" data-url="/VMS/Customer/BlankItems" title="Add Stock" name="btnName" value="Save" class="sym-btn-add-row AddRowDiscount" data-container="DiscountAdd">&nbsp;Add</button>*@

                            <div class="row">
                                <button type="button" id="CBillProcessUpdate" onclick="AddCustomerBill()" title="Update Customer Bill Process" name="btnName" value="Update" class="sym-btn-update" data-container="CustomerBillProcessUpdate" style="margin-top: 20px;">&nbsp;Update</button>

                            </div>

                            @*<div style="padding-top:15px;">

                                </div>*@

                        </div>

                    </div>
                    @*<div style="padding-bottom:15px;">
                        </div>*@
                </div>

            </div>
    
        }
    }

    <div id="testNavigate"></div>

    <div class="headrow">

        @if (Model.Operation == "add")
        {
            <button type="button" name="btnName" value="Save" title="Save Data" onclick="pageSubmit('frmCustomerMy')" class="sym-btn-save">&nbsp;Save</button>
        }
        else
        {
            <button type="button" name="btnName" value="Update" title="Update Data" onclick="pageSubmit('frmCustomerMy')" class="sym-btn-update">&nbsp;Update</button>
        }
        <button type="button" title="Go To Index" data-url="/VMS/Customer" onclick="GoTo(this)" class="sym-btn-detail">&nbsp;Index</button>
        <button type="button" title="Add New Customer" data-url="/VMS/Customer/Create" onclick="GoTo(this)" id="" class=" sym-btn-add ">&nbsp;New</button>

    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>

        $(function () {
            valiDation("frmCustomerMy");
            var operation = '@Model.Operation';
            if (operation == "update") {
                navigatePage();
            }

            function navigatePage() {
                var interval = setInterval(function () {
                    if (document.querySelectorAll('.trNavigateMenu option').length > 0) {
                        var id = '@Model.CustomerID';
                        $('.trNavigateMenu').select2("val", id);
                        clearInterval(interval);
                    }
                }, 200);
                ////navigating previous-next
                $('.changePage').click(function () {
                    var id = '@Model.CustomerID';
                    var btn = $(this).attr("data-pager-action");
                    if (btn.toLocaleLowerCase() == "current") {
                        var targetId = $('.trNavigateMenu').val();
                        if (id == targetId) {
                            return;
                        }
                        id = targetId;
                    }
                    window.location = "/VMS/Customer/Navigate?id=" + id + "&btn=" + btn;
                });
            }

        });


    </script>
}


<style>
    .checkBoxStyle {
        height: 35px !important;
    }
</style>

<script>

    $(".cAll").change(function () {
        if (this.checked) {
            document.getElementById("IdJanChecked").checked = true;
            document.getElementById("IdFebChecked").checked = true;
            document.getElementById("IdMarChecked").checked = true;
            document.getElementById("IdAprChecked").checked = true;
            document.getElementById("IdMayChecked").checked = true;
            document.getElementById("IdJunChecked").checked = true;
            document.getElementById("IdJulChecked").checked = true;
            document.getElementById("IdAugChecked").checked = true;
            document.getElementById("IdSepChecked").checked = true;
            document.getElementById("IdOctChecked").checked = true;
            document.getElementById("IdNovChecked").checked = true;
            document.getElementById("IdDecChecked").checked = true;
        } else {
            document.getElementById("IdJanChecked").checked = false;
            document.getElementById("IdFebChecked").checked = false;
            document.getElementById("IdMarChecked").checked = false;
            document.getElementById("IdAprChecked").checked = false;
            document.getElementById("IdMayChecked").checked = false;
            document.getElementById("IdJunChecked").checked = false;
            document.getElementById("IdJulChecked").checked = false;
            document.getElementById("IdAugChecked").checked = false;
            document.getElementById("IdSepChecked").checked = false;
            document.getElementById("IdOctChecked").checked = false;
            document.getElementById("IdNovChecked").checked = false;
            document.getElementById("IdDecChecked").checked = false;
        }
    });


    function AddCustomerBill() {
        
        var url = "/VMS/Customer/AddCustomerBill";

        var CustomerID = $('#CustomerID').val();

        var JanChecked = document.getElementById("IdJanChecked").checked;
        var FebChecked = document.getElementById("IdFebChecked").checked;
        var MarChecked = document.getElementById("IdMarChecked").checked;
        var AprChecked = document.getElementById("IdAprChecked").checked;
        var MayChecked = document.getElementById("IdMayChecked").checked;
        var JunChecked = document.getElementById("IdJunChecked").checked;
        var JulChecked = document.getElementById("IdJulChecked").checked;
        var AugChecked = document.getElementById("IdAugChecked").checked;
        var SepChecked = document.getElementById("IdSepChecked").checked;
        var OctChecked = document.getElementById("IdOctChecked").checked;
        var NovChecked = document.getElementById("IdNovChecked").checked;
        var DecChecked = document.getElementById("IdDecChecked").checked;

        var model = {

            JanChecked: JanChecked,
            FebChecked: FebChecked,
            MarChecked: MarChecked,
            AprChecked: AprChecked,
            MayChecked: MayChecked,
            JunChecked: JunChecked,
            JulChecked: JulChecked,
            AugChecked: AugChecked,
            SepChecked: SepChecked,
            OctChecked: OctChecked,
            NovChecked: NovChecked,
            DecChecked: DecChecked,
            CustomerID: CustomerID,
        };

        $.ajax({

            data: model,
            url: url,
            cache: false,
            success: function (data) {

                ShowResult(data.Status, data.Message);
                return;

            }
        });

    }


</script>

<script>
    ////Clicking add button
    $('.AddRow').on("click", function () {
        var CustomerAddress = $('.cCustomerAddress').val();
        if (CustomerAddress == null || CustomerAddress == "") {
            ShowResult("Fail", "Enter a Customer Address first!");
            return;
        }



        var count = 0;

        $('.dCustomerAddress').each(function () {
            var existing = $(this).val();
            if (CustomerAddress == existing) {
                count++;
            }
        });

        if (count > 0) {
            ShowResult("Fail", "Customer Address already exists!");
            return;
        }

        var container = $(this).attr('data-container');
        var url = $(this).attr('data-url');
        AddRow(container, url)
        return false;
    });


    ////add row method
    function AddRow(container, url) {


        let Operation = "";

        if (container === "AddressUpdate") {
            Operation = "update"
        }
        else {
            Operation = "add"
        }

        let CustomerOperation = '@Model.Operation';


        if (CustomerOperation === "add") {
            ShowResult("Fail", "Please Add/ Search Customer first !");
            return;
        }


        var CustomerAddress = $('.cCustomerAddress').val();
        var AddressId = $('.cAddressId').val();
        var CustomerID = '@Model.CustomerID';

        var model = {

            CustomerAddress: CustomerAddress,
            CustomerID: CustomerID,
            Operation: Operation,
            Id: AddressId
        };

        $.ajax({
            data: model,
            url: url,
            cache: false,
            success: function (html) {

                $("#customerAddressRows").append(html);

                $('.detailHeadRow :input').val("");


            },
            error: function (xhr, error) {
                ShowResult('@Session["result"]');
            }

        });

        $('.cCustomerAddress').val("");
    }
</script>

@*for editing and removing a product row*@
<script>
    ////removing all selected row
    function RemoveMultiple() {
        var rows = $('.deleteCheckBox:checkbox:checked');
        if (rows.length == 0) {
            ShowResult("Fail", "Select a row first!");
            return;
        }
        Ask("Are you sure to Delete the item!", function () {
            rows.each(function () {
                $(this).parents("tr:first").remove();
            });
        });
    }

    $(".chkAll").click(function () {
        $('input:checkbox').not(this).prop('checked', this.checked);
    });

    ////edit a row
    function EditItem(sender) {
        ////setting the product value
        $tablerow = $(sender).closest('.tablerow');


        var CustomerAddress = $tablerow.find('.dCustomerAddress').val();
        let Id = $tablerow.find('.dId').val();

        //console.log(ProductName);

        $('.cCustomerAddress').val(CustomerAddress);
        $('.cAddressId').val(Id);


        $(sender).parents("tr:first").remove();



    }


    ////removing a row
    function RemoveItem(sender) {
        Ask("Are you sure to Delete the item!", function () {

            $tablerow = $(sender).closest('.tablerow');

            var Id = $tablerow.find('.dId').val();
            var CustomerID = $tablerow.find('.dCustomerID').val();

            window.location = "/VMS/Customer/DeleteAddress?id=" + Id + "&CustomerId=" + CustomerID;

            $(sender).parents("tr:first").remove();





            //$(sender).parents("tr:first").remove();

        });
    }
</script>


<script>

    $('.AddRowDiscount').on("click", function () {
        let MinValue = $('.cMinValue').val();
        let MaxValue = $('.cMaxValue').val();
        let Operation = '@Model.Operation';


        if (Operation === "add") {
            ShowResult("Fail", "Please Add/ Search Customer first !");
            return;
        }

        if (MinValue == "0" || MinValue == "") {
            ShowResult("Fail", "Entered a Min Value first !");
            return;
        }
        if (MaxValue == "0" || MaxValue == "") {
            ShowResult("Fail", "Entered a Max Value first!");
            return;
        }




        var container = $(this).attr('data-container');
        var url = $(this).attr('data-url');
        AddRowDiscount(container, url)
        return false;
    });


    ////add row method
    function AddRowDiscount(container, url) {
        let Operation = "";

        if (container === "DiscountUpdate") {
            Operation = "update"
        }
        else {
            Operation = "add"
        }


        let CustomerOperation = '@Model.Operation';


        if (CustomerOperation === "add") {
            ShowResult("Fail", "Please Add/ Search Customer first !");
            return;
        }



        let DiscountId = $('.cDiscountId').val();
        let MinValue = $('.cMinValue').val();
        let MaxValue = $('.cMaxValue').val();
        let Rate = $(".cRate").val();
        let Comments = $('.cComments').val();
        let CustomerID = '@Model.CustomerID';

        var model = {

            MinValue: MinValue,
            MaxValue: MaxValue,
            Rate: Rate,
            Comments: Comments,
            CustomerID: CustomerID,
            Operation: Operation,
            Id: DiscountId,


        };

        $.ajax({

            data: model,
            url: url,
            cache: false,
            success: function (html) {

                @*if ('@Session["result"]' === "Fail") {

                    ShowResult("Fail", "Requested Product Stocks Already Exit");
                        return;

                }

                if ('@Session["result"]' === "Success") {



                }*@

                $("#DiscountRows").append(html);

                $('.detailHeadRow :input').val("");


                $('.cMinValue').val("");
                $('.cMaxValue').val("");
                $('.cRate').val("");
                $('.cComments').val("");
            },

            error: function (xhr, error) {
                ShowResult('@Session["result"]');
            }


        });


    }




</script>

@*for editing and removing a product row*@
<script>
    ////removing all selected row
    function RemoveMultiple() {
        var rows = $('.deleteCheckBox:checkbox:checked');
        if (rows.length == 0) {
            ShowResult("Fail", "Select a row first!");
            return;
        }
        Ask("Are you sure to Delete the item!", function () {
            rows.each(function () {
                $(this).parents("tr:first").remove();
            });
        });
    }

    $(".chkAll").click(function () {
        $('input:checkbox').not(this).prop('checked', this.checked);
    });

    ////edit a row
    function EditItems(sender) {
        ////setting the product value
        $tablerow = $(sender).closest('.tablerow');


        var MinValue = $tablerow.find('.dMinValue').val();
        var MaxValue = $tablerow.find('.dMaxValue').val();
        var Rate = $tablerow.find('.dRate').val();
        var Comments = $tablerow.find('.dComments').val();
        var Id = $tablerow.find('.dId').val();

        //console.log(ProductName);

        $('.cMinValue').val(MinValue);
        $('.cMaxValue').val(MaxValue);
        $('.cRate').val(Rate);
        $('.cComments').val(Comments);
        $('.cDiscountId').val(Id);

        $(sender).parents("tr:first").remove();

    }


    ////removing a row
    function RemoveItems(sender) {
        Ask("Are you sure to Delete the item!", function () {

            $tablerow = $(sender).closest('.tablerow');

            var Id = $tablerow.find('.dId').val();
            var CustomerID = $tablerow.find('.dCustomerID').val();

            window.location = "/VMS/Customer/DeleteDiscount?id=" + Id + "&CustomerId=" + CustomerID;

            $(sender).parents("tr:first").remove();


            //$(sender).parents("tr:first").remove();

        });
    }
</script>