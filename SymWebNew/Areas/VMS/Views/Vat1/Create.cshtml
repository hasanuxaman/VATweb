@model VATViewModel.DTOs.BOMNBRVM
@using UIHelper.MVC
@using (Html.BeginForm("CreateEdit", "Vat1", FormMethod.Post, new { enctype = "multipart/form-data", @Id = "frmVat1" }))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.BOMId, new { @class = " cBOMId" })
    @Html.HiddenFor(model => model.Post)
    @Html.HiddenFor(model => model.Operation)
    @Html.HiddenFor(model => model.VatAmount)
    @Html.HiddenFor(model => model.SDAmount)

    <style>
        div.btn-group .btn {
            padding-top: 0px !important;
            padding-bottom: 0px !important;
        }

        .fixedParent {
            margin-left: 0px !important;
            margin-right: 0px !important;
        }
    </style>

    <div class="headrow">
        @if (Model.Operation == "update")
        {
            <button type="button" title="Update Data" onclick="SaveData()" class="sym-btn-update">&nbsp;Update</button>
            <button type="button" title="" class="sym-btn-report trVat43Print">&nbsp;Print</button>
            
            @*<button type="button" title="" onclick="showModal()" class="sym-btn-report">&nbsp;VAT 6.1</button>*@
            if (Model.Post == "N")
            {
                <button type="button" title="Post Data" onclick="PostData(this)" class="sym-btn-post">&nbsp;Post</button>
            }
            <label class="pull-right">VAT 4.3 > Edit</label>
        }
        else if (Model.Operation == "add")
        {
            <button type="button" title="Save Data" onclick="SaveData()" class="sym-btn-save">&nbsp;Save</button>
            <label class="pull-right">VAT 4.3 > Create</label>
        }
        <button type="button" title="Go To Index" data-url="/VMS/Vat1" onclick="GoTo(this)" class="sym-btn-detail">&nbsp;Index</button>
        <button type="button" title="Add New Issue" data-url="/VMS/Vat1/Create" onclick="GoTo(this)" id="" class="sym-btn-add ">&nbsp;New</button>
    </div>
    
    <div class=" tabMenu">
    <ul style="font-size: 1.4em;" class="tabDesign nav nav-tabs">

        <li class="tabDefault active"><a data-toggle="tab" href="#BOMIndex">VAT 4.3</a></li>
        <li class="tabDefault"><a data-toggle="tab" href="#Excel" class="BOMInfoTab"> Upload</a></li>

    </ul>
</div>
   
    <div class="tab-content">
        <div id="BOMIndex" class="tab-pane fade  in active">
            <div class="col-md-3 trkNPLDiv">
                <div class="thinbox animated zoomIn faster ">
                    <div class="th_thinbox trkformDesign">
                        <p>Finish Product</p>
                    </div>
                    <div class="row trkformDesign">
                        <div class="form-group">
                            <label for="trItemGroup" class="control-label">Group</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    @Html.SimpleDropDown("trItemGroup", "/Config/DropDown/ProductCategory", new { @class = " trMasterGroupId  form-control  selectDropdown" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="trItemGroup" class="control-label">Product</label>
                            <div class="form-group">
                                @Html.HiddenFor(model => model.ItemNo, new { @class = " cItemNo" })
                                @Html.HiddenFor(model => model.FinishItemCode)
                                @Html.HiddenFor(model => model.FinishCategory)
                                <div class="editor-field">
                                    @Html.SimpleDropDown("MasterCode", "//", new { @class = " trMasteritemId  form-control  selectDropdown" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="editor-label">
                                @*<label for="FinishItemName">Product Name</label>*@
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(m => m.FinishItemName, new { @placeholder = "Finish Product Name", @class = " trMasterItemName  form-control", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="form-group col-md-6 trkNPLDiv">
                            <div class="editor-label">
                                @*<label for="ProductCode">Product Code</label>*@
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("ProductCode", null, new { @placeholder = "Product Code", @class = " trMasterProductCode  form-control", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="form-group col-md-6 trkNPLDiv trkNPRDiv">
                            <div class="editor-label">
                                @*<label for="HsCode">HS Code</label>*@
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("HsCode", null, new { @placeholder = "HS Code", @class = " trMasterHsCode  form-control", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="form-group col-md-8 trkNPLDiv">
                            <div class="editor-label">
                                <label for="VATName">VAT Name</label>
                            </div>
                            <div class="editor-field">
                                @Html.SimpleDropDownFor(m => m.VATName, "/Config/DropDown/PriceDeclaration", new { @class = " trMastervatName  form-control " })
                                @*@Html.SimpleDropDownFor(m => m.VATName, "/Config/DropDown/VatTypesList", new { @class = " trMastervatName  form-control " })*@
                            </div>
                        </div>
                        <div class="form-group col-md-4 trkNPLDiv trkNPRDiv">
                            <div class="editor-label">
                                <label for="Uom">UOM</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("Uom", null, new { @placeholder = "UOM", @class = " trMasterUom  form-control", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="form-group col-md-6 trkNPLDiv trkNPRDiv">
                            <div class="editor-label">
                                <label for="EffectDate">Effect Date</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.EffectDate, new { @class = " trMasterEffectDate customDatePicker defaultDate form-control" })
                            </div>
                        </div>


                        @*<div class="form-group">
                                <div class="editor-label">
                                    <label for="EffectDate">Effect Date</label>
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(model => model.EffectDate, new { @class = " trMasterEffectDate customDatePicker defaultDate form-control" })
                                </div>

                            </div>*@

                        <div class="form-group col-md-6 trkNPLDiv trkNPRDiv">
                            <div class="editor-label">
                                <label for="FirstSupplyDate">First Supply Date</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(model => model.FirstSupplyDate, new { @class = " cMasterFirstSupplyDate customDatePicker defaultDate form-control" })
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <div class="col-md-3 trkNPLDiv">
                <div class="thinbox animated zoomIn faster ">
                    <div class="th_thinbox trkformDesign">
                        <p>Usable Item</p>
                    </div>
                    <div class="row trkformDesign">
                        <div class="form-group">
                            <label for="trItemGroup" class="control-label">Group</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    @Html.SimpleDropDown("UsableItemGroup", "/Config/DropDown/ProductCategory", new { @class = " trUsableGroupId  form-control  selectDropdown" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="trItemGroup" class="control-label">Product</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    @Html.SimpleDropDown("UsableItem", "//", new { @class = " trUsableItemId  form-control  selectDropdown" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="editor-label">
                                @*<label for="FinishItemName">Product Name</label>*@
                            </div>
                            <div class="editor-field">
                                @Html.Hidden("trUsableItemNo")
                                @Html.Hidden("trUsableCategoryId")
                                @Html.TextBox("UsableItemName", null, new { @placeholder = "Product Name", @class = " trFinishItemName  form-control", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="form-group col-md-6 trkNPLDiv">
                            <div class="editor-label">
                                @*<label for="ProductCode">Product Code</label>*@
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("trUsableItemCode", null, new { @placeholder = "Product Code", @class = " trProductCode  form-control", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="form-group col-md-6 trkNPLDiv trkNPRDiv">
                            <div class="editor-label">
                                @*<label for="HsCode">HS Code</label>*@
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("UsableHsCode", null, new { @placeholder = "HS Code", @class = " trHsCode  form-control", @readonly = "readonly" })
                            </div>
                        </div>


                        <div class="form-group col-md-6 trkNPLDiv ">
                            <div class="editor-label">
                                <label for="Uom">UOM</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("Uom", null, new { @placeholder = "UOM", @class = " trUom  form-control", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="form-group col-md-6 trkNPLDiv trkNPRDiv">
                            <div class="editor-label">
                                <label>UOM Conv.</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("ConvFactor", "0", new { @class = "cConvFactor trVatName  form-control", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="editor-label">
                                <label for="EffectDate">Customer</label>
                            </div>
                            <div class="editor-field">
                                @Html.SimpleDropDownFor(m => m.CustomerID, "/Config/DropDown/Customer", new { @class = " customerId  form-control  selectDropdown" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="editor-label">
                                <label>Reference No</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBoxFor(m => m.ReferenceNo, new { @class = " cReferenceNo  form-control" })
                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <div class="col-md-3 trkNPLDiv">
                <div class="thinbox animated zoomIn faster ">
                    <div class="row trkformDesign">
                        <div class="form-group col-md-6 trkNPLDiv">
                            <div class="editor-label">
                                <label>LIFO</label>
                            </div>
                            <div class="editor-field chkDesign">
                                @Html.Hidden("trLifo", "True", new { @class = " chkValue" })
                                <input id="input-2" type="checkbox">
                            </div>
                        </div>

                        <div class="col-md-6 trkNPLDiv">
                            <label for="trItemGroup" class="control-label">Cost Price</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    @Html.TextBox("CostPrice", "0", new { @class = " trCostPrice priceLen right  form-control" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group col-md-6 trkNPLDiv trkNPRDiv">
                            <label for="PackSize" class="control-label">UOM</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    <select class="Dropdown form-control DropdownInited trPackSize" id="PackSize"></select>
                                </div>
                            </div>
                        </div>

                        <div class="form-group trkNPLDiv col-md-6">
                            <div class="editor-label">
                                <label for="FinishItemName">Total Qty</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("TotalQuantity", "0", new { @class = " trTotalQuantity priceLen right form-control" })
                            </div>
                        </div>

                        <div class="form-group trkNPLDiv trkNPRDiv col-md-6">
                            <div class="editor-label">
                                <label for="trWastage">Wastage</label>
                            </div>
                            <div class="editor-field col-md-9" style="padding-left: 0px; padding-right: 0px;">
                                @Html.TextBox("Wastage", "0", new { @placeholder = "Wastage", @class = " trWastage priceLen right form-control" })
                            </div>
                            <div class="col-md-3" style="padding-left: 0px; padding-right: 0px;">
                                <input type="hidden" id="wastagePercent" value="False">
                                <button type="button" class="btn btn-sm trkbtn wastagePercent">%</button>
                            </div>
                        </div>

                        <div class="form-group trkNPLDiv col-md-6">
                            <div class="editor-label">
                                <label for="trUseQty">Use Qty</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("UseQty", null, new { @placeholder = "Use Quantity", @class = " trUseQty priceLen right form-control", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="form-group trkNPLDiv trkNPRDiv col-md-6">
                            <div class="editor-label">
                                <label for="trNetCost">Net Cost</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextBox("NetCost", null, new { @placeholder = "Net Cost", @class = " trNetCost priceLen right form-control", @readonly = "readonly" })
                            </div>
                        </div>

                        <div class="form-group col-md-6 ">
                            <div class="editor-label">
                                <label>Issue</label>
                            </div>
                            <div class="editor-field chkDesign" style="margin-bottom:14px;">
                                <input type="hidden" value="True" id="trIssue" class=" chkValue" />
                                <input id="input-1" type="checkbox">
                            </div>

                        </div>
                        @Html.Hidden("trPInvoiceNo")
                        <div class="form-group trkNPLDiv col-md-6">
                            <button type="button" class="sym-btn-add-row addItemRow" style="padding-top: 6px; padding-bottom: 6px;">Add</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-3 trkNPLDiv">
                <div class="thinbox animated zoomIn faster">
                    <div class="th_thinbox trkformDesign">
                        <p>Overhead & Value addition cost</p>
                    </div>
                    <div class="row trkformDesign">
                        <div class="form-group">
                            <label for="trOverheadId" class="control-label">Overhead Name</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    @Html.SimpleDropDown("OverheadId", "/Config/DropDown/GetProductByType?type=Overhead", new { @class = " trOverheadId  form-control  selectDropdown" })
                                </div>
                            </div>
                        </div>
                        <div class="orm-group col-md-6 trkNPLDiv">
                            <label for="trOverheadCost" class="control-label">Cost</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    @Html.TextBox("OverheadCost", "0", new { @class = " trOverheadCost priceLen right  form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="orm-group col-md-6 trkNPLDiv trkNRLDiv">
                            <label for="trOverheadCode" class="control-label">Code</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    @Html.TextBox("OverheadCode", null, new { @placeholder = "Overhead Code", @class = " trOverheadCode form-control", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="orm-group col-md-6 trkNPLDiv">
                            <label for="trOverheadRebate" class="control-label">Rebate(%)</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    @Html.TextBox("OverheadRebate", "0", new { @placeholder = "Rebate", @class = " trOverheadRebate priceLen right form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="orm-group col-md-6 trkNPLDiv trkNRLDiv">
                            <label for="trOverheadNonRebate" class="control-label">Non-Rebate(%)</label>
                            <div class="form-group">
                                <div class="editor-field">
                                    @Html.TextBox("OverheadNonRebate", "0", new { @placeholder = "Non-Rebate", @class = " trOverheadNonRebate priceLen right form-control", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group trkNPLDiv trkNPRDiv col-md-6">
                            <button class="sym-btn-add-row trAddOverhead" type="button">Add</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-9 trkNPLDiv">
                <div class="thinbox animated zoomIn faster" style="margin-top: -10px; padding: 0px">
                    <div class="fixedParent">
                        @if (Model.Items != null)
                        {
                            <table class="trkFixTable" id="itemTable">
                                <thead>
                                    <tr>
                                        <th>Action</th>
                                        <th>Name</th>
                                        <th>Code</th>
                                        <th>UOM</th>
                                        <th>UnitCost</th>
                                        <th>UseQty</th>
                                        <th>WastageQty</th>
                                        <th>TotalQty</th>
                                        <th>Rebate %</th>
                                        <th>SubTotal</th>
                                        <th>Convt. Factor</th>
                                        <th>Base UOM</th>
                                        <th>Base Price</th>
                                        <th>Base U Qty</th>
                                        <th>Base W Qty</th>
                                        <th>InputType</th>
                                        <th>PBOMId</th>
                                        <th>Invoice No</th>
                                        <th>Cost Price</th>
                                        <th>IssueOnProduction</th>
                                    </tr>
                                </thead>

                                <tbody id="itemRows">
                                    @foreach (var item in Model.Items)
                                    {
                                        Html.RenderPartial("_items", item);
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-3 trkNPLDiv">
                <div class="thinbox animated zoomIn faster" style="margin-top: -10px; padding: 0px">
                    <div class="fixedParent">
                        @if (Model.Overheads != null)
                        {
                            <table class="trkFixTable" id="overHeadTable">
                                <thead>
                                    <tr>
                                        <th>Action</th>
                                        <th>HeadName</th>
                                        <th>HeadAmount</th>
                                        <th>Cost</th>
                                        <th>Percent</th>
                                        <th>OHCode</th>
                                        <th>HeadID</th>
                                    </tr>
                                </thead>
                                <tbody id="itemOverheads">
                                    @foreach (var item in Model.Overheads)
                                    {
                                        Html.RenderPartial("_overheads", item);
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-9 trkNPLDiv">
                <div class="thinbox animated zoomIn faster" style="margin-top: -10px;">
                    <div class="row trkformDesign">
                        <div class="form-group trkNPLDiv col-md-4">
                            <div class="editor-label">
                                <label for="Comments">Remarks</label>
                            </div>
                            <div class="editor-field">
                                @Html.TextAreaFor(m => m.Comments, new { @placeholder = "Comments", @class = " trComments form-control" })
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="form-group trkNPLDiv col-md-3">
                                @*<div class="editor-label">
                                        <label for="TradingMarkup">Trading MarkUp</label>
                                    </div>*@
                                <div class="editor-field">
                                    @Html.HiddenFor(m => m.TradingMarkup, new { @class = " trTradingMarkUp right form-control", @readonly = "readoony" })
                                </div>
                                <div class="editor-label">
                                    <label for="SDRate">SD(%)</label>
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(m => m.SDRate, new { @class = " trSD right form-control", @readonly = "readoony" })
                                </div>
                                <div class="editor-label">
                                    <label for="VATRate">VAT(%)</label>
                                </div>
                                <div class="editor-field">
                                    @Html.TextBoxFor(m => m.VATRate, new { @class = " trVatRate right form-control", @readonly = "readoony" })
                                </div>
                            </div>
                            <div class="form-group trkNPLDiv col-md-9">
                                <div>
                                    <div class="trkNPLDiv col-md-8">
                                        <div class="editor-label">
                                            <label>&nbsp;</label>
                                        </div>
                                        <div class="editor-field">
                                            <label for="TotalA" style="text-align: right; margin: 5px 5px 0px 0px;">Total Consumption with Overhead(A)</label>
                                        </div>
                                    </div>
                                    <div class="trkNPLDiv col-md-4">
                                        <div class="editor-label">
                                            <label>&nbsp;</label>
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBox("TotalA", "0", new { @class = " trTotalA right form-control", @readonly = "readonly" })
                                        </div>
                                    </div>
                                </div>

                                <div>
                                    <div class="trkNPLDiv col-md-6">
                                        <div class="editor-label">
                                            <label for="SalePrice">Sale Price</label>
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBox("SalePrice", "0", new { @class = " trSalePrice right form-control" })
                                        </div>
                                    </div>
                                    <div class="trkNPLDiv col-md-6">
                                        <div class="editor-label">
                                            <label for="WholeSalePrice" style="color: red;">A+B+C</label>
                                        </div>
                                        <div class="editor-field">
                                            @Html.TextBox("ABC", "0", new { @class = " trABC right form-control", @readonly = "readonly" })
                                        </div>
                                    </div>
                                </div>

                                <div>
                                    <div class="trkNPLDiv col-md-6">
                                        @*<div class="editor-label">
                                                <label for="PPacketPrice">Packet Price</label>
                                            </div>*@
                                        <div class="editor-field">
                                            @Html.HiddenFor(m => m.PPacketPrice, new { @class = " trPacketPrice right form-control" })
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 trkNPLDiv">
                <div class="thinbox animated zoomIn faster" style="margin-top: -10px;">
                    <div class="editor-label">
                        <label for="TotalB" style="margin-bottom: 0px; margin-top: 5px;">Total Value Addition(B)</label>
                    </div>
                    <div class="editor-field">
                        @Html.TextBox("TotalB", "0", new { @class = " trTotalB right form-control", @readonly = "readonly" })
                    </div>
                    <div class="editor-label">
                        <label for="Profit" style="margin-bottom: 0px; margin-top: 5px;">Profit(C)</label>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(m => m.Margin, new { @class = " trProfit right form-control" })
                    </div>
                    <div class="editor-label">
                        <label for="WholeSalePrice" style="margin-bottom: 0px; margin-top: 5px;">Whole Sale Price</label>
                    </div>
                    <div class="editor-field">
                        @Html.TextBoxFor(m => m.WholeSalePrice, new { @class = " trWholeSale right form-control", @readonly = "readonly" })
                    </div>
                </div>
            </div>
        </div>

        <div id="Excel" class="tab-pane fade  in ">
@using (Ajax.BeginForm("SubmittedBOMImport", "Vat1", null, new AjaxOptions { }, new { enctype = "multipart/form-data", @Id = "frmSubmittedBOMImport" }))
{ }
            <div class="thinbox row">
                <div class="th_thinbox">
                    <p>Submitted VAT 4.3 PDF Upload</p>
                </div>
                @using (Ajax.BeginForm("SubmittedBOMImport", "Vat1", null, new AjaxOptions { }, new { enctype = "multipart/form-data", @Id = "frmSubmittedBOMImport" }))
{
    <input type="hidden" id="saleTransactionType" name="Operation" value="Submitted" />
                    @Html.HiddenFor(model => model.BOMId, new { @class = " cBOMId" })
                    @Html.HiddenFor(model => model.Post)
                    @Html.HiddenFor(model => model.EffectDate, new { @class = " trMasterEffectDate customDatePicker defaultDate form-control" })
                    
                    <div class="col-md-offset-6 col-md-6 verticalLine">
                        <div class="col-md-6">
                            <label>File</label>@*onclick="pageSubmit('frmSaleImport');"*@
                            @Html.TextBoxFor(model => model.File, new { @type = "file", @accept = ".pdf", @class = " form-control", id = "excelFileBom" })
                        </div>

                        <div class="col-md-6">
                            <label>&nbsp;</label>
                            <button type="button" onclick="SubmittedBOMSubmit();" class="sym-btn-file-upload">&nbsp;Upload</button>

                        </div>
                    </div>
                }
            </div>

            <div class="thinbox row">
                <div class="th_thinbox">
                    <p>Approved VAT 4.3 PDF Upload</p>
                </div>
                @using (Ajax.BeginForm("ApprovedBOMImport", "Vat1", null, new AjaxOptions { }, new { enctype = "multipart/form-data", @Id = "frmApprovedBOMImport" }))
                {
                    <input type="hidden" id="saleTransactionType" name="Operation" value="Approved" />
                    @Html.HiddenFor(model => model.BOMId, new { @class = " cBOMId" })
                    @Html.HiddenFor(model => model.Post)
                    @Html.HiddenFor(model => model.EffectDate, new { @class = " trMasterEffectDate customDatePicker defaultDate form-control" })

                    <div class="col-md-offset-6 col-md-6 verticalLine">
                        <div class="col-md-6">
                            <label>File</label>@*onclick="pageSubmit('frmSaleImport');"*@
                            @Html.TextBoxFor(model => model.File, new { @type = "file", @accept = ".pdf", @class = " form-control", id = "excelFile" })
                        </div>

                        <div class="col-md-6">
                            <label>&nbsp;</label>
                            <button type="button" onclick="ApprovedBOMSubmit();" class="sym-btn-file-upload">&nbsp;Upload</button>

                        </div>
                    </div>
                }
            </div>


        </div>
        <div id="Excel" class="tab-pane fade  in ">

            <div class="thinbox row">
                <div class="th_thinbox">
                    <p>Approved VAT 4.3 PDF Upload</p>
                </div>
                @using (Ajax.BeginForm("ApprovedBOMImport", "Vat1", null, new AjaxOptions { }, new { enctype = "multipart/form-data", @Id = "frmApprovedBOMImport" }))
                {
                    <input type="hidden" id="saleTransactionType" name="Operation" value="Approved" />
                    @Html.HiddenFor(model => model.BOMId, new { @class = " cBOMId" })
                    @Html.HiddenFor(model => model.Post)
                    @Html.HiddenFor(model => model.EffectDate, new { @class = " trMasterEffectDate customDatePicker defaultDate form-control" })

                    <div class="col-md-offset-6 col-md-6 verticalLine">
                        <div class="col-md-6">
                            <label>File</label>@*onclick="pageSubmit('frmSaleImport');"*@
                            @Html.TextBoxFor(model => model.File, new { @type = "file", @accept = ".pdf", @class = "excelFileInput form-control", id = "excelFiles" })
                        </div>

                        <div class="col-md-6">
                            <label>&nbsp;</label>
                            <button type="button" onclick="ApprovedBOMSubmit();" class="sym-btn-file-upload">&nbsp;Upload</button>

                        </div>
                    </div>
                }
            </div>

        </div>


    </div>
    <div class="headrow">
        @if (Model.Operation == "update")
        {
            <button type="button" title="Update Data" onclick="SaveData()" class="sym-btn-update">&nbsp;Update</button>
            <button type="button" title="" class="sym-btn-report trVat43Print">&nbsp;Print</button>

            @*<button type="button" title="" onclick="showModal()" class="sym-btn-report">&nbsp;VAT 16</button>*@
            if (Model.Post == "N")
            {
                <button type="button" title="Post Data" onclick="PostData(this)" class="sym-btn-post">&nbsp;Post</button>
            }

        }
        else if (Model.Operation == "add")
        {
            <button type="button" title="Save Data" onclick="SaveData()" class="sym-btn-save">&nbsp;Save</button>
        }
        <button type="button" title="Go To Index" data-url="/VMS/Vat1" onclick="GoTo(this)" class="sym-btn-detail">&nbsp;Index</button>
        <button type="button" title="Add New Petty Cash" data-url="/VMS/Vat1/Create" onclick="GoTo(this)" id="" class="sym-btn-add ">&nbsp;New</button>
    </div>
}

<div id="myModal" class="trkmodal"></div>
<div id="myHigherModal" class="HigherModal"></div>
@*<div id="productDetails" class="trkmodal">
        <div class="trkmodal-content">
        </div>
    </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


<script>

    var fileInput = document.getElementById('excelFile');
    fileInput.addEventListener('change', function () {
        debugger;
        var filePath = this.value;
        //var allowedExtensions = /(\.xls[xm]?|\.xlsm|\.csv|\.txt|\.sun|\.pdf)$/i; // Modified regex to include .pdf
        var allowedExtensions = /\.pdf$/i; // Modified regex to include .pdf

        if (filePath) {
            if (!allowedExtensions.test(filePath)) {
                ShowResult("Warning", "Please select files with allowed extensions: .pdf");
                this.value = '';
            }
        }
    });

    var fileInput = document.getElementById('excelFileBom');
    fileInput.addEventListener('change', function () {
        debugger;
        var filePath = this.value;
        //var allowedExtensions = /(\.xls[xm]?|\.xlsm|\.csv|\.txt|\.sun|\.pdf)$/i; // Modified regex to include .pdf
        var allowedExtensions = /\.pdf$/i; // Modified regex to include .pdf

        if (filePath) {
            if (!allowedExtensions.test(filePath)) {
                ShowResult("Warning", "Please select files with allowed extensions: .pdf");
                this.value = '';
            }
        }
    });

    var fileInput = document.getElementById('excelFiles');
    fileInput.addEventListener('change', function () {
        debugger;
        var filePath = this.value;
        //var allowedExtensions = /(\.xls[xm]?|\.xlsm|\.csv|\.txt|\.sun|\.pdf)$/i; // Modified regex to include .pdf
        var allowedExtensions = /\.pdf$/i; // Modified regex to include .pdf

        if (filePath) {
            if (!allowedExtensions.test(filePath)) {
                ShowResult("Warning", "Please select files with allowed extensions: .pdf");
                this.value = '';
            }
        }
    });

</script>

<script>
    function modalInit(url) {
        var modal = document.getElementById('myModal');
        $.ajax({
            url: url,
            cache: false,
            beforeSend: function () { $(".loading").show(); },
            complete: function () { $(".loading").fadeOut(200).hide("slow") },
            success: function (html) {
                modal.style.display = "block";
                $("#myModal").html(html);
            }
        });
    }

</script>



    <script>

        $('.trVat43Print').click(function () {

            var itemNo = $('.cItemNo').val();
            var invoiceDate = $('.trMasterEffectDate').val();

            var BOMId = $('.cBOMId').val();
            var vatName = $('.trMastervatName').val();
            var ItemName = $('.trMasterItemName').val();
           

            var url = "/Vms/NBRReport/PrintVAT1?itemNo=" + itemNo + "&invoiceDate=" + invoiceDate + "&BOMId=" + BOMId + "&vatName=" + vatName + "&ProductName=" + ItemName;
            modalInit(url);
         });

    </script>
    @*higher modal*@
    <script>
        function modalInitHigher(url) {
            var modal = document.getElementById('myHigherModal');
            $.ajax({
                url: url,
                cache: false,
                beforeSend: function () { $(".loading").show(); },
                complete: function () { $(".loading").fadeOut(200).hide("slow") },
                success: function (html) {
                    modal.style.display = "block";
                    $("#myHigherModal").html(html);
                }
            });
        }

        function callbackFromProductPurchase(purchaseNo) {
            usableProductNameDetails(purchaseNo);
            $('#trPInvoiceNo').val(purchaseNo);
        }
    </script>

    <script>
        ////setting finish item and group while editing
        $(function () {
            var operation = '@Model.Operation';
            if (operation == 'update') {
                var groupId = $('#FinishCategory').val();
                var code = $('#FinishItemCode').val();
                var interval1 = setInterval(function () {
                    if (document.querySelectorAll('.trMasterGroupId option').length > 0) {
                        $('.trMasterGroupId').select2("val", groupId);
                        settingFinishProducts();
                        clearInterval(interval1);
                    }
                }, 200);
                var interval2 = setInterval(function () {
                    if (document.querySelectorAll('.trMasteritemId option').length > 0) {
                        $('.trMasteritemId').select2("val", code);
                        clearInterval(interval2);
                    }
                }, 200);
            }
        });

        ////fixed header column table
        function fixedScrolltrkFixedTable(tableId, leftTotal) {
            $('#' + tableId + ' tbody').scroll(function (e) {
                var i;
                var j = 2;
                for (i = 1; i <= leftTotal; i++) {
                    $('#' + tableId + ' tbody td:nth-child(' + i + ')').css("z-index", "1");
                    $('#' + tableId + ' thead th:nth-child(' + i + ')').css("left", $("#" + tableId + " tbody").scrollLeft());

                    $('#' + tableId + ' tbody td:nth-child(' + j + ')').css("z-index", "1");
                    $('#' + tableId + ' tbody td:nth-child(' + j + ')').css("left", $("#" + tableId + " tbody").scrollLeft());
                    $('#' + tableId + ' tbody td:nth-child(' + j + ')').css("left", $("#" + tableId + " tbody").scrollLeft());
                    j++;
                }
                $('#' + tableId + ' thead').css("left", -$("#" + tableId + " tbody").scrollLeft());
                //$('#' + tableId + ' thead th:nth-child(2)').css("left", $("#" + tableId + " tbody").scrollLeft());

            });
        }
        function settingtrkFixedColumnWidth(tableId, widthArgs) {
            if (widthArgs == null) {
                return;
            }
            var i;
            var j = 2;
            for (i = 1; i <= widthArgs.length; i++) {
                $('#' + tableId + ' tr td:nth-child(' + j + ')').css("min-width", widthArgs[i - 1] + "px");
                $('#' + tableId + ' tr th:nth-child(' + i + ')').css("min-width", widthArgs[i - 1] + "px");
                j++;
            }
        }
        function fixLeftColumns(tableId, leftTotal) {
            var i;
            var j = 2;
            for (i = 1; i <= leftTotal; i++) {
                //fixed column header style
                $('#' + tableId + ' thead th:nth-child(' + i + ')').css("height", "30px");
                $('#' + tableId + ' thead th:nth-child(' + i + ')').css("position", "relative");
                $('#' + tableId + ' thead th:nth-child(' + i + ')').css("z-index", "2");
                //fixed column rows style
                $('#' + tableId + ' tbody tr td:nth-child(' + j + ')').css("height", "30px");
                $('#' + tableId + ' tbody tr td:nth-child(' + j + ')').css("position", "relative");
                j++;
            }
        }
        function settingWidth(tableId) {
            //var parentWidth = $('.fixedParent').width();
            var parentWidth = $('#' + tableId).closest('.fixedParent').width();
            $('#' + tableId + ' thead').width(parentWidth);
            $('#' + tableId + ' tbody').width(parentWidth);
        }
        function trkFixedTable(tableId, leftTotal, args) {
            settingWidth(tableId);
            fixLeftColumns(tableId, leftTotal);
            fixedScrolltrkFixedTable(tableId, leftTotal);
            settingtrkFixedColumnWidth(tableId, args);
        }
        function callingFixedTable() {
            var args1 = [100, 200, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 150, 100, 150];
            trkFixedTable("itemTable", 2, args1);
            var args2 = [80, 100];
            trkFixedTable("overHeadTable", 2, args2);
        }
        $(function () {
            callingFixedTable();
        })

        ////clicking add usable item button
        $('.addItemRow').click(function () {
            var finishItem = $('.trMasteritemId').val();
            if (finishItem == null || finishItem == "" || finishItem == 0) {
                ShowResult("Fail", "Select a finish item first");
                return;
            }
            var product = $('.trUsableItemId').val();
            if (product == "" || product == null) {
                ShowResult("Fail", "Select a item first");
                return;
            }
            var quantity = $('.trTotalQuantity').val();
            if (isNaN(quantity) || quantity == 0 || quantity == "") {
                ShowResult("Fail", "Quantity can't be zero");
                return;
            }
            var itemNo = $('.trProductCode').val();
            var count = 0;

            $('.dItemCode').each(function () {
                var existing = $(this).val();
                if (itemNo == existing) {
                    count++;
                }
            });
            if (count > 0) {
                ShowResult("Fail", "Item already exists!");
                return;
            }
            AddItem();
        });
        ////adding item row function
        function AddItem() {
            ////form fields
            var name = $('.trFinishItemName').val();
            var code = $('.trProductCode').val();
            var itemNo = $('#trUsableItemNo').val();
            var categoryId = $('#trUsableCategoryId').val();
            if (categoryId == null) {
            }
            var hsCode = $('.trHsCode').val();
            var uom = $('.trPackSize').val();
            var convFact = parseFloat($('#ConvFactor').val().replace(/\,/g, ''));
            var baseUom = $('.trUom').val();
            var basePrice = parseFloat($('.trCostPrice').val().replace(/\,/g, ''));
            var unitCost = parseFloat(basePrice * convFact);
            var totalQty = parseFloat($('.trTotalQuantity').val().replace(/\,/g, ''));
            var useQty = parseFloat($('.trUseQty').val().replace(/\,/g, ''));
            var wQty = parseFloat(totalQty - useQty);
            var rebate = 0;
            var subTotal = parseFloat($('.trNetCost').val().replace(/\,/g, ''));
            var baseUQty = parseFloat(useQty * convFact);
            ////var baseWQty = parseFloat(wQty * convFact); totalQty
            var baseWQty = parseFloat((totalQty - totalQty) * convFact);
            var issue = $('#trIssue').val();
            var issueOnProduction = "Y";
            var effectDate = $('.trMasterEffectDate').val();
            if (issue != "True") {
                issueOnProduction = "N";
            }
            var finishItemCode = $('.trMasteritemId').val();
            var purchaseNo = $('#trPInvoiceNo').val();
            ////the detail view Model
            var model = {
                RawItemName: name,
                RawItemCode: code,
                UOM: uom,
                UnitCost: unitCost,
                UseQuantity: useQty,
                WastageQuantity: wQty,
                TotalQuantity: totalQty,
                RebateRate: rebate,
                Cost: subTotal,
                UOMc: convFact,
                UOMn: baseUom,
                UOMPrice: basePrice,
                UOMUQty: baseUQty,
                UOMWQty: baseWQty,
                IssueOnProduction: issueOnProduction,
                RawItemNo: itemNo,
                CategoryId: categoryId,
                EffectDate: effectDate,
                PInvoiceNo: purchaseNo
            }
            ////calling blank item function
            $.ajax({
                data: model,
                url: "/Vms/Vat1/BlankItem",
                cache: false,
                success: function (html) {
                    $("#itemRows").append(html);
                    callingFixedTable();
                    SubTotal();


                    ////resetting fields
                    $('.trCostPrice').val("0");
                    $('.trTotalQuantity').val("0");
                    $('.trWastage').val("0");
                    $('.trNetCost').val("0");


                    ////$('.trUsableGroupId').select2("val", "0");
                    $('.trFinishItemName').val("");
                    $('.trProductCode').val("");
                    $('.trHsCode').val("");
                    $('.trUom').val("");
                    $('.trVatName').val("");
                    $('#trPInvoiceNo').val("");

                    settingUsableProducts();
                    calculateWastage();
                    //UomOptions();
                }
            });


        }
        ////clicking add overhead item button
        $('.trAddOverhead').click(function () {
            var code = $('.trOverheadCode').val();
            if (code == "" || code == null) {
                ShowResult("Fail", "Please select overhead first!");
                return;
            }

            var itemNo = code;
            var count = 0;

            $('.dItemCode').each(function () {
                var existing = $(this).val();
                if (itemNo == existing) {
                    count++;
                }
            });
            if (count > 0) {
                ShowResult("Fail", "Item already exists!");
                return;
            }
            AddOverhead();
        });
        function AddOverhead() {
            ////form fields
            var code = $('.trOverheadCode').val();

            var url = "/Vms/Vat1/GetOverheadDetails?productCode=" + code;
            $.getJSON(url, function (data) {
                var code = data.split('~')[0];
                var itemNo = data.split('~')[3];
                var name = data.split('~')[4];
                var uom = data.split('~')[5];

                var cost = $('.trOverheadCost').val();
                var rebate = $('.trOverheadRebate').val();
                ////the detail view Model
                var model = {
                    RawItemName: name,
                    RawItemCode: code,
                    UOM: uom,
                    UnitCost: cost * rebate / 100,
                    UseQuantity: 1,
                    WastageQuantity: 0,
                    TotalQuantity: 1,
                    RebateRate: rebate,
                    Cost: cost * rebate / 100,
                    UOMc: 1,
                    UOMn: uom,
                    UOMPrice: cost * rebate / 100,
                    UOMUQty: 1,
                    UOMWQty: 1,
                    IssueOnProduction: "N",
                    RawItemNo: itemNo,
                    RawItemType: "Overhead"
                }
                ////calling blank item function
                $.ajax({
                    data: model,
                    url: "/Vms/Vat1/BlankItem",
                    cache: false,
                    success: function (html) {
                        $("#itemRows").append(html);
                        callingFixedTable();
                        SubTotal();
                    }
                });
                ////adding overhead detail section
                var nonRebate = 100 - rebate;
                var overheadModel = {
                    HeadName: name,
                    HeadAmount: cost,
                    AdditionalCost: cost * nonRebate / 100,
                    RebatePercent: nonRebate,
                    OHCode: code,
                    HeadID: itemNo
                }
                ////calling blank overhead function
                $.ajax({
                    data: overheadModel,
                    url: "/Vms/Vat1/BlankOverhead",
                    cache: false,
                    success: function (html) {
                        $("#itemOverheads").append(html);
                        callingFixedTable();
                        SubTotal();
                    }
                });
                ////resetting fields
                $('.trOverheadId').select2("val", "");
                $('.trOverheadCode').val("");
                $('.trOverheadCost').val("");
                $('.trOverheadRebate').val("");
                $('.trOverheadNonRebate').val("");
            });


        }
        ////removing a row
        function RemoveItem(sender) {
            var type = $(sender).parents("tr:first").find("td .dRawItemType").val();
            if (type == "Overhead") {
                ShowResult("Fail", "Please delete Overhead items from Overhead Details");
                return;
            }
            Ask("Are you sure to Delete the item!", function () {
                $(sender).parents("tr:first").remove();
                SubTotal();
            });
        }
        ////removing overhead
        function RemoveOverhead(sender) {
            Ask("Are you sure to Delete the item!", function () {
                var name = $(sender).parents("tr:first").find("td .dHeadName").val();
                $(sender).parents("tr:first").remove();
                $('.dItemName').each(function () {
                    var existing = $(this).val();
                    if (name == existing) {
                        $(this).closest("tr").remove();
                    }
                });
                SubTotal();
            });
        }
        ////edit a row
        function EditItem(sender) {
            var type = $(sender).parents("tr:first").find("td .dRawItemType").val();
            if (type == "Overhead") {
                ShowResult("Fail", "Please edit Overhead items from Overhead Details");
                return;
            }
            ////setting the value
            var code = $(sender).closest('.tablerow').find('.dItemCode').val();
            var url = "/Vms/Vat1/GetProductDetails?productCode=" + code;
            $.getJSON(url, function (data) {
                var categoryId = data.CategoryID;

                $('.trUsableGroupId').select2("val", categoryId);
                settingUsableProducts();
                setTimeout(function () {
                    $('.trUsableItemId').select2("val", code);
                    usableProductNameDetails();
                }, 800)
                var quantity = $(sender).closest('.tablerow').find('.dTotalQuantity').val();
                $('.trTotalQuantity').val(quantity);
                $(sender).parents("tr:first").remove();
                SubTotal();
            });
        }
        ////edit overhead
        function EditOverhead(sender) {
            var name = $(sender).parents("tr:first").find("td .dHeadName").val();
            var code = $(sender).parents("tr:first").find("td .dOHCode").val();
            var cost = $(sender).parents("tr:first").find("td .dHeadAmount").val();
            var percent = $(sender).parents("tr:first").find("td .dRebatePercent").val();
            var rebate = 100 - percent;

            $('.dItemName').each(function () {
                var existing = $(this).val();
                if (name == existing) {
                    $(this).closest("tr").remove();
                    return;
                }
            });
            ////setting the value
            $('.trOverheadId').select2("val", code);

            $('.trOverheadCode').val(code);
            $('.trOverheadCost').val(cost);
            $('.trOverheadRebate').val(rebate);
            $('.trOverheadNonRebate').val(percent);
            $(sender).closest("tr").remove();
        }

        ////clicking on percent
        $('.wastagePercent').click(function () {
            setTimeout(function () {
                calculateWastage();
            }, 500);
        });
        ////On leave wastage
        $(".trWastage").blur(function () {
            calculateWastage();
        });
        ////on leave profit
        $('.trProfit').blur(function () {
            SubTotal();

        });
        ////on leave salePrice
        $('.trSalePrice').blur(function () {
            var abc = parseFloat($('.trABC').val());
            var salePrice = parseFloat($(this).val());
            var profit = salePrice - abc;
            $('.trProfit').val(profit);
            SubTotal();
        });
        ////Wastage calculating function
        function calculateWastage() {
            var status = $('#wastagePercent').val();
            var totalQuantity = parseFloat($('.trTotalQuantity').val().replace(/\,/g, ''));
            var wastageAmount = parseFloat($('.trWastage').val().replace(/\,/g, ''));
            if (isNaN(totalQuantity)) {
                totalQuantity = 0;
            }
            if (isNaN(wastageAmount)) {
                wastageAmount = 0;
            }

            var usedQuantity = 0;

            if (status == 'True') {
                usedQuantity = totalQuantity - (totalQuantity * wastageAmount / 100);
            }
            else {
                usedQuantity = totalQuantity - wastageAmount;
            }

            $('.trWastage').val(wastageAmount);
            $('.trUseQty').val(usedQuantity);
            calculateNetCost();

        }
        ////calculating net cost
        function calculateNetCost() {
            var uom = $('.trUom').val();
            var pack = $('.trPackSize').val();
            var conFact = 1;
            if (uom != pack) {
                var interval = setInterval(function () {
                    conFact = $('#ConvFactor').val();
                    if (conFact != "1") {
                        setNetCost(conFact);

                        clearInterval(interval);
                    }
                }, 200);
            }
            else {
                setNetCost(conFact);
            }
        }

        function setNetCost(conFact) {
            if (isNaN(conFact) || conFact == "" || conFact == null) {
                conFact = 1;
            }
            var costPrice = parseFloat($('.trCostPrice').val().replace(/\,/g, ''));
            if (isNaN(costPrice)) {
                costPrice = 0;
            }
            ////var usedQuantity = parseFloat($('.trUseQty').val().replace(/\,/g, ''));
            var totalQuantity = parseFloat($('.trTotalQuantity').val().replace(/\,/g, ''));


            if (isNaN(totalQuantity)) {
                totalQuantity = 0;
            }
            var netCost = conFact * costPrice * totalQuantity;
            $('.trNetCost').val(netCost);
        }


        ////changing Qty
        $(".trCostPrice").blur(function () {

            calculateWastage();
        });
        ///changing cost price
        $(".trTotalQuantity").blur(function () {
            calculateWastage();
        });
        $(function () {
            valiDation("frmVat1");
            MyCheckBox("True", 'input-1');
            MyCheckBox("True", 'input-2');
            $('.customDatePicker').prop("readonly", false);
            ////navigation mode
            var operation = '@Model.Operation';

            ////showing subtotal value
            SubTotal();
            ////for counting discount amount based on % symbol
            MyToggleBox('wastagePercent');
            ////changing usable item group
            $('.trUsableGroupId').change(function () {
                settingUsableProducts();
            });
            ////changing finish item group
            $('.trMasterGroupId').change(function () {
                settingFinishProducts();
            });
            ////changing usable item
            $('.trUsableItemId').change(function () {
                var lifo = $('#trLifo').val();
                if (lifo == "False") {
                    var pCode = $(this).val();
                    var url = "/Vms/Vat1/GetProductPurchasePopUp?ProductCode=" + pCode;
                    modalInitHigher(url);
                    return;
                }
                usableProductNameDetails();
                //var interval = setInterval(function () {it was move to usableProductNameDetails method
                //    if ($('.trUom').val() != "") {
                //        UomOptions();
                //        GetConvFactor();
                //        clearInterval(interval);
                //    }
                //}, 200);
            });
            ////changing master item
            $('.trMasteritemId').change(function () {
                finishProductNameDetails();
            });
            ////changing overhead
            $('.trOverheadId').change(function () {
                overheadDetails();
            });

        });

        ////setting list for usable product settingFinishProducts
        function settingUsableProducts() {
            $('.trUsableItemId').select2("val", "");
            var value = $('.trUsableGroupId').val();
            var productNames = "";

            var url = "/Config/DropDown/DropDownProductByCategory/?id=" + value;
            productNames += "<option value=0>Select</option>";
            $.getJSON(url, function (data) {
                $.each(data, function (i, state) {
                    productNames += "<option value='" + state.Value + "'>" + state.Text + "</option>";
                });

                $('.trUsableItemId').html(productNames);
            });
            //usableProductNameDetails();
        }
        ////setting list for finish product
        function settingFinishProducts() {
            $('.trMasteritemId').select2("val", "");
            var value = $('.trMasterGroupId').val().toString();
            var productNames = "";

            var url = "/Config/DropDown/DropDownProductByCategory/?id=" + value;
            productNames += "<option value=0>Select</option>";
            $.getJSON(url, function (data) {
                $.each(data, function (i, state) {
                    productNames += "<option value='" + state.Value + "'>" + state.Text + "</option>";
                });

                $('.trMasteritemId').html(productNames);
            });
        }
        ////getting usable product details
        function usableProductNameDetails(purchaseNo) {
            var code = $('.trUsableItemId').val();
            if (code == 0 || code == null) {
                $('.trFinishItemName').val("");
                $('.trProductCode').val("");
                $('.trHsCode').val("");
                $('.trUom').val("");
                $('.trCostPrice').val("0");
                calculateWastage();
                return;
            }
            if (purchaseNo == null) {
                purchaseNo = "";
            }
            var effectDate = $('.trMasterEffectDate').val();
            var url = "/Vms/Vat1/GetProductDetails?productCode=" + code + "&purchaseNo=" + purchaseNo + "&effectDate=" + effectDate;

            $.ajax({
                url: url,
                cache: false,
                success: function (data) {
                    if (data.retResult != null && data.retResult.length > 0) {
                        ShowResult(data.retResult[0], data.retResult[1]);
                        //return;
                    }

                    $('.trFinishItemName').val(data.ProductName);
                    $('.trProductCode').val(data.ProductCode);
                    $('.trHsCode').val(data.HSCodeNo);
                    $('.trUom').val(data.UOM);
                    $('.trCostPrice').val(data.CostPrice);
                    $('#trUsableItemNo').val(data.ItemNo);
                    $('#trUsableCategoryId').val(data.CategoryID);

                    var html = "<option value=" + data.UOM + ">" + data.UOM + "</option>";
                    $('#PackSize').html(html);
                    UomOptions();
                    GetConvFactor();
                    calculateWastage();
                }
            });
        }

        ////getting finish product details
        function finishProductNameDetails() {
            var code = $('.trMasteritemId').val();
            if (code == 0 || code == null) {
                $('.trMasterItemName').val("");
                $('.trMasterProductCode').val("");
                $('.trMasterHsCode').val("");
                $('.trMasterUom').val("");
                ////$('.trMastervatName').val("VAT 1");

                return;
            }
            var url = "/Vms/Vat1/GetProductDetails?productCode=" + code;
            $.getJSON(url, function (data) {
                $('.trMasterItemName').val(data.ProductName);
                $('.trMasterProductCode').val(data.ProductCode);
                $('.trMasterHsCode').val(data.HSCodeNo);
                $('.trMasterUom').val(data.UOM);
                ////$('.trMastervatName').val("VAT 1");
                $('.trSD').val(data.SD);
                $('.trTradingMarkUp').val(data.TradingMarkUp);
                $('.trVatRate').val(data.VATRate);
                $('#ItemNo').val(data.ItemNo);
            });
        }

        ////getting overhead details
        function overheadDetails() {
            var code = $('.trOverheadId').val();
            if (code == 0 || code == null || code == "") {
                $('.trOverheadCost').val("");
                $('.trOverheadCode').val("");
                $('.trOverheadRebate').val("");
                $('.trOverheadNonRebate').val("");
                return;
            }
            var url = "/Vms/Vat1/GetOverheadDetails?productCode=" + code;
            $.getJSON(url, function (data) {
                var code = data.split('~')[0];
                var rebatePercent = data.split('~')[1];
                var cost = data.split('~')[2];
                if (isNaN(rebatePercent) || rebatePercent == null) {
                    rebatePercent = 0;
                }
                if (isNaN(cost) || cost == null) {
                    cost = 0;
                }
                var nonRebate = 100 - rebatePercent;
                $('.trOverheadCost').val(cost);
                $('.trOverheadCode').val(code);
                $('.trOverheadRebate').val(rebatePercent);
                $('.trOverheadNonRebate').val(nonRebate);
            });
        }
        ////changing uom to/packet size
        $('.trPackSize').change(function () {
            GetConvFactor();
            calculateNetCost();
        });
        ////changing rebate percent
        $('.trOverheadRebate').blur(function () {
            changeRebatePercent();
        });
        ////changing rebate percent function
        function changeRebatePercent() {
            var rebate = $('.trOverheadRebate').val();
            if (isNaN(rebate) || rebate == "") {
                rebate = 0;
            }
            var nonRebate = 100 - rebate;
            $('.trOverheadNonRebate').val(nonRebate);
        }
        ////uom conversion method
        function GetConvFactor() {
            var uomFrom = $('.trUom').val();
            var uomTo = $('.trPackSize').val();
            if (uomFrom == uomTo) {
                $('#ConvFactor').val(1);
                return;
            }
            var actionUrl = "/Vms/Vat1/GetConvFactor?uomFrom=" + uomFrom + "&UomTo=" + uomTo;
            $.getJSON(actionUrl, function (data) {
                var uomConv = parseFloat(data);
                $('#ConvFactor').val(uomConv);
            });

        }

        ////uom option method
        function UomOptions() {
            var uom = $('.trUom').val();
            var url = "/Vms/Vat1/GetUomOption?uomFrom=" + uom;
            $.ajax({
                url: url,
                cache: false,
                success: function (html) {
                    $('#PackSize').append(html);
                }
            });
        }

        ////subtotal calculating method
        function SubTotal() {
            var TotalA = 0;
            $('.dSubTotal').each(function () {
                var amountA = parseFloat($(this).val());
                TotalA += amountA;
            });
            $('.trTotalA').val(TotalA);

            var TotalB = 0;
            $('.dAdditionalCost').each(function () {
                var amountB = parseFloat($(this).val());
                TotalB += amountB;
            });
            $('.trTotalB').val(TotalB);
            var profitC = parseFloat($('.trProfit').val());
            var abc = TotalA + TotalB + profitC;
            $('.trABC').val(abc);
            $('.trSalePrice').val("0");
            var tradingMarkUp = parseFloat($('.trTradingMarkUp').val());
            var tradingTotal = abc + abc * tradingMarkUp / 100;

            var sdRate = parseFloat($('.trSD').val());
            var sdAmount = tradingTotal * sdRate / 100;
            var sdTotal = tradingTotal + sdAmount;
            var vatRate = parseFloat($('.trVatRate').val());
            var vatAmount = sdTotal * vatRate / 100;
            var vatTotal = sdTotal + vatAmount;
            //alert(vatAmount);
            //$('#SDAmount').val(vatAmount);
            //$('#VatAmount').val(vatAmount);

            $('.trWholeSale').val("0");
        }
        //update validation
        function checkUpdateValidation() {
            var post = '@Model.Post';
            if (post.toLocaleLowerCase() == "y") {
                ShowResult("Fail", "Already posted");
                return false
            }
            var vatname = $('.trMastervatName').val();
            var totalA = parseFloat($('.trTotalA').val());
            if (vatname != "VAT 1 (Wastage)" && totalA <= 0) {
                ShowResult("Fail", "Price not issued");
                return false
            }

            return true;
        }
        ////form posting method
        function SaveData() {
            var itemCount = $('.dItemName').length;
            if (itemCount == 0) {
                ShowResult("Fail", "There is no data in item grid");
                return;
            }
            var vatname = $('.trMastervatName').val();
            var overheadCount = $('.dHeadName').length;
            if (vatname == "VAT 1" && overheadCount == 0) {
                ShowResult("Fail", "There is no data in overhead grid");
                return;
            }
            var masterCode = $('#MasterCode').val();
            //alert(masterCode);
            if (masterCode == null || masterCode == "" || masterCode == "0") {
                ShowResult("Fail", "Master product is not selected");
                return;
            }
            var operation = '@Model.Operation';
            if (operation.toLocaleLowerCase() == "update") {
                var isValid = checkUpdateValidation();
                if (isValid == false) {
                    return;
                }
            }
            var comment = $('.trComments').val();
            if (comment == "") {
                $('.trComments').val("-");
            }
            pageSubmit('frmVat1');
        }

        ////posting method
        function PostData(sender) {
            var Id = $("#BOMId").val();
            var Post = $("#Post").val();
            if (Post.toLowerCase() == 'true' || Post.toLowerCase() == 'y') {
                ShowResult("Fail", "Data Already Posted!");
                return;
            }
            var url = '/Vms/Vat1/Post?ids=' + Id + '~';
            var questionMSG = "Are you sure to Post Data!";
            singlePostDlete(questionMSG, url);
        }

        function SubmittedBOMSubmit() {
            var bomId = $(".cBOMId").val();

            if (!bomId) {
                ShowResult("Fail", "Please Select Product First!");
                return;
            }

            console.log("Before form submission");
            $("#frmSubmittedBOMImport").submit();
            console.log("After form submission");
        }

        function ApprovedBOMSubmit() {
            var bomId = $(".cBOMId").val();

            if (!bomId) {
                ShowResult("Fail", "Please Select Product First!");
                return;
            }

            $("#frmApprovedBOMImport").submit();
        }

    </script>
}