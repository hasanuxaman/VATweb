using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using SymphonySofttech.Utilities;
using SymViewModel.VMS;
using SymOrdinary;

namespace SymServices.VMS
{

    public class ReportDSDAL
    {


        #region Global Variables

        private DBSQLConnection _dbsqlConnection = new DBSQLConnection();

        #endregion

        public string[] reportType = new string[]
                                         {
                                             "Detail", //0
                                             "Summery", //1
                                             "Single", //2
                                             "Monthly" //3
                                         };

        public IList<string> ReportTypeList
        {
            get
            {
                return reportType.ToList<string>();

            }
        }

        public DataTable MIS19(string StartDate, string EndDate)
        {

            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";

            DataTable dataSet = new DataTable("VAT11Report");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;
                #region StartSQL
                sqlText = @"
declare @DateFrom [datetime];
declare @DateTo [datetime];
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);
DECLARE @ProcessTime varchar(50)
";
                sqlText += @" set @DateFrom='" + StartDate + "'";
                sqlText += @"  set @DateTo='" + EndDate + "' ";

                sqlText += @"

set @ProcessTime='01012016'
delete from mis19
insert into mis19(ProcessTime) select  @ProcessTime

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]

----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','4','Sale Trading(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','5','Tender Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','6','Tender Trading Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','7','Sale Debit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','9','Transfer Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','10','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','11','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('PackageSale')

--------------------

-------1 end-------
-------------- 2 --------- start
 
		
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','1','Export in USD(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','2','Export in USD(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','4','Export in USD(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','5','Export in USD(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','6','Export in USD(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SubTotal * SID.SD/100),0),
isnull(sum(SubTotal* SID.VATRate),0),'2','6','Export in USD(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')

 
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM SalesInvoiceDetails sid
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','4','Sale Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','5','Sale Tender Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','6','Tender Local(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','7','Sale Debit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','9','Transfer Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','Toll Finish Issue Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','ServiceStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceStock')

-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')
-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')
 
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')
 
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT       isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT       isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)

 ----Add by Ruba for Calculating ATVAmount
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(ATVAmount),0),0,
0,'12','4','ATV Amount'
FROM PurchaseInvoiceDetails 
where post='Y'
 and ReceiveDate>= @Datefrom and  ReceiveDate <dateadd(d,1,@Dateto)

------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Treasury-Opening)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','0','Reverse Deposit & VDS (Treasury-Opening-Credit)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

----Add by Ruba for calculating ATVAmount
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.ATVAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport','InputServiceImport')
------

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom 
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue','Wastage')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  SalesInvoiceDetails SID
where  SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','1','Total VDS for supplier')
-------19 End----

------------ Previous Purchase ----------------

---- 71 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'71','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'71','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 
 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'71','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate < @Datefrom  
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'71','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate< @Datefrom  
AND PIH.TransactionType IN('VAT27')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'71','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'71','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-VAT' 

AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'81','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'81','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'81','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')
 
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'81','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'81','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')
 
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'81','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate < @Datefrom  
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'81','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate< @Datefrom    
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'101','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'101','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom and  Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'101','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'101','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'101','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'101','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'101','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and  Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'101','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate< @Datefrom and   Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')
 ----------- Previous Purchase------------

UPDATE mis19 SET  One='NA', Two='NA' , Three=0 


UPDATE mis19 SET  FourA =  isnull(FourA.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(16) and SubLineNumber in(1) ) AS FourA

UPDATE mis19 SET  FourB =  isnull(FourB.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(16) and SubLineNumber in(2,3) ) AS FourB

UPDATE mis19 SET  FourC =  isnull(FourC.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(16) and SubLineNumber in(4) ) AS FourC

UPDATE mis19 SET  FourD=FourA+FourB+FourC 
UPDATE mis19 SET  Five=0,Six=0 


UPDATE mis19 SET  SevenA =  isnull(SevenA.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(1,2,3)  ) AS SevenA

UPDATE mis19 SET  SevenB =  isnull(SevenB.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(5)  ) AS SevenB

UPDATE mis19 SET  SevenC =  isnull(SevenC.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(1,2,3)   ) AS SevenC
UPDATE mis19 SET  SevenD=SevenA+SevenB+SevenC 

UPDATE mis19 SET  EightA =  isnull(EightA.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(13)   and SubLineNumber not in(13,14,15,16,17)    ) AS EightA

UPDATE mis19 SET  EightB =  isnull(EightB.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(13)   and SubLineNumber in(13,14,15,16,17)   ) AS EightB

UPDATE mis19 SET  EightD = EightB+  isnull(EightD.A,0)
 FROM (

 select isnull(SUM(dd.A),0) A from(
SELECT -isnull(SUM(B),0) A FROM  #VAT19BreakDown
WHERE LineNumber in(1)   
union all
SELECT isnull(SUM(A),0) A FROM  #VAT19BreakDown
WHERE LineNumber in(16)     and SubLineNumber in(4)  
  ) as dd

) AS EightD



UPDATE mis19 SET  EightC =    isnull(EightC.A,0)-isnull(EightD,0)
 FROM (
 SELECT isnull(SUM(A),0) A FROM  #VAT19BreakDown
WHERE LineNumber in(17)    
) AS EightC

--UPDATE mis19 SET  EightB =  isnull(EightB.A,0)
 --FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
--WHERE LineNumber in(17)   ) AS EightB



--UPDATE mis19 SET  EightC=0, EightD=0 

UPDATE mis19 SET  Nine =  isnull(Nine.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(71,81,91,101)   ) AS Nine

UPDATE mis19 SET  Ten =  isnull(Ten.A,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(7,8,9,10)   ) AS Ten

UPDATE mis19 SET  Eleven=Nine+Ten


 UPDATE mis19 SET  Twelve =  isnull(Twelve.B,0)
 FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(7,8,9,10)   ) AS Twelve

UPDATE mis19 SET  Thirteen =  isnull(Thirteen.SubTotal,0)
 FROM (
select   sum(SubTotal)SubTotal from(
select  p.ItemNo,OpeningBalance Quantity, p.OpeningTotalCost SubTotal   from  Products p
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
and p.OpeningDate <@Datefrom 
union all
select distinct rd.ItemNo,sum(isnull(rd.Quantity,0))Quantity,sum(isnull(rd.SubTotal,0))SubTotal  from ReceiveDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
  and rd.ReceiveDateTime <@Datefrom 
group by rd.ItemNo
) as a
)  as Thirteen

UPDATE mis19 SET  Fourteen =  isnull(Fourteen.SubTotal,0)
 FROM (
select   sum(SubTotal)SubTotal from(
select    p.OpeningTotalCost SubTotal   from  Products p
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
and p.OpeningDate >= @Datefrom and OpeningDate <dateadd(d,1,@Dateto)
union all
select sum(isnull(rd.SubTotal,0))SubTotal  from ReceiveDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
  and rd.ReceiveDateTime >= @Datefrom and ReceiveDateTime <dateadd(d,1,@Dateto)
) as a
)  as Fourteen


 UPDATE mis19 SET  Fifteen =  isnull(Fifteen.SubTotal,0)
 FROM (
 select   sum(SubTotal)SubTotal from(
select  p.OpeningTotalCost SubTotal   from  Products p
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Raw','Pack' )
and p.OpeningDate <dateadd(d,1,@Dateto)
union all
select  sum(isnull(rd.SubTotal,0))SubTotal  from PurchaseInvoiceDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Raw','Pack' )
  and rd.InvoiceDateTime <dateadd(d,1,@Dateto)
union all
select  -sum(isnull(rd.SubTotal,0))SubTotal  from IssueDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Raw','Pack' )
  and rd.IssueDateTime <dateadd(d,1,@Dateto)
) as a
 )  as Fifteen
 
UPDATE mis19 SET  Sixteen =  isnull(Sixteen.SubTotal,0)
 FROM (
 select   sum(SubTotal)SubTotal from(
select  p.OpeningTotalCost SubTotal   from  Products p
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
and p.OpeningDate <dateadd(d,1,@Dateto)
union all
select  sum(isnull(rd.SubTotal,0))SubTotal  from ReceiveDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
  and rd.ReceiveDateTime <dateadd(d,1,@Dateto)
union all
select  -sum(isnull(rd.SubTotal,0))SubTotal  from SalesInvoiceDetails rd
left outer join Products p on rd.ItemNo=p.ItemNo
left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
where pc.IsRaw in('Finish','Trading','Export','Export')
  and rd.InvoiceDateTime <dateadd(d,1,@Dateto)
) as a
 )  as Sixteen

UPDATE mis19 SET  Seventeen =  isnull(Seventeen.A,0)
FROM (SELECT isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber in(2)   ) AS Seventeen
 

UPDATE mis19 SET  Eighteen='NA'


select * from mis19
 

 --SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown

 
";
                #endregion StartSQL

                SqlCommand objReport = new SqlCommand();
                objReport.Connection = currConn;
                objReport.CommandText = sqlText;
                objReport.CommandType = CommandType.Text;


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objReport);
                dataAdapter.Fill(dataSet);

                #endregion

            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT11ReportNew(string SalesInvoiceNo, string Trading, string Post1, string Post2)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;
                sqlText = @"SELECT    
                                SIH.SalesInvoiceNo SalesInvoiceNo, 
                                convert (varchar,SIH.InvoiceDateTime,120) InvoiceDate,
                                isnull(C.CustomerName,'N/A')CustomerName,
                                isnull(c.Address1,'N/A')Address1
                                ,isnull(C.CustomerName,'N/A')Address2
--,isnull(c.Address2,'N/A')Address2
,isnull(c.Address3,'N/A')Address3,
                                isnull(sih.DeliveryAddress1,'N/A')DeliveryAddress1
,isnull(sih.DeliveryAddress2,'N/A')DeliveryAddress2
,isnull(sih.DeliveryAddress3,'N/A')DeliveryAddress3,
                                isnull(v.VehicleType,'N/A')VehicleType,isnull(v.VehicleNo,'N/A')VehicleNo,
                                isnull(P.ProductName,'N/A')ProductName ,
                                isnull(PC.CategoryName,'N/A')ProductDescription ,
                                case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end ProductGroup,
                                isnull(SID.Quantity,SID.UOMQty)Quantity ,
                                isnull(SID.UOM,'N/A')UOM,
                                isnull(SID.NBRPrice,0)UnitCost,
                                isnull(SID.VATRate,0)VATRate,
                                isnull(SID.VATAmount,0)VATAmount,
                                isnull(SID.SD,0)SD,
                                isnull(SID.SDAmount,0)SDAmount,
                                isnull(c.VATRegistrationNo,'N/A')VATRegistrationNo,
                                
                                CASE WHEN @DbName='CPB_DB' THEN SIH.ImportIDExcel ELSE SIH.Comments END AS Comments,    

isnull(SID.Weight,'')Weight, 
convert (varchar(30),SIH.LCDate,105) LCDate,
Isnull(SIH.LCNumber,'-') LCNumber,
isnull(SIH.LCBank,'N/A')LCBank,
'-'SerialNo,

isnull(SIH.SaleType,'N/A')SaleType,
isnull(SIH.PreviousSalesInvoiceNo,'N/A')PreviousSalesInvoiceNo,
isnull(SIH.TransactionType,'N/A')TransactionType,
isnull(SIH.CurrencyID,0)CurrencyID,
isnull(SIH.CurrencyRateFromBDT,0)CurrencyRateFromBDT,
isnull(convert (varchar,SIH.DeliveryDate,120),convert (varchar,sih.InvoiceDateTime,120))DeliveryDate,                                


                                isnull(isnull(SID.Subtotal,0)+isnull(SID.VATAmount,0)+isnull(SID.SDAmount,0)+isnull(isnull(SID.Quantity,0)*isnull(SID.NBRPrice,0)*isnull(SID.TradingMarkUp,0)/100,0),0)Subtotal

                                FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                                dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                                dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                                dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                                dbo.ProductCategories AS Pc ON Pc.CategoryID = P.CategoryID left outer join
                                dbo.Vehicles as V on sih.VehicleID=v.VehicleID 

                                WHERE
                                (SIH.SalesInvoiceNo = @SalesInvoiceNo )
                                and (sih.Trading=@Trading)
                                AND (SIH.Post =@Post1 or SIH.Post= @Post2)
                                and (SID.Quantity>0)
                                order by InvoiceLineNo

                                SELECT DISTINCT uom, SUM(isnull(Quantity,UOMQty)) qty
--,InvoiceLineNo
                                 FROM  SalesInvoiceDetails 
                                WHERE (SalesInvoiceNo = @SalesInvoiceNo )
                                and (isnull(UOMQty, Quantity)>0)
                                GROUP BY uom
--,InvoiceLineNo
                                --order by uom
                                --order by InvoiceLineNo";

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }
                if (!objCommSaleReport.Parameters.Contains("@Trading"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Trading", Trading);
                }
                else
                {
                    objCommSaleReport.Parameters["@Trading"].Value = Trading;
                }
                if (!objCommSaleReport.Parameters.Contains("@Post1"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post2"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post2"].Value = Post2;
                }
                if (!objCommSaleReport.Parameters.Contains("@DbName"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@DbName", dbName);
                }
                else
                {
                    objCommSaleReport.Parameters["@DbName"].Value = dbName;
                }
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT11ReportCommercialImporterNew(string SalesInvoiceNo, string Post1, string Post2, SqlConnection VcurrConn = null, SqlTransaction Vtransaction = null)
        {

            #region Variables

            SqlConnection currConn = null;
            SqlTransaction transaction = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            try
            {
                #region open connection and transaction
                #region New open connection and transaction
                if (VcurrConn != null)
                {
                    currConn = VcurrConn;
                }
                if (Vtransaction != null)
                {
                    transaction = Vtransaction;
                }
                #endregion New open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }
                if (transaction == null)
                {
                    transaction = currConn.BeginTransaction("");
                }
                #endregion open connection and transaction

                #region sql statement

                string dbName = DatabaseInfoVM.DatabaseName;
                sqlText = @"

 --declare @SalesInvoiceNo as varchar(100)
--set @SalesInvoiceNo='STP-0001/0918'

declare @ATVRate as decimal(18,3)
declare @WareHouseRentPerQuantity as decimal(18,3)
select @WareHouseRentPerQuantity=SettingValue from Settings where SettingGroup='Sale' and SettingName='WareHouseRentPerQuantity'
select @ATVRate=SettingValue from Settings where SettingGroup='Sale' and SettingName='ATVRate'
  
SELECT    
SIH.SalesInvoiceNo SalesInvoiceNo, 

convert (varchar,SIH.InvoiceDateTime,120) InvoiceDate,
isnull(C.CustomerName,'N/A')CustomerName,
isnull(c.Address1,'N/A')Address1
,isnull(C.CustomerName,'N/A')Address2
,isnull(c.Address3,'N/A')Address3,
isnull(sih.DeliveryAddress1,'N/A')DeliveryAddress1
,isnull(sih.DeliveryAddress2,'N/A')DeliveryAddress2
,isnull(sih.DeliveryAddress3,'N/A')DeliveryAddress3,
isnull(v.VehicleType,'N/A')VehicleType,isnull(v.VehicleNo,'N/A')VehicleNo,
isnull(P.ProductCode,'N/A')+'~'+isnull(P.ProductName,'N/A') ProductName ,
isnull(PC.CategoryName,'N/A')ProductDescription ,
isnull(PC.CategoryName,'N/A')  ProductGroup,
isnull(SID.UOM,'N/A')UOM,
isnull(SID.VATRate,0)VATRate,
isnull(SID.SubTotal,0)SubTotal,
0 VATAmount,
isnull(SID.SD,0)SD,
0 SDAmount,
isnull(c.VATRegistrationNo,'N/A')VATRegistrationNo,
SIH.Comments  AS Comments , 
isnull(SID.Weight,'')Weight, 
convert (varchar(30),SIH.LCDate,105) LCDate,
Isnull(SIH.LCNumber,'-') LCNumber,
isnull(SIH.LCBank,'N/A')LCBank,
'-'SerialNo,
isnull(SIH.SaleType,'N/A')SaleType,
isnull(SIH.PreviousSalesInvoiceNo,'N/A')PreviousSalesInvoiceNo,
isnull(SIH.TransactionType,'N/A')TransactionType,
isnull(SIH.CurrencyID,0)CurrencyID,
isnull(SIH.CurrencyRateFromBDT,0)CurrencyRateFromBDT,
isnull(convert (varchar,SIH.DeliveryDate,120),convert (varchar,sih.InvoiceDateTime,120))DeliveryDate,                                
--, 0 Subtotal
isnull(@WareHouseRentPerQuantity,0) WareHouseRentPerQuantity
,isnull(@ATVRate,0) ATVRate
,isnull(PST.BENumber,'N/A')+'~'+CONVERT(varchar, isnull(PIH.InvoiceDateTime,'01/01/1900'),3) BENumber

,isnull(PST.CustomHouse,'N/A')CustomHouse
,isnull(SID.NBRPrice,0)UnitCost
,isnull(PST.Qty,0)Quantity 

FROM  (select distinct SalesInvoiceNo,PurchaseInvoiceNo,PurchaseInvoiceDateTime,ReceiveDate,BENumber,CustomHouse, itemNo,count(ItemNo)Qty from PurchaseSaleTrackings
where SalesInvoiceNo=@SalesInvoiceNo
group by SalesInvoiceNo,PurchaseInvoiceNo,PurchaseInvoiceDateTime,ReceiveDate,BENumber,CustomHouse,itemNo
) AS PST
LEFT OUTER JOIN dbo.SalesInvoiceDetails AS SID ON SID.SalesInvoiceNo = PST.SalesInvoiceNo and  SID.ItemNo=pst.ItemNo
LEFT OUTER JOIN dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo 
LEFT OUTER JOIN dbo.PurchaseInvoiceHeaders AS PIH ON PIH.PurchaseInvoiceNo = PST.PurchaseInvoiceNo 
LEFT OUTER JOIN
dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
dbo.ProductCategories AS Pc ON Pc.CategoryID = P.CategoryID left outer join
dbo.Vehicles as V on sih.VehicleID=v.VehicleID 

WHERE
(SIH.SalesInvoiceNo = @SalesInvoiceNo )
    AND (SIH.Post =@Post1 or SIH.Post= @Post2)

and (SID.Quantity>0)
order by ProductName,BENumber,CustomHouse
  
 ";

                SqlCommand objCommSaleReport = new SqlCommand(sqlText, currConn, transaction);

                //SqlCommand objCommSaleReport = new SqlCommand();
                //objCommSaleReport.Connection = currConn;
                //objCommSaleReport.CommandText = sqlText;
                //objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post1"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post2"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post2"].Value = Post2;
                }
                //if (!objCommSaleReport.Parameters.Contains("@DbName"))
                //{
                //    objCommSaleReport.Parameters.AddWithValue("@DbName", dbName);
                //}
                //else
                //{
                //    objCommSaleReport.Parameters["@DbName"].Value = dbName;
                //}
                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                if (Vtransaction == null && transaction != null)
                {
                    transaction.Commit();
                }

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (VcurrConn == null && currConn != null && currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet SaleTrackingReport(string SalesInvoiceNo)
        {
            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;


            DataSet dataSet = new DataSet("VAT11Report");

            #endregion
            #region Try
            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region Statement
                string sqlText = "";
                sqlText = @"
                        SELECT SID.SalesInvoiceNo SalesInvoiceNo, 
                        SID.ItemNo ItemNo,
                        T.Heading1 Heading1,
                        T.Heading2 Heading2
                        ,P.ProductName
                        From SalesInvoiceDetails AS SID Inner JOIN Trackings T ON T.SaleInvoiceNo = SID.SalesInvoiceNo
                        AND T.FinishItemNo=SID.ItemNo
                        Left outer join Products P ON P.ItemNo=SID.ItemNo
                        
                        where SID.SalesInvoiceNo = @SalesInvoiceNo
                        ";
                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion

            }

            #endregion
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        public DataSet VAT20ReportNew(string SalesInvoiceNo, string Trading)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT20Report");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"SELECT    
                                SIH.SalesInvoiceNo SalesInvoiceNo, 
                                convert (varchar(200),SIH.InvoiceDateTime,120)InvoiceDate,
                                isnull(C.CustomerName,'N/A')CustomerName,
                                isnull(c.Address1,'N/A')Address1,
                                isnull(c.Address2,'N/A')Address2,
                                isnull(c.Address3,'N/A')Address3,
                                isnull(c.City,'N/A')City,
                                isnull(sih.DeliveryAddress1,'N/A')DeliveryAddress1,
                                isnull(sih.DeliveryAddress2,'N/A')DeliveryAddress2,
                                isnull(sih.DeliveryAddress3,'N/A')DeliveryAddress3,
                                isnull(P.ProductName,'N/A')ProductName ,
                                isnull(P.HSCodeNo,'N/A')HSCodeNo ,
                                isnull(P.ProductDescription,'N/A')ProductDescription ,
                                isnull(SID.Quantity,0)Quantity ,
                                isnull(SID.UOM,'N/A')UOM,
                                isnull(SID.NBRPrice,0)UnitCost,
                                isnull(SID.VATRate,0)VATRate,
                                isnull(SID.VATAmount,0)VATAmount,
                                isnull(SID.SD,0)SD,
                                isnull(SID.SDAmount,0)SDAmount,
                                isnull(c.VATRegistrationNo,'N/A')VATRegistrationNo,
                                isnull(SIH.Comments,'N/A') Comments

                                FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                                dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                                dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                                dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                                dbo.Vehicles as V on sih.VehicleID=v.VehicleID 

                                WHERE
                                (SIH.SalesInvoiceNo = @SalesInvoiceNo )
                                and (sih.Trading=@Trading)
                                AND SIh.Post='Y'
                                and (SID.Quantity>0)

                                SELECT   
                                SalesInvoiceNo,  
                                SaleLineNo,
                                Description,
                                Quantity,
                                GrossWeight, NetWeight,
                                NumberFrom, NumberTo,
                                Comments
                                FROM SalesInvoiceHeadersExport
                                WHERE 
                                (SalesInvoiceNo = @SalesInvoiceNo)";

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }
                if (!objCommSaleReport.Parameters.Contains("@Trading"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Trading", Trading);
                }
                else
                {
                    objCommSaleReport.Parameters["@Trading"].Value = Trading;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet CreditNoteNew(string SalesInvoiceNo, string post1, string post2)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportCreditNote");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"select Credit.InvoiceLineNo ,Credit.salesInvoiceNo,
                                    convert (varchar,Credit.InvoiceDateTime,120)InvoiceDateTime,p.productName,
                                    (Credit.NBRPrice*Credit.Quantity)SubCost,Credit.SDAmount,Credit.VATAmount
                                    ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,CreditSum.SDAmount CSSDAmount,CreditSum.VATAmount CSVATAmount
                                    ,Credit.PrevioussalesInvoiceNo,CreditH.CustomerID,CreditH.VehicleID,
                                    convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
                                    ,credit.quantity,credit.uom

                                    ,CreditH.DeliveryAddress1,CreditH.DeliveryAddress2,CreditH.DeliveryAddress3,
                                    c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,CreditH.comments

                                    from SalesInvoiceDetails AS Credit left outer join
                                    SalesInvoiceHeaders CreditH on Credit.salesInvoiceNo=CreditH.salesInvoiceNo left outer join

                                    Customers C on CreditH.CustomerID=c.customerID left outer join
                                    Vehicles V on CreditH.VehicleID=v.VehicleID left outer join
                                    SalesInvoiceHeaders SIH on Credit.PrevioussalesInvoiceNo=sih.salesInvoiceNo
                                    left outer join
                                    (select distinct salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from SalesInvoiceDetails
                                    where salesInvoiceNo=(
                                    select distinct PrevioussalesInvoiceNo from SalesInvoiceDetails
                                    where salesInvoiceNo=@SalesInvoiceNo)
                                    group by salesInvoiceNo
                                    ) New on Credit.PrevioussalesInvoiceNo=New.salesInvoiceNo left outer join
                                    (select salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from SalesInvoiceDetails
                                     where salesInvoiceNo=@SalesInvoiceNo
                                    group by salesInvoiceNo
                                    )CreditSum on Credit.salesInvoiceNo=CreditSum.salesInvoiceNo left outer join products P on
                                    Credit.itemno=p.itemno
                                    where  Credit.salesInvoiceNo=@SalesInvoiceNo
                                    AND CreditH.TransactionType='Credit' 
                                   
AND (CreditH.Post =@post1 or CreditH.Post= @post2)

                                    and Credit.Quantity>0";
                // AND CreditH.Post='Y'  // start
                SqlCommand objCommCreditNote = new SqlCommand();
                objCommCreditNote.Connection = currConn;
                objCommCreditNote.CommandText = sqlText;
                objCommCreditNote.CommandType = CommandType.Text;

                if (!objCommCreditNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommCreditNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommCreditNote.Parameters.Contains("@post1"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommCreditNote.Parameters["@post1"].Value = post1;
                }
                if (!objCommCreditNote.Parameters.Contains("@post2"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommCreditNote.Parameters["@post2"].Value = post2;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCreditNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet CreditNoteAmountNew(string SalesInvoiceNo, string post1, string post2)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportCreditNote");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"select Credit.InvoiceLineNo ,Credit.salesInvoiceNo,
                                    convert (varchar,Credit.InvoiceDateTime,120)InvoiceDateTime,p.productName
									,Credit.NBRPrice
                                    ,Credit.DiscountedNBRPrice
									,((Credit.DiscountedNBRPrice-Credit.NBRPrice)*Credit.Quantity)SubCost
									
									
									,Credit.SDAmount
									,((Credit.DiscountedNBRPrice-Credit.NBRPrice)*Credit.Quantity)*Credit.VATRate/100 VATAmount
									--,Credit.VATAmount
                                    ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,CreditSum.SDAmount CSSDAmount,CreditSum.VATAmount CSVATAmount
                                    ,Credit.PrevioussalesInvoiceNo,CreditH.CustomerID,CreditH.VehicleID,
                                    convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
                                    ,credit.quantity,credit.uom

                                    ,CreditH.DeliveryAddress1,CreditH.DeliveryAddress2,CreditH.DeliveryAddress3,
                                    c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,CreditH.comments

                                    from SalesInvoiceDetails AS Credit left outer join
                                    SalesInvoiceHeaders CreditH on Credit.salesInvoiceNo=CreditH.salesInvoiceNo left outer join

                                    Customers C on CreditH.CustomerID=c.customerID left outer join
                                    Vehicles V on CreditH.VehicleID=v.VehicleID left outer join
                                    SalesInvoiceHeaders SIH on Credit.PrevioussalesInvoiceNo=sih.salesInvoiceNo
                                    left outer join
                                    (select distinct salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from SalesInvoiceDetails
                                    where salesInvoiceNo=(
                                    select distinct PrevioussalesInvoiceNo from SalesInvoiceDetails
                                    where salesInvoiceNo=@SalesInvoiceNo)
                                    group by salesInvoiceNo
                                    ) New on Credit.PrevioussalesInvoiceNo=New.salesInvoiceNo left outer join
                                    (select salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from SalesInvoiceDetails
                                     where salesInvoiceNo=@SalesInvoiceNo
                                    group by salesInvoiceNo
                                    )CreditSum on Credit.salesInvoiceNo=CreditSum.salesInvoiceNo left outer join products P on
                                    Credit.itemno=p.itemno
                                    where  Credit.salesInvoiceNo=@SalesInvoiceNo
                                    AND CreditH.TransactionType='Credit' 
                                   
AND (CreditH.Post =@post1 or CreditH.Post= @post2)

                                    and Credit.Quantity>0";
                // AND CreditH.Post='Y'  // start
                SqlCommand objCommCreditNote = new SqlCommand();
                objCommCreditNote.Connection = currConn;
                objCommCreditNote.CommandText = sqlText;
                objCommCreditNote.CommandType = CommandType.Text;

                if (!objCommCreditNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommCreditNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommCreditNote.Parameters.Contains("@post1"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommCreditNote.Parameters["@post1"].Value = post1;
                }
                if (!objCommCreditNote.Parameters.Contains("@post2"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommCreditNote.Parameters["@post2"].Value = post2;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCreditNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }


        public DataSet DebitNoteNew(string SalesInvoiceNo, string post1, string post2)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportDebitNote");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText =
        @"select Debit.InvoiceLineNo ,Debit.salesInvoiceNo,convert (varchar,Debit.InvoiceDateTime,120)InvoiceDateTime,p.productName,
        (Debit.NBRPrice*Debit.Quantity)SubCost,Debit.SDAmount,Debit.VATAmount
        ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,DebitSum.SDAmount DSSDAmount,DebitSum.VATAmount DSVATAmount
        ,Debit.PrevioussalesInvoiceNo,DebitH.CustomerID,DebitH.VehicleID,
        convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
        ,Debit.quantity,Debit.uom

        ,DebitH.DeliveryAddress1,DebitH.DeliveryAddress2,DebitH.DeliveryAddress3,
        c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,DebitH.comments
        ,isnull(isnull(OldInv.TotalAmount,0)-isnull(OldInv.TotalVATAmount,0),0) Col4

        from SalesInvoiceDetails AS Debit left outer join
        SalesInvoiceHeaders DebitH on Debit.salesInvoiceNo=DebitH.salesInvoiceNo left outer join
        SalesInvoiceHeaders OldInv on Debit.PreviousSalesInvoiceNo=OldInv.salesInvoiceNo left outer join

        Customers C on DebitH.CustomerID=c.customerID left outer join
        Vehicles V on DebitH.VehicleID=v.VehicleID 
        left outer join SalesInvoiceHeaders SIH on Debit.PrevioussalesInvoiceNo=sih.salesInvoiceNo
        left outer join
        (select distinct salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
        from SalesInvoiceDetails
        where salesInvoiceNo=(select distinct PrevioussalesInvoiceNo from SalesInvoiceDetails
        where  salesInvoiceNo=@SalesInvoiceNo)
        group by salesInvoiceNo
        ) New on Debit.PrevioussalesInvoiceNo=New.salesInvoiceNo left outer join
        (select salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
        from SalesInvoiceDetails
        where salesInvoiceNo=@SalesInvoiceNo
        group by salesInvoiceNo
        )DebitSum on debit.salesInvoiceNo=DebitSum.salesInvoiceNo left outer join products P on
        Debit.itemno=p.itemno
        where 
        DebitH.TransactionType='Debit'
        and Debit.salesInvoiceNo=@SalesInvoiceNo
        and Debit.Quantity>0
        AND (debit.Post =@Post1 or debit.Post= @Post2)
                                    ";
                //AND debit.post='Y'
                SqlCommand objCommDebitNote = new SqlCommand();
                objCommDebitNote.Connection = currConn;
                objCommDebitNote.CommandText = sqlText;
                objCommDebitNote.CommandType = CommandType.Text;

                if (!objCommDebitNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommDebitNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommDebitNote.Parameters.Contains("@post1"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommDebitNote.Parameters["@post1"].Value = post1;
                }

                if (!objCommDebitNote.Parameters.Contains("@post2"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommDebitNote.Parameters["@post2"].Value = post2;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDebitNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }


        public DataSet BatchTracking(string BatchNo, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";
            DataSet dataSet = new DataSet("BatchTracking");


            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement



                #region Backup

                //sqlText = @"
                //
                //
                //";

                #endregion

                #region Backup

                sqlText =
                    @"
                SELECT rh.SerialNo, rh.ReceiveNo,convert (varchar,rh.ReceiveDateTime,120)rh.ReceiveDateTime
,rd.ItemNo ReceiveItemNo,ReceiveItem.ProductCode ReceiveProductCode,ReceiveItem.ProductName ReceiveProductName
,ReceiveItem.HSCodeNo ReceiveHSCodeNo,ReceiveItem.CategoryName ReceiveCategoryName,ReceiveItem.IsRaw ReceiveProductType
,isnull(rd.UOMQty,rd.Quantity)R_UOMQty,isnull(rd.UOMn,rd.UOM)R_UOMn,isnull(rd.uomprice,rd.CostPrice)R_UOMPrice
,isnull(rd.Quantity,0)R_Quantity,isnull(rd.UOM,'-')R_UOM,isnull(rd.CostPrice,0)R_CostPrice

,id.ItemNo IssueItemNo,IssueItem.ProductCode IssueProductCode,IssueItem.ProductName IssueProductName
,IssueItem.HSCodeNo IssueHSCodeNo,IssueItem.CategoryName IssueCategoryName,IssueItem.IsRaw IssueProductType
,isnull(id.UOMQty,id.Quantity)I_UOMQty, isnull(id.UOMPrice,id.CostPrice)I_UOMPrice,ISNULL( id.UOMn,id.UOM)I_UOMn,isnull(id.UOMWastage,id.Wastage)I_UOMWastage
,isnull(id.Quantity,0)I_Quantity, isnull(id.CostPrice,0)I_CostPrice,ISNULL(id.UOM,'-')I_UOM,isnull(id.Wastage,0)I_Wastage

FROM ReceiveHeaders rh LEFT OUTER JOIN
ReceiveDetails rd ON rh.ReceiveNo=rd.ReceiveNo LEFT OUTER JOIN
IssueHeaders ih on rh.ReceiveNo=ih.IssueNo  AND rh.SerialNo=ih.SerialNo  LEFT OUTER JOIN
IssueDetails id on ih.IssueNo=id.IssueNo LEFT OUTER JOIN
(SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) ReceiveItem ON rd.ItemNo=ReceiveItem.ItemNo  LEFT OUTER JOIN
(SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) IssueItem ON id.ItemNo=IssueItem.ItemNo
";

                sqlText += "  WHERE REPLACE(rh.SerialNo,' ','') = '" + BatchNo + "'";
                //sqlText += " AND (ih.Post ='" + post1 + "' or ih.Post= '" + post2 + "')";
                //sqlText += " AND (rh.Post ='" + post1 + "' or rh.Post= '" + post2 + "')";
                sqlText +=
                    " ORDER BY rh.SerialNo,rh.ReceiveNo,ReceiveItem.CategoryName,ReceiveItem.IsRaw,ReceiveItem.ItemNo," +
                    "IssueItem.CategoryName, IssueItem.IsRaw,IssueItem.ItemNo";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BatchTracking1(string BatchNo, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";
            DataSet dataSet = new DataSet("BatchTracking");


            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement



                #region Backup

                //sqlText = @"
                //
                //
                //";

                #endregion

                #region Backup

                sqlText = " ";
                sqlText += @"
               
--DECLARE @batchNo VARCHAR(200)
--SET @batchNo='123456'  ;
SELECT 

'-' SerialNo, '-' ReceiveNo,'01/01/1900' ReceiveDateTime,b.ReceiveItemNo,b.ReceiveProductCode,b.ReceiveProductName
,b.ReceiveHSCodeNo,b.ReceiveCategoryName,b.ReceiveProductType,b.R_UOMQty,b.R_UOMn,b.R_UOMPrice,b.R_Quantity,b.R_UOM,b.R_CostPrice
,a.IssueItemNo,A.IssueProductCode,a.IssueProductName,a.IssueHSCodeNo,a.IssueCategoryName,a.IssueProductType,
a.I_UOMQty,a.I_UOMPrice,a.I_UOMn,a.I_UOMWastage,a.I_Quantity,a.I_CostPrice,a.I_UOM,a.I_Wastage


FROM 
(
SELECT id.FinishItemNo,id.ItemNo IssueItemNo,IssueItem.ProductCode IssueProductCode,IssueItem.ProductName IssueProductName
,ISNULL(id.UOM,'-')I_UOM,ISNULL( id.UOMn,id.UOM)I_UOMn,IssueItem.HSCodeNo IssueHSCodeNo,
IssueItem.CategoryName IssueCategoryName,IssueItem.IsRaw IssueProductType
,sum(isnull(id.UOMQty,id.Quantity))I_UOMQty, sum(isnull(id.UOMPrice,id.CostPrice))I_UOMPrice,sum(isnull(id.UOMWastage,id.Wastage))I_UOMWastage
,sum(isnull(id.Quantity,0))I_Quantity, sum(isnull(id.CostPrice,0))I_CostPrice,sum(isnull(id.Wastage,0))I_Wastage
FROM IssueDetails id 
LEFT OUTER JOIN(SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) IssueItem ON id.ItemNo=IssueItem.ItemNo 
 WHERE id.IssueNo IN (	SELECT DISTINCT IssueNo FROM IssueHeaders ih 
";
                sqlText += "  WHERE REPLACE(SerialNo,' ','') = '" + BatchNo + "'";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";

                sqlText += @" )
 GROUP BY id.FinishItemNo,id.ItemNo ,IssueItem.ProductCode ,IssueItem.ProductName 
,ISNULL(id.UOM,'-'),ISNULL( id.UOMn,id.UOM)
,IssueItem.HSCodeNo ,IssueItem.CategoryName ,IssueItem.IsRaw ) A LEFT OUTER JOIN

(SELECT distinct rd.ItemNo ReceiveItemNo,ReceiveItem.ProductCode ReceiveProductCode,ReceiveItem.ProductName ReceiveProductName
,isnull(rd.UOM,'-')R_UOM,isnull(rd.UOMn,rd.UOM)R_UOMn,ReceiveItem.HSCodeNo ReceiveHSCodeNo,ReceiveItem.CategoryName ReceiveCategoryName,ReceiveItem.IsRaw ReceiveProductType
,sum(isnull(rd.UOMQty,rd.Quantity))R_UOMQty,sum(isnull(rd.uomprice,rd.CostPrice))R_UOMPrice
,sum(isnull(rd.Quantity,0))R_Quantity,sum(isnull(rd.CostPrice,0))R_CostPrice
 FROM ReceiveDetails rd LEFT OUTER join  (SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) ReceiveItem ON rd.ItemNo=ReceiveItem.ItemNo  
 WHERE rd.ReceiveNo IN(  
SELECT DISTINCT ReceiveNo FROM ReceiveHeaders rh
";

                sqlText += "  WHERE REPLACE(SerialNo,' ','') = '" + BatchNo + "'";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";


                sqlText += @" ) 
GROUP BY rd.ItemNo,ReceiveItem.ProductCode,ReceiveItem.ProductName,rd.UOM,isnull(rd.UOMn,rd.UOM),ReceiveItem.HSCodeNo,ReceiveItem.CategoryName,ReceiveItem.IsRaw
) AS b ON a.FinishItemNo=b.ReceiveItemNo

ORDER BY b.ReceiveProductName,a.IssueProductType,a.IssueCategoryName,a.IssueProductName
";

                #endregion

                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;



                //if (!objCommVAT16.Parameters.Contains("@post1"))
                //{ objCommVAT16.Parameters.AddWithValue("@post1", post1); }
                //else { objCommVAT16.Parameters["@post1"].Value = post1; }

                //if (!objCommVAT16.Parameters.Contains("@post2"))
                //{ objCommVAT16.Parameters.AddWithValue("@post2", post2); }
                //else { objCommVAT16.Parameters["@post2"].Value = post2; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BatchTracking2(string BatchNo, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";
            DataSet dataSet = new DataSet("BatchTracking");


            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement



                #region Backup

                //sqlText = @"
                //
                //
                //";

                #endregion

                #region Backup

                sqlText = " ";
                sqlText +=
                    @"
              
--DECLARE @batchNo VARCHAR(200)
--SET @batchNo='123456'  ;
SELECT 
SerialNo, a.IssueItemNo,A.IssueProductCode,a.IssueProductName,a.IssueHSCodeNo,a.IssueCategoryName,a.IssueProductType,
a.I_UOMQty,a.I_UOMPrice,a.I_UOMn,a.I_UOMWastage,a.I_Quantity,a.I_CostPrice,a.I_UOM,a.I_Wastage,'-' ReceiveNo,'01/01/1900' ReceiveDateTime

FROM 
(
 SELECT DISTINCT 'B' SerialNo,id.ItemNo IssueItemNo,IssueItem.ProductCode IssueProductCode,IssueItem.ProductName IssueProductName
,ISNULL(id.UOM,'-')I_UOM,ISNULL( id.UOMn,id.UOM)I_UOMn,IssueItem.HSCodeNo IssueHSCodeNo,
IssueItem.CategoryName IssueCategoryName,IssueItem.IsRaw IssueProductType
,sum(isnull(id.UOMQty,id.Quantity))I_UOMQty, sum(isnull(id.UOMPrice,id.CostPrice))I_UOMPrice,sum(isnull(id.UOMWastage,id.Wastage))I_UOMWastage
,sum(isnull(id.Quantity,0))I_Quantity, sum(isnull(id.CostPrice,0))I_CostPrice,sum(isnull(id.Wastage,0))I_Wastage

 FROM IssueDetails id 
LEFT OUTER JOIN(SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) IssueItem ON id.ItemNo=IssueItem.ItemNo 
 WHERE id.IssueNo IN (	SELECT DISTINCT IssueNo FROM IssueHeaders ih ";
                sqlText += "  WHERE REPLACE(SerialNo,' ','') = '" + BatchNo + "'";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";

                sqlText += @"  
 ) GROUP BY id.ItemNo ,IssueItem.ProductCode ,IssueItem.ProductName 
,ISNULL(id.UOM,'-'),ISNULL( id.UOMn,id.UOM)
,IssueItem.HSCodeNo ,IssueItem.CategoryName ,IssueItem.IsRaw 


UNION All
SELECT DISTINCT 'A' SerialNo,  rd.ItemNo ReceiveItemNo,ReceiveItem.ProductCode ReceiveProductCode,ReceiveItem.ProductName ReceiveProductName
,isnull(rd.UOM,'-')R_UOM,isnull(rd.UOMn,rd.UOM)R_UOMn,ReceiveItem.HSCodeNo ReceiveHSCodeNo,ReceiveItem.CategoryName ReceiveCategoryName,ReceiveItem.IsRaw ReceiveProductType
,sum(isnull(rd.UOMQty,rd.Quantity))R_UOMQty, sum(isnull(rd.uomprice,rd.CostPrice))R_UOMPrice,0 R_UOMWastage
,sum(isnull(rd.Quantity,0))R_Quantity,sum(isnull(rd.CostPrice,0))R_CostPrice,0 R_Wastage

 FROM ReceiveDetails rd LEFT OUTER join  (SELECT p.ItemNo,p.ProductCode,p.ProductName,p.HSCodeNo, pc.CategoryName,pc.IsRaw
  FROM Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID ) ReceiveItem ON rd.ItemNo=ReceiveItem.ItemNo  
 WHERE rd.ReceiveNo IN(  
SELECT DISTINCT ReceiveNo FROM ReceiveHeaders rh

";
                sqlText += "  WHERE REPLACE(SerialNo,' ','') = '" + BatchNo + "'";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";
                //sqlText += " AND (Post ='" + post1 + "' or Post= '" + post2 + "')";

                sqlText += @"  
 )GROUP BY rd.ItemNo,ReceiveItem.ProductCode,ReceiveItem.ProductName,rd.UOM,isnull(rd.UOMn,rd.UOM),ReceiveItem.HSCodeNo,ReceiveItem.CategoryName,ReceiveItem.IsRaw
) AS a
ORDER BY a.SerialNo,a.IssueProductName
";


                #endregion

                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;



                //if (!objCommVAT16.Parameters.Contains("@post1"))
                //{ objCommVAT16.Parameters.AddWithValue("@post1", post1); }
                //else { objCommVAT16.Parameters["@post1"].Value = post1; }

                //if (!objCommVAT16.Parameters.Contains("@post2"))
                //{ objCommVAT16.Parameters.AddWithValue("@post2", post2); }
                //else { objCommVAT16.Parameters["@post2"].Value = post2; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT16NewBackup3(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase',pd.ReceiveNo,
@ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,pd.TransactionType,pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime >=@StartDate and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNS')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNSImport')


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0)),
isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
--select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
--,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
--pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
--from PurchaseInvoiceDetails PD 
--where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
--and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
--AND (pd.Post =@post1 or pd.Post= @post2)
--AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputServiceImport')";

                if (ImportCostingIncludeATV)
                {
                    sqlText += @"insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";
                }
                else
                {
                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+  isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,0 UnitCost
,0  UOMQty ,pd.ATVAmount ,0 SDAmount,'Import ATV' TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                }

                sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 

AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')

--Add for TollReceive
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Purchase',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

-- Add by ruba for internalsale,service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',@ItemNo,

SubTotal,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),0,SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

----Transfer Raw1 to Raw2(Receive Raw2)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Purchase','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.ItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)


---- end purchase---
---- start Issue---
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','OtherToll')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('PackageProduction')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Tender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) subtotal ,isnull(UOMQty,0)UOMQty ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(ID.SubTotal,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) 
isnull(UOMQty,0)*isnull(CostPrice,0) 
,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTrading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(CostPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) ,
isnull(UOMQty,0)*isnull(CostPrice,0) ,
isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InternalIssue')

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
--Quantity,VATRate,SD,Remarks,CreateDateTime)
--select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
--,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
--from IssueDetails ID
--where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
--and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
--AND ID.TransactionType IN ('TollIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ReceiveReturn')


-- Add by ruba for internalsale,Service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
---isnull(NULLIF(SubTotal,0),0),
-isnull(UOMQty,0)*isnull(AVGPrice,0),
- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',-SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

--Add by Ruba for InputService(Purchase)
--Purchase CN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseCN'))

--Purchase DN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseDN','PurchaseReturn'))
--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading', 'TollReceive-WIP','PurchaseCN') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  ";
                if (ImportCostingIncludeATV)
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }
                else
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in( 'InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";

                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0) +isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import' ) 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }


                sqlText += @"	 UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType NOT IN('IssueReturn','ReceiveReturn') 
AND ItemNo = @itemNo  AND (UOMQty>0))  
 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   

UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y'))    

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL (
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        public DataSet VAT16New(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2, string ReportName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                CommonDAL _cDal = new CommonDAL();
                bool ImportCostingIncludeATV = false;
                ImportCostingIncludeATV = Convert.ToBoolean(_cDal.settings("Purchase", "ImportCostingIncludeATV") == "Y" ? true : false);

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase',pd.ReceiveNo,
@ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,pd.TransactionType,pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime >=@StartDate and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNS')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNSImport')


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0)),
isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
--select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
--,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
--pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
--from PurchaseInvoiceDetails PD 
--where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
--and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
--AND (pd.Post =@post1 or pd.Post= @post2)
--AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputServiceImport')";

                if (ImportCostingIncludeATV)
                {
                    sqlText += @"insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";
                }
                else
                {
                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+  isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                    sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,0 UnitCost
,0  UOMQty ,pd.ATVAmount ,0 SDAmount,'Import ATV' TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')";

                }

                sqlText += @" insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 

AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')

--Add for TollReceive
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Purchase',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

-- Add by ruba for internalsale,service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',@ItemNo,

SubTotal,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),0,SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

----Transfer Raw1 to Raw2(Receive Raw2)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Purchase','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.ItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)


---- end purchase---
---- start Issue---
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other','OtherToll')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('PackageProduction')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Tender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) subtotal ,isnull(UOMQty,0)UOMQty ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(ID.SubTotal,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) 
isnull(UOMQty,0)*isnull(CostPrice,0) 
,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTrading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(CostPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) ,
isnull(UOMQty,0)*isnull(CostPrice,0) ,
isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InternalIssue')

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
--Quantity,VATRate,SD,Remarks,CreateDateTime)
--select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
--,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
--from IssueDetails ID
--where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
--and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
--AND ID.TransactionType IN ('TollIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ReceiveReturn')


-- Add by ruba for internalsale,Service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
---isnull(NULLIF(SubTotal,0),0),
-isnull(UOMQty,0)*isnull(AVGPrice,0),
- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),'0',-SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

--Add by Ruba for InputService(Purchase)
--Purchase CN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseCN'))

--Purchase DN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseDN','PurchaseReturn'))
--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading', 'TollReceive-WIP','PurchaseCN') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  ";
                if (ImportCostingIncludeATV)
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }
                else
                {
                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in( 'InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";

                    sqlText += @"	 UNION ALL (
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0) +isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import' ) 
AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) ";
                }


                sqlText += @"	 UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType NOT IN('IssueReturn','ReceiveReturn','TollIssue') 
AND ItemNo = @itemNo  AND (UOMQty>0))  



 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   

UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y'))    

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) IssueQuantity,-isnull(sum(SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL (
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public List<VAT_16VM> VAT16List(DataSet ReportResult)
        {
            #region
            decimal vColumn1 = 0;
            DateTime vColumn2 = DateTime.MinValue;
            decimal vColumn3 = 0;
            decimal vColumn4 = 0;
            string vColumn5 = "-";
            DateTime vColumn6 = DateTime.MinValue;
            string vColumn7 = string.Empty;
            string vColumn8 = string.Empty;
            string vColumn9 = string.Empty;
            string vColumn10 = string.Empty;
            decimal vColumn11 = 0;
            decimal vColumn12 = 0;
            decimal vColumn13 = 0;
            decimal vColumn14 = 0;
            decimal vColumn15 = 0;
            decimal vColumn16 = 0;
            decimal vColumn17 = 0;
            decimal vColumn18 = 0;
            string vColumn19 = string.Empty;

            decimal vTempSerial = 0;
            DateTime vTempStartDateTime = DateTime.MinValue;
            decimal vTempStartingQuantity = 0;
            decimal vTempStartingAmount = 0;
            decimal vTempQuantity = 0;
            decimal vTempSubtotal = 0;
            string vTempVendorName = string.Empty;
            string vTempVATRegistrationNo = string.Empty;
            string vTempAddress1 = string.Empty;
            string vTempTransID = string.Empty;
            DateTime vTempInvoiceDateTime = DateTime.MinValue;
            string vTempProductName = string.Empty;
            string vTempBENumber = string.Empty;

            decimal vTempSDAmount = 0;
            decimal vTempVATAmount = 0;
            string vTempremarks = string.Empty;
            string vTemptransType = string.Empty;

            decimal vClosingQuantity = 0;
            decimal vClosingAmount = 0;
            decimal vClosingAvgRate = 0;

            decimal OpeningQty = 0;
            decimal OpeningAmnt = 0;
            decimal PurchaseQty = 0;
            decimal PurchaseAmnt = 0;
            decimal IssueQty = 0;
            decimal IssueAmnt = 0;
            decimal CloseQty = 0;
            decimal CloseAmnt = 0;

            decimal OpQty = 0;
            decimal OpAmnt = 0;
            decimal avgRate = 0;
            string HSCode = string.Empty;
            string ProductName = string.Empty;
            #endregion
            List<VAT_16VM> vat16s = new List<VAT_16VM>();
            VAT_16VM vat16 = new VAT_16VM();
            int i = 1;

            DataRow[] DetailRawsOpening = ReportResult.Tables[0].Select("transType='Opening'");
            foreach (DataRow row in DetailRawsOpening)
            {
                vTempremarks = row["Remarks"].ToString().Trim();
                vTemptransType = row["TransType"].ToString().Trim();
                ProductName = row["ProductName"].ToString().Trim();
                HSCode = row["HSCodeNo"].ToString().Trim();

                vTempStartDateTime = Convert.ToDateTime(row["StartDateTime"].ToString().Trim());

                OpQty = Convert.ToDecimal(row["Quantity"].ToString().Trim());
                OpAmnt = Convert.ToDecimal(row["UnitCost"].ToString().Trim());
                vat16 = new VAT_16VM();

                #region if row 1 Opening

                OpeningQty = OpQty;
                OpeningAmnt = OpAmnt;
                OpAmnt = 0;
                OpQty = 0;

                PurchaseQty = 0;
                PurchaseAmnt = 0;
                IssueQty = 0;
                IssueAmnt = 0;

                CloseQty =
                    (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                     Convert.ToDecimal(IssueQty));
                CloseAmnt = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                             Convert.ToDecimal(IssueAmnt));
                vColumn2 = vTempStartDateTime;
                vColumn3 = OpeningQty;
                vColumn4 = OpeningAmnt;
                vColumn5 = "-";
                vColumn6 = vTempStartDateTime;
                vColumn7 = "-";
                vColumn8 = "-";
                vColumn9 = "-";
                vColumn10 = "-";
                vColumn11 = PurchaseQty;
                vColumn12 = PurchaseAmnt;
                vColumn13 = 0;
                vColumn14 = 0;
                vColumn15 = IssueQty;
                vColumn16 = IssueAmnt;
                vColumn17 = CloseQty;
                vColumn18 = CloseAmnt;
                vColumn19 = vTempremarks;

                vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                                    Convert.ToDecimal(IssueQty));
                if (vClosingQuantity == 0)
                {
                    vClosingAmount = 0;


                }
                else
                {
                    vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                      Convert.ToDecimal(IssueAmnt));
                    vClosingAvgRate = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));


                }

                #endregion

                #region AssignValue to List

                vat16.Column1 = vColumn1; //    i.ToString();      // Serial No   
                vat16.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                vat16.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                vat16.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                vat16.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                vat16.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                vat16.Column6String = ""; //    item["UnitCost"].ToString();      // Production Price
                vat16.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                vat16.Column8 = vColumn8;   //    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                vat16.Column9 = vColumn9;   //    item["Address1"].ToString();      // Customer Address
                vat16.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                vat16.Column11 = vColumn11; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                vat16.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                vat16.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                vat16.Column14 = vColumn14; //    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                vat16.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                vat16.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                vat16.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                vat16.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                vat16.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks



                vat16s.Add(vat16);
                i = i + 1;

                #endregion AssignValue to List
            }
            DataRow[] DetailRawsOthers = ReportResult.Tables[0].Select("transType<>'Opening'");
            if (DetailRawsOthers == null || !DetailRawsOthers.Any())
            {
                return new List<VAT_16VM>();
                //MessageBox.Show("There is no data to preview", this.Text);
                //return;
            }
            string strSort = "CreateDateTime ASC, SerialNo ASC";

            DataView dtview = new DataView(DetailRawsOthers.CopyToDataTable());
            dtview.Sort = strSort;
            DataTable dtsorted = dtview.ToTable();

            foreach (DataRow item in dtsorted.Rows)
            {
                #region Get from Datatable

                OpeningQty = 0;
                OpeningAmnt = 0;
                PurchaseQty = 0;
                PurchaseAmnt = 0;
                IssueQty = 0;
                IssueAmnt = 0;
                CloseQty = 0;
                CloseAmnt = 0;

                vColumn1 = i;
                vTempStartDateTime = Convert.ToDateTime(item["StartDateTime"].ToString()); // Date
                vTempQuantity = Convert.ToDecimal(item["Quantity"].ToString()); // Production Quantity
                vTempSubtotal = Convert.ToDecimal(item["UnitCost"].ToString()); // Production Price
                vTempVendorName = item["VendorName"].ToString(); // Customer Name
                vTempVATRegistrationNo = item["VATRegistrationNo"].ToString(); // Customer VAT Reg No
                vTempAddress1 = item["Address1"].ToString(); // Customer Address
                vTempTransID = item["TransID"].ToString(); // Sale Invoice No
                vTempInvoiceDateTime = Convert.ToDateTime(item["InvoiceDateTime"].ToString()); // Sale Invoice Date and Time
                vTempBENumber = item["BENumber"].ToString(); // Sale Invoice Date and Time
                vTempProductName = item["ProductName"].ToString(); // Sale Product Name
                vTempSDAmount = Convert.ToDecimal(item["SD"].ToString()); // SD Amount
                vTempVATAmount = Convert.ToDecimal(item["VATRate"].ToString()); // VAT Amount
                vTempremarks = item["remarks"].ToString(); // Remarks
                vTemptransType = item["TransType"].ToString().Trim();

                #endregion Get from Datatable

                if (vTemptransType == "Issue")
                {
                    vat16 = new VAT_16VM();
                    #region if row 1 Opening
                    if (vTempremarks.Trim() == "ServiceNS"
                       || vTempremarks.Trim() == "ServiceNSImport"
                       )
                    {
                        OpeningQty = 0;
                        OpeningAmnt = 0;
                    }
                    else
                    {


                        OpeningQty = OpQty + vClosingQuantity;
                        OpeningAmnt = OpAmnt + vClosingAmount;

                    }



                    OpAmnt = 0;
                    OpQty = 0;

                    PurchaseQty = 0;
                    PurchaseAmnt = 0;
                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        IssueQty = 0;
                        IssueAmnt = 0;
                    }
                    else
                    {
                        IssueQty = vTempQuantity;
                        IssueAmnt = vTempSubtotal;// vTempQuantity* vClosingAvgRate;
                    }

                    if (IssueQty == 0)
                    {
                        avgRate = 0;
                    }
                    else
                    {
                        avgRate = IssueAmnt / IssueQty;
                    }
                    CloseQty =
                        (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                         Convert.ToDecimal(IssueQty));
                    CloseAmnt = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                 Convert.ToDecimal(IssueAmnt));

                    vColumn2 = vTempStartDateTime;

                    vColumn3 = OpeningQty;
                    vColumn4 = OpeningAmnt;

                    vColumn5 = "";
                    vColumn6 = vTempStartDateTime;

                    vColumn7 = vTempVendorName;
                    vColumn8 = vTempAddress1;
                    vColumn9 = vTempVATRegistrationNo;
                    vColumn10 = vTempProductName;
                    vColumn11 = PurchaseQty;
                    vColumn12 = PurchaseAmnt;
                    vColumn13 = vTempSDAmount;
                    vColumn14 = vTempVATAmount;
                    vColumn15 = IssueQty;
                    vColumn16 = IssueAmnt;

                    vColumn17 = CloseQty;
                    vColumn18 = CloseAmnt;

                    vColumn19 = vTempremarks;
                    vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                                        Convert.ToDecimal(IssueQty));
                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        vClosingQuantity = 0;
                        vClosingAmount = 0;
                    }
                    else if (vClosingQuantity == 0)
                    {
                        vClosingAmount = 0;
                    }
                    else
                    {
                        vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                          Convert.ToDecimal(IssueAmnt));

                    }
                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        vClosingQuantity = 0;
                        vClosingAmount = 0;

                    }

                    #endregion
                    #region AssignValue to List

                    vat16.Column1 = vColumn1; //   
                    vat16.Column2 = vColumn2; //   
                    vat16.Column3 = vColumn3; //   
                    vat16.Column4 = vColumn4; //   
                    vat16.Column5 = vColumn5; //   
                    vat16.Column6 = vColumn6; //   
                    vat16.Column6String = ""; //   
                    vat16.Column7 = vColumn7; //   
                    vat16.Column8 = vColumn8;//    
                    vat16.Column9 = vColumn9; //   
                    vat16.Column10 = vColumn10; // 
                    vat16.Column11 = vColumn11;//  
                    vat16.Column12 = vColumn12; // 
                    vat16.Column13 = vColumn13; // 
                    vat16.Column14 = vColumn14;//  
                    vat16.Column15 = vColumn15; // 
                    vat16.Column16 = vColumn16; // 
                    vat16.Column17 = vColumn17; // 
                    vat16.Column18 = vColumn18; // 
                    vat16.Column19 = vColumn19; // 


                    vat16s.Add(vat16);
                    i = i + 1;

                    #endregion AssignValue to List



                }
                else if (vTemptransType == "Purchase")
                {
                    vat16 = new VAT_16VM();

                    #region if row 1 Opening

                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        OpeningQty = 0;
                        OpeningAmnt = 0;
                    }
                    else
                    {
                        OpeningQty = OpQty + vClosingQuantity;
                        OpeningAmnt = OpAmnt + vClosingAmount;
                    }
                    OpeningQty = OpQty + vClosingQuantity;
                    OpeningAmnt = OpAmnt + vClosingAmount;
                    OpAmnt = 0;
                    OpQty = 0;

                    //if (vTempremarks.Trim() == "ServiceNS"
                    //  || vTempremarks.Trim() == "ServiceNSImport"
                    //  )
                    //{
                    //    PurchaseQty = 0;
                    //    PurchaseAmnt = 0;
                    //}
                    //else
                    //{
                    PurchaseQty = vTempQuantity;
                    PurchaseAmnt = vTempSubtotal;
                    //}

                    IssueQty = 0;
                    IssueAmnt = 0;
                    if (PurchaseQty == 0)
                    {
                        avgRate = 0;
                    }
                    else
                    {
                        avgRate = PurchaseAmnt / PurchaseQty;
                    }


                    if (vTempremarks.Trim() == "ServiceNS"
                      || vTempremarks.Trim() == "ServiceNSImport"
                      )
                    {
                        CloseQty = 0;
                        CloseAmnt = 0;
                    }
                    else
                    {
                        CloseQty =
                       (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                        Convert.ToDecimal(IssueQty));
                        CloseAmnt = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                     Convert.ToDecimal(IssueAmnt));
                    }



                    vColumn2 = vTempStartDateTime;
                    vColumn3 = OpeningQty;
                    vColumn4 = OpeningAmnt;
                    vColumn5 = vTempBENumber;
                    vColumn6 = vTempInvoiceDateTime;
                    vColumn7 = vTempVendorName;
                    vColumn8 = vTempAddress1;
                    vColumn9 = vTempVATRegistrationNo;
                    vColumn10 = vTempProductName;
                    vColumn11 = PurchaseQty;
                    vColumn12 = PurchaseAmnt;
                    vColumn13 = vTempSDAmount;
                    vColumn14 = vTempVATAmount;
                    vColumn15 = IssueQty;
                    vColumn16 = IssueAmnt;
                    vColumn17 = CloseQty;
                    vColumn18 = CloseAmnt;
                    vColumn19 = vTempremarks;

                    vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(PurchaseQty) -
                                        Convert.ToDecimal(IssueQty));
                    if (vClosingQuantity == 0)
                    {
                        vClosingAmount = 0;


                    }
                    else
                    {
                        vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(PurchaseAmnt) -
                                          Convert.ToDecimal(IssueAmnt));

                        vClosingAvgRate = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));

                    }

                    if (vTempremarks.Trim() == "ServiceNS" || vTempremarks.Trim() == "ServiceNSImport")
                    {
                        vClosingQuantity = 0;
                        vClosingAmount = 0;
                    }


                    #endregion



                    #region AssignValue to List

                    vat16.Column1 = vColumn1; //   
                    vat16.Column2 = vColumn2; //   
                    vat16.Column3 = vColumn3; //   
                    vat16.Column4 = vColumn4; //   
                    vat16.Column5 = vColumn5; //   
                    vat16.Column6 = vColumn6; //   
                    vat16.Column6String = Convert.ToDateTime(vColumn6).ToString("dd/MM/yyyy"); //    item["UnitCost"].ToString();      // Production Price
                    vat16.Column7 = vColumn7; //   
                    vat16.Column8 = vColumn8;   // 
                    vat16.Column9 = vColumn9;   // 
                    vat16.Column10 = vColumn10; // 
                    vat16.Column11 = vColumn11; // 
                    vat16.Column12 = vColumn12; // 
                    vat16.Column13 = vColumn13; // 
                    vat16.Column14 = vColumn14; // 
                    vat16.Column15 = vColumn15; // 
                    vat16.Column16 = vColumn16; // 
                    vat16.Column17 = vColumn17; // 
                    vat16.Column18 = vColumn18; // 
                    vat16.Column19 = vColumn19; // 


                    vat16s.Add(vat16);
                    i = i + 1;

                    #endregion AssignValue to List
                }
            }

            return vat16s;
        }

        public List<VAT_17VM> VAT17List(DataSet ReportResult,string itemNo)
        {
            #region
            decimal vColumn1 = 0;
            DateTime vColumn2 = DateTime.MinValue;
            decimal vColumn3 = 0;
            decimal vColumn4 = 0;
            decimal vColumn5 = 0;
            decimal vColumn6 = 0;
            string vColumn7 = string.Empty;
            string vColumn8 = string.Empty;
            string vColumn9 = string.Empty;
            string vColumn10 = string.Empty;
            DateTime vColumn11 = DateTime.MinValue;
            string vColumn12 = string.Empty;
            decimal vColumn13 = 0;
            decimal vColumn14 = 0;
            decimal vColumn15 = 0;
            decimal vColumn16 = 0;
            decimal vColumn17 = 0;
            decimal vColumn18 = 0;
            string vColumn19 = string.Empty;

            decimal vTempSerial = 0;
            DateTime vTempStartDateTime = DateTime.MinValue;
            decimal vTempStartingQuantity = 0;
            decimal vTempStartingAmount = 0;
            decimal vTempQuantity = 0;
            decimal vTempSubtotal = 0;
            string vTempCustomerName = string.Empty;
            string vTempVATRegistrationNo = string.Empty;
            string vTempAddress1 = string.Empty;
            string vTempTransID = string.Empty;
            DateTime vTemptransDate = DateTime.MinValue;
            string vTempProductName = string.Empty;
            decimal vTempSDAmount = 0;
            decimal vTempVATAmount = 0;
            string vTempremarks = string.Empty;
            string vTemptransType = string.Empty;

            decimal vClosingQuantity = 0;
            decimal vClosingAmount = 0;
            decimal vClosingAvgRatet = 0;

            decimal OpeningQty = 0;
            decimal OpeningAmnt = 0;
            decimal ProductionQty = 0;
            decimal ProductionAmnt = 0;
            decimal SaleQty = 0;
            decimal SaleAmnt = 0;
            decimal CloseQty = 0;
            decimal CloseAmnt = 0;

            decimal OpQty = 0;
            decimal OpAmnt = 0;
            decimal avgRate = 0;
            string HSCode = string.Empty;
            string ProductName = string.Empty;
            decimal vClosingQuantityNew = 0;
            decimal vClosingAmountNew = 0;
            decimal vUnitRate = 0;
            decimal vAdjustmentValue = 0;


            #endregion

            List<VAT_17VM> vat17s = new List<VAT_17VM>();
            VAT_17VM vat17 = new VAT_17VM();
            try
            {


                int i = 1;
                //if (rbtnWIP.Checked == false)
                if (true)
                {

                    //DataRow[] DetailRawsOpening = ReportResult.Tables[1].Select("transType='Opening'");
                    DataRow[] DetailRawsOpening = ReportResult.Tables[0].Select("transType='Opening'");

                    #region Opening
                    foreach (DataRow row in DetailRawsOpening)
                    {
                        ProductDAL productDal = new ProductDAL();
                        vTempremarks = row["remarks"].ToString().Trim();
                        vTemptransType = row["TransType"].ToString().Trim();
                        //vTemptransType = row["TransType"].ToString().Trim();
                        ProductName = row["ProductName"].ToString().Trim();
                        HSCode = row["HSCodeNo"].ToString().Trim();
                        string ItemNo = productDal.GetProductIdByName(ProductName);
                        vTempStartDateTime = Convert.ToDateTime(row["StartDateTime"].ToString().Trim());
                        decimal LastNBRPrice = productDal.GetLastNBRPriceFromBOM(ItemNo, Convert.ToDateTime(vTempStartDateTime).ToString("yyyy-MM-dd"), null, null);

                        //Convert.ToDecimal(dollerRate.ToString(), SalePlaceDollar));

                        decimal q11 = Convert.ToDecimal(row["Quantity"].ToString().Trim());
                        decimal q12 = Convert.ToDecimal(row["UnitCost"].ToString().Trim());
                        //OpQty = TCloseQty;//
                        //OpAmnt = TCloseAmnt;
                        OpQty = q11;//
                        OpAmnt = q12;//
                        vat17 = new VAT_17VM();

                        #region if row 1 Opening

                        OpeningQty = OpQty;
                        OpeningAmnt = OpAmnt;// OpQty* LastNBRPrice;
                        OpAmnt = 0;
                        OpQty = 0;

                        ProductionQty = 0;
                        ProductionAmnt = 0;
                        SaleQty = 0;
                        SaleAmnt = 0;

                        CloseQty =
                            (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                             Convert.ToDecimal(SaleQty));
                        CloseAmnt = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) -
                                     Convert.ToDecimal(SaleAmnt));
                        vColumn2 = vTempStartDateTime;
                        vColumn3 = Convert.ToDecimal(OpeningQty.ToString());
                        vColumn4 = Convert.ToDecimal(OpeningAmnt.ToString());
                        vColumn5 = 0; // Convert.ToDecimal(ProductionQty.ToString());
                        vColumn6 = 0; // Convert.ToDecimal(ProductionAmnt.ToString());
                        vColumn7 = "-";
                        vColumn8 = "-";
                        vColumn9 = "-";
                        vColumn10 = "-";
                        vColumn11 = DateTime.MinValue;
                        vColumn12 = "-";
                        vColumn13 = 0; // Convert.ToDecimal(SaleQty.ToString());
                        vColumn14 = 0; // Convert.ToDecimal(SaleAmnt.ToString());
                        vColumn15 = 0;
                        vColumn16 = 0;
                        vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                        vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());
                        vColumn19 = vTempremarks;
                        vUnitRate = Convert.ToDecimal(row["UnitRate"].ToString().Trim());
                        vClosingQuantityNew = vColumn17;
                        vClosingAmountNew = vColumn18;

                        vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                            Convert.ToDecimal(SaleQty));

                        if (vClosingQuantity == 0)
                        {
                            vClosingAmount = 0;
                            vClosingAvgRatet = 0;

                        }
                        else
                        {
                            vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) -
                                              Convert.ToDecimal(SaleAmnt));
                            vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));

                        }

                        #endregion


                        #region AssignValue to List

                        vat17.Column1 = i; //    i.ToString();      // Serial No   
                        vat17.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                        vat17.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                        vat17.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                        vat17.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                        vat17.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                        vat17.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                        vat17.Column8 = vColumn8;   //    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                        vat17.Column9 = vColumn9;   //    item["Address1"].ToString();      // Customer Address
                        vat17.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                        vat17.Column11 = vColumn11; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column11string = ""; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                        vat17.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                        vat17.Column14 = vColumn14; //    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                        vat17.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                        vat17.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                        vat17.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                        vat17.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                        vat17.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks


                        vat17s.Add(vat17);
                        i = i + 1;

                        #endregion AssignValue to List

                    }
                    #endregion Opening
                }


                //DataRow[] DetailRawsOthers = ReportResult.Tables[1].Select("transType<>'Opening'");
                DataRow[] DetailRawsOthers = ReportResult.Tables[0].Select("transType<>'Opening'");
                if (DetailRawsOthers == null || !DetailRawsOthers.Any())
                {
                    //MessageBox.Show("There is no data to preview", this.Text);
                    //return;
                    throw new ArgumentNullException();

                }
                //string strSort = "StartDateTime ASC, SerialNo ASC";
                string strSort = "CreatedDateTime ASC, SerialNo ASC";

                DataView dtview = new DataView(DetailRawsOthers.CopyToDataTable());
                dtview.Sort = strSort;
                DataTable dtsorted = dtview.ToTable();
                #region Process

                foreach (DataRow item in dtsorted.Rows)
                {
                    #region Get from Datatable

                    OpeningQty = 0;
                    OpeningAmnt = 0;
                    ProductionQty = 0;
                    ProductionAmnt = 0;
                    SaleQty = 0;
                    SaleAmnt = 0;
                    CloseQty = 0;
                    CloseAmnt = 0;

                    vColumn1 = i;
                    vTempStartDateTime = Convert.ToDateTime(item["StartDateTime"].ToString()); // Date
                    vTempStartingQuantity = Convert.ToDecimal(item["StartingQuantity"].ToString()); // Opening Quantity
                    vTempStartingAmount = Convert.ToDecimal(item["StartingAmount"].ToString()); // Opening Price
                    vTempQuantity = Convert.ToDecimal(item["Quantity"].ToString()); // Production Quantity
                    vTempSubtotal = Convert.ToDecimal(item["UnitCost"].ToString()); // Production Price
                    vTempCustomerName = item["CustomerName"].ToString(); // Customer Name
                    vTempVATRegistrationNo = item["VATRegistrationNo"].ToString(); // Customer VAT Reg No
                    vTempAddress1 = item["Address1"].ToString(); // Customer Address
                    vTempTransID = item["TransID"].ToString(); // Sale Invoice No
                    vTemptransDate = Convert.ToDateTime(item["StartDateTime"].ToString()); // Sale Invoice Date and Time
                    vTempProductName = item["ProductName"].ToString(); // Sale Product Name
                    vTempSDAmount = Convert.ToDecimal(item["SD"].ToString()); // SD Amount
                    vTempVATAmount = Convert.ToDecimal(item["VATRate"].ToString()); // VAT Amount
                    vTempremarks = item["remarks"].ToString(); // Remarks
                    vTemptransType = item["TransType"].ToString().Trim();

                    #region Bureau
                    //if (Program.IsBureau == true)
                    if (false)
                    {
                        ProductName = item["ProductName"].ToString().Trim();
                        HSCode = item["HSCodeNo"].ToString().Trim();
                    }

                    #endregion

                    #endregion Get from Datatable

                    if (vTemptransType.Trim() == "Sale")
                    {
                        vat17 = new VAT_17VM();
                        #region if row 1 Opening

                        if (vTempremarks.Trim() == "ServiceNS"
                           || vTempremarks.Trim() == "ServiceNSImport"
                           )
                        {
                            OpeningQty = 0;
                            OpeningAmnt = 0;
                        }
                        else
                        {
                            OpeningQty = OpQty + vClosingQuantity;
                            OpeningAmnt = OpAmnt + vClosingAmount;
                        }


                        OpAmnt = 0;
                        OpQty = 0;

                        ProductionQty = 0;
                        ProductionAmnt = 0;
                        SaleQty = vTempQuantity;
                        if (vTempremarks.Trim() == "TradingTender"
                            || vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Tender"
                            || vTempremarks.Trim() == "Export"
                            )
                        {
                            //SaleAmnt = vTempQuantity * vClosingAvgRatet;
                            SaleAmnt = vTempSubtotal;

                        }
                        else
                        {
                            SaleAmnt = vTempSubtotal;
                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Export")
                        { }
                        else
                        {
                            SaleAmnt = Convert.ToDecimal(SaleAmnt.ToString());
                        }


                        if (SaleQty == 0)
                        {
                            avgRate = 0;
                        }
                        else
                        {
                            avgRate = SaleAmnt / SaleQty;

                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Export")
                        { }
                        else
                        {
                            avgRate = Convert.ToDecimal(avgRate.ToString());
                        }
                        CloseQty =
                            (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                             Convert.ToDecimal(SaleQty));
                        CloseAmnt = CloseQty * avgRate;// (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                        vColumn2 = vTempStartDateTime;

                        string returnTransType = GetReturnType(itemNo, vTempremarks.Trim());

                        if (vTempremarks.Trim() == "ServiceNS"
                            || vTempremarks.Trim() == "ExportServiceNS"
                            || returnTransType == "ServiceNS"
                            )
                        {
                            vColumn3 = 0;
                            vColumn4 = 0;
                            vColumn5 = 0;
                            vColumn6 = 0;
                        }
                        else
                        {
                            vColumn3 = OpeningQty;// vClosingQuantityNew;// Convert.ToDecimal(OpeningQty.ToString());
                            vColumn4 = OpeningAmnt;// vClosingAmountNew;// Convert.ToDecimal(OpeningAmnt.ToString());

                            vColumn5 = 0;// Convert.ToDecimal(ProductionQty.ToString());
                            vColumn6 = 0;// Convert.ToDecimal(ProductionAmnt.ToString());
                        }
                        vColumn7 = vTempCustomerName;
                        vColumn8 = vTempVATRegistrationNo;
                        vColumn9 = vTempAddress1;
                        vColumn10 = vTempTransID;
                        vColumn11 = vTemptransDate;
                        vColumn12 = vTempProductName;
                        if (vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Export")
                        {
                            vColumn13 = SaleQty;
                            vColumn14 = SaleAmnt;
                        }
                        else
                        {
                            vColumn13 = Convert.ToDecimal(SaleQty.ToString());
                            vColumn14 = Convert.ToDecimal(SaleAmnt.ToString());
                        }
                        vColumn15 = vTempSDAmount;
                        vColumn16 = vTempVATAmount;
                        if (vTempremarks.Trim() == "ServiceNS"
                            || vTempremarks.Trim() == "ExportServiceNS"
                            || returnTransType == "ServiceNS"
                            )
                        {
                            vColumn17 = 0;
                            vColumn18 = 0;
                        }
                        else
                        {
                            vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                            vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());

                            //vColumn17 = Convert.ToDecimal(CloseQty.ToString());
                            //vColumn18 = Convert.ToDecimal(CloseAmnt.ToString());
                        }
                        vColumn19 = vTempremarks;
                        vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                            Convert.ToDecimal(SaleQty));

                        vClosingQuantityNew = vColumn17;
                        vClosingAmountNew = vColumn18;
                        vUnitRate = Convert.ToDecimal(item["UnitRate"].ToString().Trim());

                        if (vClosingQuantity == 0)
                        {
                            //Change at 29-04-14
                            //vClosingAmount = 0;
                            //vClosingAvgRatet = 0;
                            vClosingAmount = CloseAmnt;

                        }
                        else
                        {
                            //vClosingAmount = vClosingQuantity * avgRate;
                            vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                            if (vTempremarks.Trim() == "TradingTender"
                            || vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Tender"
                            || vTempremarks.Trim() == "Export"
                            )
                            {

                            }
                            else
                            {
                                vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));
                            }

                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                            || vTempremarks.Trim() == "ExportTender"
                            || vTempremarks.Trim() == "Export")
                        {

                        }
                        else
                        {
                            vClosingAvgRatet = Convert.ToDecimal(vClosingAvgRatet.ToString());
                        }
                        #endregion
                        #region AssignValue to List

                        vat17.Column1 = i; //    i.ToString();      // Serial No   
                        vat17.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                        vat17.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                        vat17.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                        vat17.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                        vat17.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                        vat17.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                        vat17.Column8 = vColumn8;//    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                        vat17.Column9 = vColumn9; //    item["Address1"].ToString();      // Customer Address
                        vat17.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                        vat17.Column11 = vColumn11;//    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column11string = Convert.ToDateTime(vColumn11).ToString("dd/MM/yy HH:mm"); //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                        vat17.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                        vat17.Column14 = vColumn14;//    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                        vat17.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                        vat17.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                        vat17.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                        vat17.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                        vat17.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks
                        if (vColumn18 != vColumn17 * vUnitRate)
                        {
                            //AutoAdjustment = true;
                            //vAdjustmentValue = vColumn18 - (vColumn17 * vUnitRate);
                            vAdjustmentValue = (vColumn17 * vUnitRate) - vColumn18;
                        }

                        vat17s.Add(vat17);
                        i = i + 1;

                        #endregion AssignValue to List

                        //// Service related company has no need auto adjustment
                        //if (Program.IsBureau == false)
                        if (true)
                        {
                            if (avgRate == vClosingAvgRatet)
                            {
                                //vat17s.Add(vat17);
                            }
                            //if (AutoAdjustment == true)
                            if (false)
                            {
                                #region SaleAdjustment
                                //if (avgRate != vClosingAvgRatet)
                                if (vColumn18 != vColumn17 * vUnitRate)
                                {

                                    decimal a = 0;
                                    decimal b = 0;
                                    if (vClosingQuantity == 0)
                                    {
                                        a = avgRate;          //1950
                                        b = vClosingAvgRatet; //1350
                                    }
                                    else
                                    {
                                        a = avgRate * vClosingQuantity;           //1950
                                        b = vClosingAvgRatet * vClosingQuantity; //1350

                                    }

                                    decimal c = b - a;// Convert.ToDecimal(b.ToString(),1)) - Convert.ToDecimal(a.ToString(),1));
                                    c = Convert.ToDecimal(c.ToString());
                                    //hide 0 value row
                                    if (c != 0)
                                    {
                                        VAT_17VM vat17Adj = new VAT_17VM();
                                        #region if row 1 Opening

                                        OpeningQty = OpQty + vClosingQuantity;
                                        OpeningAmnt = OpAmnt + vClosingAmount;
                                        OpAmnt = 0;
                                        OpQty = 0;

                                        ProductionQty = 0;
                                        ProductionAmnt = 0;
                                        SaleQty = 0;
                                        if (vTempremarks.Trim() == "TradingTender"
                                   || vTempremarks.Trim() == "ExportTradingTender"
                                   || vTempremarks.Trim() == "ExportTender"
                                   || vTempremarks.Trim() == "Tender"
                                            || vTempremarks.Trim() == "Export"
                                   )
                                        {
                                            if (vClosingQuantity == 0)
                                            {

                                                //SaleAmnt = (avgRate - vClosingAvgRatet) * vTempQuantity;
                                                SaleAmnt = (vClosingAvgRatet - avgRate) * vTempQuantity;
                                            }
                                            else
                                            {
                                                SaleAmnt = (vTempQuantity * vClosingAvgRatet) - vTempSubtotal;

                                            }
                                        }
                                        else
                                        {
                                            //SaleAmnt=(avgRate* vClosingQuantity)-(vClosingAvgRatet * vClosingQuantity);  
                                            if (vClosingQuantity == 0)
                                            {
                                                SaleAmnt = c * SaleQty;
                                            }
                                            else
                                            {
                                                SaleAmnt = c;
                                            }
                                        }
                                        if (vTempremarks.Trim() == "ExportTradingTender"
                                                || vTempremarks.Trim() == "ExportTender"
                                                || vTempremarks.Trim() == "Export"
                                        )
                                        {

                                        }
                                        else
                                        {
                                            SaleAmnt = Convert.ToDecimal(SaleAmnt.ToString());
                                        }


                                        //SaleAmnt = c;

                                        if (SaleQty == 0)
                                        {
                                            avgRate = 0;
                                        }
                                        else
                                        {
                                            avgRate = SaleAmnt / SaleQty;
                                        }
                                        if (vTempremarks.Trim() == "ExportTradingTender"
                                             || vTempremarks.Trim() == "ExportTender"
                                             || vTempremarks.Trim() == "Export")
                                        {

                                        }
                                        else
                                        {
                                            avgRate = Convert.ToDecimal(avgRate.ToString());
                                        }
                                        CloseQty =
                                            (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                             Convert.ToDecimal(SaleQty));

                                        CloseAmnt = CloseQty * avgRate;// (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                                        vColumn2 = vTempStartDateTime;
                                        vColumn3 = vClosingQuantityNew;// Convert.ToDecimal(OpeningQty.ToString());
                                        vColumn4 = vClosingAmountNew;// Convert.ToDecimal(OpeningAmnt.ToString());
                                        vColumn5 = 0;// Convert.ToDecimal(ProductionQty.ToString());
                                        vColumn6 = 0;//Convert.ToDecimal(ProductionAmnt.ToString());
                                        vColumn7 = vTempCustomerName;
                                        vColumn8 = vTempVATRegistrationNo;
                                        vColumn9 = vTempAddress1;
                                        vColumn10 = vTempTransID;
                                        vColumn11 = vTemptransDate;
                                        vColumn12 = vTempProductName;
                                        if (vTempremarks.Trim() == "ExportTradingTender"
                                            || vTempremarks.Trim() == "ExportTender"
                                            || vTempremarks.Trim() == "Export")
                                        {
                                            vColumn13 = 0;
                                            vColumn14 = vAdjustmentValue;//;
                                        }
                                        else
                                        {
                                            vColumn13 = 0;// Convert.ToDecimal(SaleQty.ToString());
                                            vColumn14 = Convert.ToDecimal(vAdjustmentValue.ToString());
                                        }
                                        vColumn15 = 0;
                                        vColumn16 = 0;
                                        vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                                        vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());

                                        vClosingQuantityNew = vColumn17;
                                        vClosingAmountNew = vColumn18;

                                        //vColumn17 = Convert.ToDecimal(CloseQty.ToString());
                                        //vColumn18 = Convert.ToDecimal(CloseAmnt.ToString());
                                        vColumn19 = "SaleAdjustment";
                                        //vClosingAmount = vClosingQuantity * avgRate;

                                        vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) - Convert.ToDecimal(SaleQty));
                                        if (vClosingQuantity == 0)
                                        {
                                            vClosingAmount = 0;
                                            vClosingAvgRatet = 0;
                                        }
                                        else
                                        {
                                            vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) -
                                                              Convert.ToDecimal(SaleAmnt));
                                            vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));
                                        }

                                        #endregion
                                        #region AssignValue to List

                                        vat17Adj.Column1 = i; //    i.ToString();      // Serial No   
                                        vat17Adj.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                                        vat17Adj.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                                        vat17Adj.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                                        vat17Adj.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                                        vat17Adj.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                                        vat17Adj.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                                        vat17Adj.Column8 = vColumn8;//    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                                        vat17Adj.Column9 = vColumn9; //    item["Address1"].ToString();      // Customer Address
                                        vat17Adj.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                                        vat17Adj.Column11 = vColumn11;//    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                                        vat17Adj.Column11string = Convert.ToDateTime(vColumn11).ToString("dd/MM/yy HH:mm"); //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                                        vat17Adj.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                                        vat17Adj.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                                        vat17Adj.Column14 = vColumn14;//    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                                        vat17Adj.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                                        vat17Adj.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                                        vat17Adj.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                                        vat17Adj.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                                        vat17Adj.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks


                                        //vat17.Column18 = vat17.Column18 + vat17Adj.Column6;
                                        //vat17s.Add(vat17);

                                        vat17Adj.Column4 = vat17.Column18;
                                        vat17s.Add(vat17Adj);
                                        //AutoAdjustment = false;

                                        i = i + 1;


                                        #endregion AssignValue to List
                                    }
                                }
                                #endregion SaleAdjustment
                            }

                        }
                    }
                    else if (vTemptransType == "Receive")
                    {
                        vat17 = new VAT_17VM();

                        #region if row 1 Opening

                        OpeningQty = OpQty + vClosingQuantity;
                        OpeningAmnt = OpAmnt + vClosingAmount;
                        OpAmnt = 0;
                        OpQty = 0;

                        ProductionQty = vTempQuantity;
                        ProductionAmnt = vTempSubtotal;
                        SaleQty = 0;
                        SaleAmnt = 0;
                        if (ProductionQty == 0)
                        {
                            avgRate = 0;
                        }
                        else
                        {
                            avgRate = ProductionAmnt / ProductionQty;

                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                                   || vTempremarks.Trim() == "ExportTender"
                                   || vTempremarks.Trim() == "Export")
                        {

                        }
                        else
                        {
                            avgRate = Convert.ToDecimal(avgRate.ToString());
                        }
                        CloseQty =
                            (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                             Convert.ToDecimal(SaleQty));
                        CloseAmnt = CloseQty * avgRate;// (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                        vColumn2 = vTempStartDateTime;
                        vColumn3 = vClosingQuantityNew;// Convert.ToDecimal(OpeningQty.ToString());
                        vColumn4 = vClosingAmountNew;// Convert.ToDecimal(OpeningAmnt.ToString());
                        vColumn5 = Convert.ToDecimal(ProductionQty.ToString());
                        vColumn6 = Convert.ToDecimal(ProductionAmnt.ToString());
                        vColumn7 = "-";
                        vColumn8 = "-";
                        vColumn9 = "-";
                        vColumn10 = "-";
                        vColumn11 = Convert.ToDateTime("1900/01/01");
                        vColumn12 = "-";
                        vColumn13 = 0;
                        vColumn14 = 0;
                        vColumn15 = 0;
                        vColumn16 = 0;
                        vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                        vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());
                        vClosingQuantityNew = vColumn17;
                        vClosingAmountNew = vColumn18;
                        vUnitRate = Convert.ToDecimal(item["UnitRate"].ToString().Trim());
                        //vColumn17 = Convert.ToDecimal(CloseQty.ToString());
                        //vColumn18 = Convert.ToDecimal(CloseAmnt.ToString());
                        vColumn19 = vTempremarks;

                        vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                            Convert.ToDecimal(SaleQty));
                        if (vClosingQuantity == 0)
                        {
                            vClosingAmount = 0;
                            vClosingAvgRatet = 0;

                        }
                        else
                        {
                            //vClosingAmount = vClosingQuantity * avgRate;

                            vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                            if (vTempremarks.Trim() == "TradingTender"
                           || vTempremarks.Trim() == "ExportTradingTender"
                           || vTempremarks.Trim() == "ExportTender"
                           || vTempremarks.Trim() == "Tender"
                           || vTempremarks.Trim() == "Export"
                           )
                            {
                                // change at 20150324 for Nita requierment
                                vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) /
                                                     Convert.ToDecimal(vClosingQuantity));
                            }
                            else
                            {
                                vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) /
                                                    Convert.ToDecimal(vClosingQuantity));
                            }

                        }
                        if (vTempremarks.Trim() == "ExportTradingTender"
                                    || vTempremarks.Trim() == "ExportTender"
                                    || vTempremarks.Trim() == "Export")
                        {

                        }
                        else
                        {
                            vClosingAvgRatet = Convert.ToDecimal(vClosingAvgRatet.ToString());
                        }
                        #endregion

                        #region AssignValue to List

                        vat17.Column1 = i; //    i.ToString();      // Serial No   
                        vat17.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                        vat17.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                        vat17.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                        vat17.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                        vat17.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                        vat17.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                        vat17.Column8 = vColumn8;   //    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                        vat17.Column9 = vColumn9;   //    item["Address1"].ToString();      // Customer Address
                        vat17.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                        vat17.Column11 = vColumn11; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column11string = ""; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                        vat17.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                        vat17.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                        vat17.Column14 = vColumn14; //    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                        vat17.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                        vat17.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                        vat17.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                        vat17.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                        vat17.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks


                        vat17s.Add(vat17);
                        i = i + 1;
                        if (vColumn18 != vColumn17 * vUnitRate)
                        {
                            //AutoAdjustment = true;
                            vAdjustmentValue = (vColumn17 * vUnitRate) - vColumn18;
                        }

                        #endregion AssignValue to List

                        //if (avgRate == vClosingAvgRatet)
                        //{
                        //    vat17s.Add(vat17);
                        //}
                        //if (AutoAdjustment == true)
                        if (false)
                        {
                            #region ProductionAdjustment


                            //if (avgRate != vClosingAvgRatet)
                            if (vColumn18 != vColumn17 * vUnitRate)
                            {
                                //vColumn4
                                //vClosingAvgRatet = vColumn4 / vColumn3;
                                //decimal x = vColumn4 / vColumn3;
                                decimal a = avgRate * vClosingQuantity;         //7200
                                decimal b = vClosingAvgRatet * vClosingQuantity;//7300
                                decimal c = a - b;
                                //  b = x * vClosingQuantity;//7300
                                //c = a - b;
                                if (vTempremarks.Trim() == "TradingTender"
                              || vTempremarks.Trim() == "ExportTradingTender"
                              || vTempremarks.Trim() == "ExportTender"
                              || vTempremarks.Trim() == "Tender"
                              || vTempremarks.Trim() == "Export"
                              )
                                {
                                    c = (vClosingAvgRatet - avgRate) * ProductionQty;
                                }
                                if (vTempremarks.Trim() == "ExportTradingTender"
                                       || vTempremarks.Trim() == "ExportTender"
                                       || vTempremarks.Trim() == "Export")
                                {

                                }
                                else
                                {
                                    c = Convert.ToDecimal(c.ToString());
                                }
                                //hide 0 value row
                                if (c != 0)
                                {
                                    VAT_17VM vat17Adj = new VAT_17VM();

                                    #region if row 1 Opening

                                    OpeningQty = OpQty + vClosingQuantity;
                                    OpeningAmnt = OpAmnt + vClosingAmount;
                                    OpAmnt = 0;
                                    OpQty = 0;

                                    ProductionQty = 0;
                                    ProductionAmnt = c;
                                    SaleQty = 0;
                                    SaleAmnt = 0;
                                    CloseQty =
                                        (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                         Convert.ToDecimal(SaleQty));
                                    CloseAmnt = avgRate * vClosingQuantity;// (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                                    vColumn2 = vTempStartDateTime;
                                    vColumn3 = vClosingQuantityNew;// Convert.ToDecimal(OpeningQty.ToString());
                                    vColumn4 = vClosingAmountNew;// Convert.ToDecimal(OpeningAmnt.ToString());
                                    vColumn5 = Convert.ToDecimal(ProductionQty.ToString());
                                    vColumn6 = vAdjustmentValue;// vColumn18 - vColumn4;// Convert.ToDecimal(ProductionAmnt.ToString());
                                    vColumn7 = "-";
                                    vColumn8 = "-";
                                    vColumn9 = "-";
                                    vColumn10 = "-";
                                    vColumn11 = Convert.ToDateTime("1900/01/01");
                                    vColumn12 = "-";
                                    vColumn13 = 0;
                                    vColumn14 = 0;
                                    vColumn15 = 0;
                                    vColumn16 = 0;
                                    vColumn17 = Convert.ToDecimal((vColumn3 + vColumn5 - vColumn13).ToString());// Convert.ToDecimal(CloseQty.ToString());
                                    vColumn18 = Convert.ToDecimal((vColumn4 + vColumn6 - vColumn14).ToString());// Convert.ToDecimal(CloseAmnt.ToString());
                                    vClosingQuantityNew = vColumn17;
                                    vClosingAmountNew = vColumn18;
                                    //vColumn17 = Convert.ToDecimal(CloseQty.ToString());
                                    //vColumn18 = Convert.ToDecimal(CloseAmnt.ToString());
                                    vColumn19 = "ProductionAdjustment";

                                    vClosingQuantity = (Convert.ToDecimal(OpeningQty) + Convert.ToDecimal(ProductionQty) -
                                                        Convert.ToDecimal(SaleQty));
                                    if (vClosingQuantity == 0)
                                    {
                                        vClosingAmount = 0;
                                        vClosingAvgRatet = 0;

                                    }
                                    else
                                    {
                                        //vClosingAmount = vClosingQuantity * avgRate;
                                        vClosingAmount = (Convert.ToDecimal(OpeningAmnt) + Convert.ToDecimal(ProductionAmnt) - Convert.ToDecimal(SaleAmnt));
                                        vClosingAvgRatet = (Convert.ToDecimal(vClosingAmount) / Convert.ToDecimal(vClosingQuantity));

                                    }

                                    #endregion

                                    #region AssignValue to List

                                    vat17Adj.Column1 = i; //    i.ToString();      // Serial No   
                                    vat17Adj.Column2 = vColumn2; //    item["StartDateTime"].ToString();      // Date
                                    vat17Adj.Column3 = vColumn3; //    item["StartingQuantity"].ToString();      // Opening Quantity
                                    vat17Adj.Column4 = vColumn4; //    item["StartingAmount"].ToString();      // Opening Price
                                    vat17Adj.Column5 = vColumn5; //    item["Quantity"].ToString();      // Production Quantity
                                    vat17Adj.Column6 = vColumn6; //    item["UnitCost"].ToString();      // Production Price
                                    vat17Adj.Column7 = vColumn7; //    item["CustomerName"].ToString();      // Customer Name
                                    vat17Adj.Column8 = vColumn8;
                                    //    item["VATRegistrationNo"].ToString();      // Customer VAT Reg No
                                    vat17Adj.Column9 = vColumn9; //    item["Address1"].ToString();      // Customer Address
                                    vat17Adj.Column10 = vColumn10; //    item["TransID"].ToString();      // Sale Invoice No
                                    vat17Adj.Column11 = vColumn11;//    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                                    vat17Adj.Column11string = ""; //    item["StartDateTime"].ToString();      // Sale Invoice Date and Time
                                    vat17Adj.Column12 = vColumn12; //    item["ProductName"].ToString();      // Sale Product Name
                                    vat17Adj.Column13 = vColumn13; //    item["Quantity"].ToString();      // Sale Product Quantity
                                    vat17Adj.Column14 = vColumn14;
                                    //    item["UnitCost"].ToString();      // Sale Product Sale Price(NBR Price with out VAT and SD amount)
                                    vat17Adj.Column15 = vColumn15; //    item["SD"].ToString();      // SD Amount
                                    vat17Adj.Column16 = vColumn16; //    item["VATRate"].ToString();      // VAT Amount
                                    vat17Adj.Column17 = vColumn17; //    item["StartDateTime"].ToString();      // Closing Quantity
                                    vat17Adj.Column18 = vColumn18; //    item["StartDateTime"].ToString();      // Closing Amount
                                    vat17Adj.Column19 = vColumn19; //    item["remarks"].ToString();      // Remarks



                                    //vat17.Column18 = vat17.Column18 + vat17Adj.Column6;
                                    //vat17s.Add(vat17);
                                    //vat17Adj.Column4 = vat17.Column18;
                                    vat17s.Add(vat17Adj);
                                    i = i + 1;

                                    #endregion AssignValue to List
                                }
                            }
                            #endregion ProductionAdjustment
                        }

                    }

                }

                #endregion Process
            }
            catch (Exception ex)
            {
                vat17s = new List<VAT_17VM>();
            }
            finally
            {

            }
            return vat17s;
        }

        public DataSet VAT17New(string ItemNo, string StartDate, string EndDate, string post1, string post2)
        {
            //Delete all #VAT_17_0 information. It is not necessary for calculation. 
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");


            #endregion

            #region Try

            try
            {
                #region vat19 value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT19", "ExportInBDT");

                #endregion vat19 value

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string IsExport = "No";

                if (vExportInBDT == "N")
                {
                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
                    sqlText += "from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
                    sqlText += "where p.ItemNo =@ItemNo";

                    SqlCommand cmd = new SqlCommand(sqlText, currConn);
                    cmd.Parameters.AddWithValue("@ItemNo", ItemNo);

                    object objItemNo = cmd.ExecuteScalar();
                    if (objItemNo == null)
                        IsExport = "No";
                    else
                        IsExport = objItemNo.ToString();
                }


                var top = "";
                sqlText = " ";


                #region SQL

                sqlText += @"
                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(2);
--DECLARE @post2 VARCHAR(2);
--DECLARE @ItemNo VARCHAR(20);

--DECLARE @IsExport VARCHAR(20);
--SET @IsExport ='No';

--SET @Itemno='24';
--SET @post1='Y';
--SET @post2='N';
--SET @StartDate='2014-04-01';
--SET @EndDate= '2014-04-27';

 

             
declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;


CREATE TABLE #VAT_17(
SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
 StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
 StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
 SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
 UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9))

CREATE TABLE #VATTemp_17(SerialNo  varchar (2) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
 TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
 Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL, UnitRate decimal(25,9)) 
 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Receive',rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD 
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('Other')

---- Only for wastage 
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount,rd.SDAmount,'Receive',rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD 
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND rd.TransactionType IN('Wastage')
------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select  'A1',rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('TollFinishReceive')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('Tender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
-CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
-isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),-rd.VATAmount
,-rd.SDAmount,RD.TransactionType,rd.CreatedOn,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ReceiveReturn')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('TollReceive')


insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('Service')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ExportService')


insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0)
,isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('Trading')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0)
,isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('PackageProduction')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ExportTradingTender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('ExportTrading')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,RD.TransactionType,rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('TradingTender')
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', rd.ReceiveDateTime,rd.ReceiveNo,'Receive',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(rd.DollerValue,0) ELSE isnull(rd.SubTotal,0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),rd.VATAmount
,rd.SDAmount,'Transfer',rd.ReceiveDateTime,CostPrice
from ReceiveDetails RD
where rd.ReceiveDateTime >= @StartDate and rd.ReceiveDateTime <DATEADD(d,1,@EndDate) 
and rd.ItemNo=@ItemNo 
AND (Quantity>0)
AND (rd.Post =@post1 or rd.Post= @post2)
AND RD.TransactionType IN('InternalIssue')

-- Add by ruba for internalsale,Service Stock and trading(20140316)

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'A1', InvoiceDateTime,SalesInvoiceNo,'Receive',@ItemNo,
-CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
- ( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity,-VATAmount,-SDAmount,TransactionType,CreatedOn,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
----


------end receive--------
------start Sale--------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Sale',InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Other')

------Only for Wastage
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Sale',InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Wastage')

------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('PackageSale')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('PackageProduction')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Service')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ServiceNS')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Trading')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TradingTender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(CurrencyValue,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue*VATRate/100,0),0) ELSE isnull(NULLIF(CurrencyValue*VATRate/100,0),0) END AS VATRate, 
SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Export')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(CurrencyValue,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue*VATRate/100,0),0) ELSE isnull(NULLIF(CurrencyValue*VATRate/100,0),0) END AS VATRate, 
SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportService')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(CurrencyValue,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue*VATRate/100,0),0) ELSE isnull(NULLIF(CurrencyValue*VATRate/100,0),0) END AS VATRate, 
SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportTrading')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(CurrencyValue,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue*VATRate/100,0),0) ELSE isnull(NULLIF(CurrencyValue*VATRate/100,0),0) END AS VATRate, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue*SD/100,0),0) ELSE isnull(NULLIF(CurrencyValue*SD/100,0),0) END AS SD, 
TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportTradingTender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(CurrencyValue,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue*VATRate/100,0),0) ELSE isnull(NULLIF(CurrencyValue*VATRate/100,0),0) END AS VATRate, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue*SD/100,0),0) ELSE isnull(NULLIF(CurrencyValue*SD/100,0),0) END AS SD, 
TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportPackage')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(CurrencyValue,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue*VATRate/100,0),0) ELSE isnull(NULLIF(CurrencyValue*VATRate/100,0),0) END AS VATRate, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue*SD/100,0),0) ELSE isnull(NULLIF(CurrencyValue*SD/100,0),0) END AS SD, 
TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ExportTender')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo, 
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Tender')

--Ruba
insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,CreatedOn,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
-CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
- (  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end  )Quantity,-VATAmount,-SDAmount,TransactionType,CreatedOn,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TollFinishIssue')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,TransactionType,InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ServiceStock')

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', InvoiceDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull(NULLIF(DollerValue,0),0) ELSE isnull(NULLIF(SubTotal,0),0) END AS SubTotal, 
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,VATAmount,SDAmount,'Transfer',InvoiceDateTime,NBRPrice
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('InternalIssue')

----Add for TollReceive
--insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
--select 'B1',id.IssueDateTime,id.IssueNo,'Sale',@ItemNo,
--isnull(id.subtotal,0) ,isnull(id.UOMQty,0) ,
--id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
--from IssueDetails id   where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
--and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
--AND id.TransactionType IN('TollReceiveReturn') 

------end sale--------
------Start Disposee--------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select 'B1', DisposeDetails.DisposeDate,DisposeDetails.DisposeNumber,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(DollarPrice,0),0) ELSE isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0) END AS SubTotal,
isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,sih.TransactionType,DisposeDetails.DisposeDate,RealPrice
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >= @StartDate and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)

AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT27') and sih.FromStock in ('Y')

------end Disposee--------

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate


insert into #VATTemp_17(SerialNo,Dailydate,TransID,VATRate,SD,remarks,TransType,ItemNo,Quantity,UnitCost)
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo,
 SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  

UNION ALL 

(SELECT @itemNo ItemNo,isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
 FROM ReceiveDetails WHERE Post='Y'  AND ReceiveDateTime< @StartDate   
  and TransactionType not IN('ReceiveReturn') AND ItemNo = @itemNo ) 
UNION ALL
(SELECT @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,
-CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM ReceiveDetails WHERE Post='Y'  AND ReceiveDateTime< @StartDate   
 and TransactionType IN('ReceiveReturn') AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,
-CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM SalesInvoiceDetails   WHERE Post='Y' AND InvoiceDateTime< @StartDate     
AND TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','Trading','TradingTender','Tender','Debit','TollFinishIssue','ServiceStock','InternalIssue') AND ItemNo = @itemNo )  
UNION ALL  
(SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0) SaleExpQuantity,
-CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(CurrencyValue,0)),0) END AS SubTotal
FROM SalesInvoiceDetails   WHERE Post='Y' AND InvoiceDateTime< @StartDate      
AND TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender') AND ItemNo = @itemNo )  
UNION ALL
(SELECT @itemNo ItemNo,isnull(sum( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ),0) SaleCreditQuantity,
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(DollerValue,0)),0) ELSE isnull(sum(isnull(SubTotal,0)),0) END AS SubTotal
FROM SalesInvoiceDetails   WHERE Post='Y' AND InvoiceDateTime< @StartDate    
 AND TransactionType in( 'Credit') AND ItemNo = @itemNo )
UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
CASE WHEN @IsExport='Yes' THEN isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(DollarPrice,0)),0) ELSE isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0) END 
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber  
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y'))    

) AS a GROUP BY a.ItemNo

insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime,UnitRate)
select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime, UnitRate  
from #VATTemp_17
order by dailydate,SerialNo;

update #VAT_17 set 
CustomerID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
and #VAT_17.TransType='Sale'
AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)

select #VAT_17.SerialNo,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime,
#VAT_17.StartingQuantity,#VAT_17.StartingAmount,
#VAT_17.TransID,#VAT_17.TransType,
isnull(c.CustomerName,'-')CustomerName,
isnull(c.Address1,'-')Address1,isnull(c.Address2,'-')Address2,
isnull(c.Address3,'-')Address3,
isnull(c.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,isnull(p.HSCodeNo,'NA')HSCodeNo,#VAT_17.Quantity,#VAT_17.VATRate
,#VAT_17.SD,#vat_17.UnitCost,remarks
,isnull(#vat_17.CreatedDateTime,@StartDate)CreatedDateTime, isnull(#vat_17.UnitRate ,0)UnitRate 
from #VAT_17  left outer JOIN 
Customers as C on #VAT_17.CustomerID=c.CustomerID left outer join 
Products P on #VAT_17.ItemNo=p.ItemNo

order by CreatedDateTime,SerialNo

DROP TABLE #VAT_17
DROP TABLE #VATTemp_17

                ";

                #endregion SQL



                top = "A";




                #region SQL Command

                SqlCommand objCommVAT17 = new SqlCommand();

                objCommVAT17.Connection = currConn;

                objCommVAT17.CommandText = sqlText;
                objCommVAT17.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommVAT17.Parameters.Contains("@IsExport"))
                {
                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
                }
                else
                {
                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
                }

                if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT17.Parameters["@ItemNo"].Value = ItemNo;
                }

                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = StartDate;
                }
                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = EndDate;
                }

                //if (!objCommVAT17.Parameters.Contains("@StartDate_0"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@StartDate_0", StartDate_0);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@StartDate_0"].Value = StartDate_0;
                //}
                //if (!objCommVAT17.Parameters.Contains("@EndDate_0"))
                //{
                //    objCommVAT17.Parameters.AddWithValue("@EndDate_0", EndDate_0);
                //}
                //else
                //{
                //    objCommVAT17.Parameters["@EndDate_0"].Value = EndDate_0;
                //}

                if (!objCommVAT17.Parameters.Contains("@post1"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT17.Parameters["@post1"].Value = post1;
                }
                if (!objCommVAT17.Parameters.Contains("@post2"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT17.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT18New(string UserName, string StartDate, string EndDate, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                CommonDAL commonDal = new CommonDAL();
                decimal WareHouseRentPerQuantity = 0;
                bool CommercialImporter = false;
                var vWareHouseRentPerQuantity = commonDal.settings("Sale", "WareHouseRentPerQuantity");
                var vCommercialImporter = commonDal.settings("Sale", "CommercialImporter");

                if (!string.IsNullOrEmpty(vWareHouseRentPerQuantity))
                    WareHouseRentPerQuantity = Convert.ToDecimal(vWareHouseRentPerQuantity);

                if (!string.IsNullOrEmpty(vCommercialImporter))
                    CommercialImporter = Convert.ToString(vCommercialImporter) == "Y" ? true : false;

                string gototop = string.Empty;

                #region statement
                // Delete all tarrife type info.
                sqlText = @"
DECLARE @CommercialImporter VARCHAR(200);
DECLARE @WareHouseRentPerQuantity decimal(18,2);
";
                sqlText += @" set @WareHouseRentPerQuantity='" + WareHouseRentPerQuantity + "' ";

                sqlText += @"
--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2015-03-01'
--SET @EndDate='2015-03-25'
--SET @post1='Y';
--SET @post2='N';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL


SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
--where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')

UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceStock','Service','TradingTender','Tender','Debit','InternalIssue','TollFinishIssue','PackageSale','PackageProduction','ServiceNS','Wastage')
";
                if (CommercialImporter)
                {
                    sqlText += @" 
UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.Quantity),0)*@WareHouseRentPerQuantity*15/100 Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Trading')
";
                }
                else
                {
                    sqlText += @" 
UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Trading')
";
                }
                sqlText += @" 
 
UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

SELECT 'Z9' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('debit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')

--add by ruba for calculating ATVAmount of InputServiceImport

UNION ALL
SELECT 'Z15' Sl ,   isnull(sum(PID.ATVAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')

UNION ALL
SELECT  'Z16' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

UNION ALL

select 'Z17' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

UNION ALL

select 'Z18' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury-Credit')


----close
)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,-isnull(DepositAmount,0),'TreasuryCredit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury-Credit')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Sale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Other','Wastage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
 

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Service',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Service')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
";
                if (CommercialImporter)
                {
                    sqlText += @" 
insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.Quantity),0)*@WareHouseRentPerQuantity*15/100,'Trading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
";
                }
                else
                {
                    sqlText += @" 
insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Trading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo
";
                }
                sqlText += @" 
insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TradingTender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'Export',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Export')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportService',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportService')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTrading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTrading')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTradingTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Tender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Tender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Transfer',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('InternalIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Debit',
0,isnull(sum(SID.VATAmount),0),'Debit',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Debit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TollFinishIssue',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TollFinishIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceStock',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceStock')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageSale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageSale')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageProduction',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageProduction')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ExportPackage',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportPackage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Credit',
0,isnull(sum(SID.VATAmount),0),'Credit',SalesInvoiceNo 
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


--add by Ruba for calculating ATVAmount of Import Purchases

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

-------close

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'DDB',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat<>0 ) AND Remarks<>'Opening'

UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where Remarks in ('CreditPayble','ShortageRebatable','TreasuryCredit') AND (vat < 0)

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18

                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;


                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }
                //if (!objCommVAT18.Parameters.Contains("@PVat"))
                //{ objCommVAT18.Parameters.AddWithValue("@PVat", PVat); }
                //else { objCommVAT18.Parameters["@PVat"].Value = PVat; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT18_OldFormat(string UserName, string StartDate, string EndDate, string post1, string post2)
        {
            // Format before 30 June 2014
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gototop = string.Empty;

                #region statement

                //                sqlText = @"
                //
                //";

                #endregion statement

                #region statement

                sqlText = @"
                

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2013/10/01'
--SET @EndDate='2013/10/31'
--SET @post1='Y';
--SET @post2='Y';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL


SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')
UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceStock','Service','Trading','TradingTender','Tender','Debit','InternalIssue','TollFinishIssue','PackageSale','PackageProduction','ServiceNS')


UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')

--add by ruba for calculating ATVAmount of InputServiceImport

UNION ALL
SELECT 'Z15' Sl ,   isnull(sum(PID.ATVAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')

UNION ALL
SELECT  'Z16' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')


---close
)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)



insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Sale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Other')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Service',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Service')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Trading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TradingTender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'Export',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Export')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportService',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportService')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTrading',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTrading')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTradingTender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTradingTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Tender',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Tender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Transfer',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('InternalIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Debit',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Debit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TollFinishIssue',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TollFinishIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceStock',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceStock')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageSale',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageSale')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageProduction',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageProduction')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ExportPackage',SalesInvoiceNo
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportPackage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Sale',0,SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Sale',0,SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SID.SalesInvoiceNo,'Purchase',
0,isnull(sum(SID.VATAmount),0),'Credit',SalesInvoiceNo 
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

--add by Ruba for calculating ATVAmount of Import Purchases

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

-------close

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'B1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Purchase',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'B1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'Purchase',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat>0 ) AND Remarks<>'Opening'

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18


                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }
                //if (!objCommVAT18.Parameters.Contains("@PVat"))
                //{ objCommVAT18.Parameters.AddWithValue("@PVat", PVat); }
                //else { objCommVAT18.Parameters["@PVat"].Value = PVat; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet SD_Data(string UserName, string StartDate, string EndDate, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region SQL Statement

                sqlText = @"


";

                #endregion

                #region SQL Statement

                sqlText = @"

--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='05/01/2013';
--SET @EndDate='05/31/2013';
--SET @post1='Y';
--SET @post2='Y';

declare @PVat [decimal](25, 9);
CREATE TABLE #VAT_SDDep(	[StartDateTime] [datetime] NULL,[ReceiveDate] [datetime] NULL,	
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,	
[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL) 

SET @PVat=0;
select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0) Amt from  SDDeposits 
WHERE REPLACE(TransactionType,' ','') IN('Treasury-Opening')
AND (Post =@post1 or Post= @post2)
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0) Amt from  SDDeposits 
where DepositDateTime <  @StartDate AND TransactionType IN('Treasury') 
AND (Post =@post1 or Post= @post2)
UNION ALL
SELECT  'Z3' Sl ,  isnull(sum( SID.SDAmount) ,0) Amt    from  SalesInvoiceDetails SID
where SID.invoicedatetime <   @StartDate 
AND SID.TransactionType IN('Credit')
AND (SID.Post =@post1 or SID.Post= @post2)
UNION ALL
SELECT  'Z4' Sl , -isnull(sum( SID.SDAmount) ,0)  Amt   from  SalesInvoiceDetails SID
where SID.invoicedatetime <   @StartDate 
AND SID.TransactionType IN('Other','ServiceStock','Service','Trading','TradingTender','Tender','Debit'
,'InternalIssue','TollFinishIssue','PackageSale','ServiceNS')

AND (SID.Post =@post1 or SID.Post= @post2)
UNION ALL

SELECT 'Z5' Sl ,  -isnull(sum( SID.SDAmount) ,0) Amt    from  SalesInvoiceDetails SID
where SID.invoicedatetime <   @StartDate 
AND SID.TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender'
,'ExportTrading','ExportTradingTender','ExportPackage')
AND (SID.Post =@post1 or SID.Post= @post2)

UNION ALL

select 'Z6' Sl ,-isnull(sum(DepositAmount),0) Amt from  SDDeposits 
WHERE REPLACE(TransactionType,' ','') IN('Treasury-Opening-Credit')
AND (Post =@post1 or Post= @post2)

UNION ALL

select 'Z7' Sl ,-isnull(sum(DepositAmount),0) Amt from  SDDeposits 
where DepositDateTime <  @StartDate AND TransactionType IN('Treasury-Credit') 
AND (Post =@post1 or Post= @post2)

)AS a 

insert into #VAT_SDDep( StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
values(@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening')

insert into #VAT_SDDep(    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks)
select     DepositDateTime DepositDateTime, DepositDateTime ,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit'
from  SDDeposits    where DepositDateTime >=@StartDate and DepositDateTime < DATEADD(d,1, @EndDate)
AND TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)

insert into #VAT_SDDep(    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks)
select     DepositDateTime DepositDateTime, DepositDateTime ,
depositId,'Deposit',0,-isnull(DepositAmount,0),'Credit Deposit'
from  SDDeposits    where DepositDateTime >=@StartDate and DepositDateTime < DATEADD(d,1, @EndDate)
AND TransactionType IN('Treasury-Credit')
AND (Post =@post1 or Post= @post2)

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Sale'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Other')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo


insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct  SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Service'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Service') 
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Trading'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Trading')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'TradingTender'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('TradingTender')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo


insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'Export'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportService'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportService')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportServiceNS'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportServiceNS')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct  SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportTender'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportTender')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime , SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct  SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportTrading'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportTrading')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportTradingTender'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportTradingTender')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct   SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.CurrencyValue*SID.SD/100),0),'ExportPackage'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ExportPackage')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo


insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Tender'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Tender')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'PackageSale'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('PackageSale')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo


insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'ServiceNS'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ServiceNS')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct  SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Transfer'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('InternalIssue')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Debit'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Debit')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'TollFinishIssue'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('TollFinishIssue')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.SDAmount),0),'Service'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('ServiceStock')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo

insert into #VAT_SDDep(StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks)
select    distinct    SID.InvoiceDateTime ,
 SID.InvoiceDateTime InvoiceDateTime,SID.SalesInvoiceNo,'Purchase',
0,isnull(sum(SID.SDAmount),0),'Credit'
from  SalesInvoiceDetails SID  
where sid.invoicedatetime >=@StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Credit')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY  SID.InvoiceDateTime,SID.InvoiceDateTime ,SID.SalesInvoiceNo


select StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
select     #VAT_SDDep.StartDateTime StartDateTime,
 #VAT_SDDep.ReceiveDate  ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_SDDep   where   Remarks='Opening'

UNION ALL

select     #VAT_SDDep.StartDateTime StartDateTime,
 #VAT_SDDep.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_SDDep    where   (vat>0 ) AND Remarks<>'Opening'

UNION all

select   #VAT_SDDep.StartDateTime StartDateTime,
 #VAT_SDDep.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_SDDep    where  Remarks IN ('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0

UNION ALL

select     #VAT_SDDep.StartDateTime StartDateTime,
 #VAT_SDDep.ReceiveDate ReceiveDate,TransID,TransType, 
-isnull(StartingVAT,0)StartingVAT,-isnull(VAT,0)VAT ,Remarks
from #VAT_SDDep    where  Remarks in ('Credit Deposit')

) AS a ORDER BY StartDateTime


DROP TABLE #VAT_SDDep

";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }
                //if (!objCommVAT18.Parameters.Contains("@PVat"))
                //{ objCommVAT18.Parameters.AddWithValue("@PVat", PVat); }
                //else { objCommVAT18.Parameters["@PVat"].Value = PVat; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        public DataSet VAT19New(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement
                #region declare
                sqlText = @"



--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='October-2014';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY] 
 ";
                #endregion declare
                #region 1
                sqlText += @"
----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','4','Sale Trading(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','5','Tender Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','6','Tender Trading Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','7','Sale Debit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','9','Transfer Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','10','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','11','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('PackageSale')

--------------------

-------1 end-------
 ";
                #endregion 1
                #region 2

                sqlText += @"

-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN
	INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','1','Export in BDT(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2','Export in BDT(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','4','Export in BDT(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','5','Export in BDT(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','6','Export in BDT(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','7','Export in BDT(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')
END
ELSE
	BEGIN
		
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','1','Export in USD(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2','Export in USD(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','4','Export in USD(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','5','Export in USD(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')

	END
-------2 end-------
 ";
                #endregion 2
                #region 3

                sqlText += @"

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM SalesInvoiceDetails sid
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','4','Sale Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','5','Sale Tender Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('TradingTender')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','6','Tender Local(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','7','Sale Debit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','9','Transfer Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','Toll Finish Issue Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','ServiceStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceStock')

-------------- 3 -------end
 ";
                #endregion 3
                #region 4

                sqlText += @"

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----
 ";
                #endregion 4
                #region 5

                sqlText += @"

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')
-----------------
-- 5 end----
 ";
                #endregion 5
                #region 6

                sqlText += @"

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----
 ";
                #endregion 6
                #region 7

                sqlText += @"

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
 ";
                #endregion 7
                #region 8

                sqlText += @"


-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT     isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
--,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
 ";
                #endregion 8
                #region 9 & 10

                sqlText += @"

---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----
 ";
                #endregion 9 & 10
                #region 11 & 12

                sqlText += @"

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)

 ----Add by Ruba for Calculating ATVAmount
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(ATVAmount),0),0,
0,'12','4','ATV Amount'
FROM PurchaseInvoiceDetails 
where post='Y'
 and ReceiveDate>= @Datefrom and  ReceiveDate <dateadd(d,1,@Dateto)

------------------
-------12 End----
 ";
                #endregion 11  12
                #region 13

                sqlText += @"

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','0','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase InputServiceImport Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

----Add by Ruba for calculating ATVAmount

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.ATVAmount),0),0,0,'13','4','Purchase ATV Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport','InputServiceImport')
 

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom 
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue','Wastage')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  SalesInvoiceDetails SID
where  SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------
 ";
                #endregion 13
                #region 14 & 15

                sqlText += @"

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----

 ";
                #endregion 14 & 15
                #region 16

                sqlText += @"


--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

--------------------------
--- 16 end ----
 ";
                #endregion 16
                #region 17 , 18 19

                sqlText += @"

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'19','1','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')
-------19 End----
 ";
                #endregion 17,18,19
                #region Update #VAT 19 from #VAT19BreakDown

                sqlText += @"


INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19
                 ";
                #endregion Update #VAT 19 from #VAT19BreakDown

                #endregion


                gotoTop = string.Empty;

                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT19NewNewformat(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement
                #region declare
                sqlText = @"



--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='October-2014';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY] 


CREATE TABLE #VAT19NewFormat(	[MonthName] [datetime] NULL,	
 [Line1A] [decimal](25, 9) NULL,[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL
,[Line2A] [decimal](25, 9) NULL,[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL
,[Line3A] [decimal](25, 9) NULL,[Line3B] [decimal](25, 9) NULL,	[Line3C] [decimal](25, 9) NULL
,[Line4A] [decimal](25, 9) NULL,[Line4B] [decimal](25, 9) NULL,	[Line4C] [decimal](25, 9) NULL
,[Line5A] [decimal](25, 9) NULL,[Line5B] [decimal](25, 9) NULL,	[Line5C] [decimal](25, 9) NULL
,[Line6A] [decimal](25, 9) NULL,[Line6B] [decimal](25, 9) NULL,	[Line6C] [decimal](25, 9) NULL
,[Line7A] [decimal](25, 9) NULL
,[Line8A] [decimal](25, 9) NULL,[Line8B] [decimal](25, 9) NULL 
,[Line9A] [decimal](25, 9) NULL,[Line9B] [decimal](25, 9) NULL 
,[Line10A] [decimal](25, 9) NULL,[Line10B] [decimal](25, 9) NULL 
,[Line11A] [decimal](25, 9) NULL,[Line11B] [decimal](25, 9) NULL 
,[Line12A] [decimal](25, 9) NULL,[Line12B] [decimal](25, 9) NULL 
,[Line13A] [decimal](25, 9) NULL,[Line13B] [decimal](25, 9) NULL 
,[Line14A] [decimal](25, 9) NULL,[Line14B] [decimal](25, 9) NULL 
,[Line15A] [decimal](25, 9) NULL,[Line15B] [decimal](25, 9) NULL 
,[Line16A] [decimal](25, 9) NULL
,[Line17A] [decimal](25, 9) NULL
,[Line18A] [decimal](25, 9) NULL
,[Line19A] [decimal](25, 9) NULL
,[Line20A] [decimal](25, 9) NULL
,[Line21A] [decimal](25, 9) NULL
,[Line22A] [decimal](25, 9) NULL
,[Line23A] [decimal](25, 9) NULL
,[Line24A] [decimal](25, 9) NULL
,[Line25A] [decimal](25, 9) NULL
,[Line26A] [decimal](25, 9) NULL
,[Line27A] [decimal](25, 9) NULL
,[Line28A] [decimal](25, 9) NULL
,[Line29A] [decimal](25, 9) NULL
,[Line30A] [decimal](25, 9) NULL
,[Line31A] [decimal](25, 9) NULL
,[Line32A] [decimal](25, 9) NULL
,[Line33A] [decimal](25, 9) NULL
,[Line34A] [decimal](25, 9) NULL
,[Line35A] [decimal](25, 9) NULL
) ON [PRIMARY] 
 ";
                #endregion declare
                #region 1-19
                sqlText += @"
----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','4','Sale Trading(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','5','Tender Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','6','Tender Trading Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','7','Sale Debit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','9','Transfer Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','10','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','11','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('PackageSale')

--------------------

-------1 end-------
 

-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN
	INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','1','Export in BDT(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2','Export in BDT(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','4','Export in BDT(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','5','Export in BDT(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','6','Export in BDT(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','7','Export in BDT(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')
END
ELSE
	BEGIN
		
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','1','Export in USD(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2','Export in USD(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','4','Export in USD(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','5','Export in USD(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')

	END
-------2 end-------
 

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM SalesInvoiceDetails sid
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','4','Sale Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','5','Sale Tender Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('TradingTender')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','6','Tender Local(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','7','Sale Debit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','9','Transfer Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','Toll Finish Issue Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','ServiceStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceStock')

-------------- 3 -------end
 

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----
 

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','2','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','4','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','5','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')
-----------------
-- 5 end----
 

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----
 

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
 


-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT     isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
--,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
 

---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.SubTotal,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----
 

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)

 ----Add by Ruba for Calculating ATVAmount
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(ATVAmount),0),0,
0,'12','4','ATV Amount'
FROM PurchaseInvoiceDetails 
where post='Y'
 and ReceiveDate>= @Datefrom and  ReceiveDate <dateadd(d,1,@Dateto)

------------------
-------12 End----
 

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','2','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','3','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','4','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','6','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','7','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','8','Purchase InputServiceImport Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

----Add by Ruba for calculating ATVAmount

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.ATVAmount),0),0,0,'13','9','Purchase ATV Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport','InputServiceImport')
 

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','10','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom 
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','11','Sale VAT Local (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','12','Sale VAT Export (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','13','Sale Credit (last month)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','14','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','15','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','16','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','17','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','18','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','19','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','20','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','21','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','22','Sale Credit SD(last month)'
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','23','Sale Local SD(last month)'    
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue','Wastage')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','24','Sale Export SD(last month)'        
from  SalesInvoiceDetails SID
where  SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','25','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------
 

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----

 


--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

--------------------------
--- 16 end ----
 

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'19','1','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')
-------19 End----
 ";
                #endregion 1-19

                #region Update #VAT 19 from #VAT19BreakDown

                sqlText += @"
   
INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

INSERT INTO #VAT19NewFormat(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19NewFormat SET 
Line1A = isnull(0,0),
Line1B = isnull(0,0),
Line1C = isnull(0,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19NewFormat SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2
and SubLineNumber between 1 and 7
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET Line3A =  isnull(V191.A,0),Line3B = isnull(V191.b,0),Line3c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3
and SubLineNumber in(1,2,3,4,5,6,9,10,11,12)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line4A =  isnull(V191.A,0)
,Line4B = isnull(V191.c,0)
,Line4c = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1
and SubLineNumber in(1,2,3,4,5,6,9,10,11,12)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line5A = isnull(0,0),
Line5B = isnull(0,0),
Line5C = isnull(0,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19NewFormat SET 
Line6A = isnull(0,0),
Line6B = isnull(0,0),
Line6C = isnull(0,0) 

UPDATE #VAT19NewFormat SET 
Line7A = isnull(Line4B,0)+isnull(Line4C,0)+isnull(Line5B,0)+isnull(Line5C,0)+isnull(Line6B,0)+isnull(Line6C,0)


UPDATE #VAT19NewFormat SET 
Line8A =  isnull(V191.A,0)
,Line8B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10
and SubLineNumber in(1,3,4,6,7,8,9,14,15)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line9A =  isnull(V191.A,0)
,Line9B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10
and SubLineNumber in(2,5,12,13)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line10A = isnull(0,0),
Line10B = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line11A = isnull(0,0),
Line11B = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line12A =  isnull(V191.A,0)
,Line12B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7
and SubLineNumber between 1 and 12
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line13A =  isnull(V191.A,0)
,Line13B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8
and SubLineNumber between 1 and 12
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line14A =  isnull(V191.A,0)
,Line14B = isnull(V191.b,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10
and SubLineNumber in(10,11)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line15A = isnull(0,0),
Line15B = isnull(0,0)

UPDATE #VAT19NewFormat SET  Line16A = isnull(Line12B,0) +isnull(Line13B,0) +isnull(Line14B,0) 

UPDATE #VAT19NewFormat SET 
Line17A =  isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5
and SubLineNumber in(1,2)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET Line18A = isnull(0,0)
UPDATE #VAT19NewFormat SET Line19A = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line20A =  isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5
and SubLineNumber in(3,4,5)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET  Line21A = isnull(Line17A,0) + isnull(Line18A,0)  + isnull(Line19A,0)   + isnull(Line20A,0)  
  
UPDATE #VAT19NewFormat SET Line22A = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line23A =  -1*  isnull(V191.C,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 
and SubLineNumber in(7,8)
GROUP BY LineNumber) AS V191


UPDATE #VAT19NewFormat SET Line24A = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line25A =  isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 
and SubLineNumber in(2,3)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET  Line26A = isnull(Line22A,0) + isnull(Line23A,0)  + isnull(Line24A,0)   + isnull(Line25A,0)  

UPDATE #VAT19NewFormat SET  Line27A = isnull(Line7A,0) - isnull(Line16A,0)  + isnull(Line21A,0)  - isnull(Line26A,0)  

UPDATE #VAT19NewFormat SET 
Line28A =   isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 
and SubLineNumber in(4)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET 
Line29A =   isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 
and SubLineNumber in(1)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET Line30A = isnull(0,0)
UPDATE #VAT19NewFormat SET Line31A = isnull(0,0)
--UPDATE #VAT19NewFormat SET  Line32A =isnull(Line27A,0)- isnull(Line28A,0) - isnull(Line29A,0)   

UPDATE #VAT19NewFormat SET 
Line32A =   isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 
--and SubLineNumber in(1,2)
GROUP BY LineNumber) AS V191

UPDATE #VAT19NewFormat SET Line33A = isnull(0,0)
UPDATE #VAT19NewFormat SET Line34A = isnull(0,0)

UPDATE #VAT19NewFormat SET 
Line35A =   isnull(V191.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 
--and SubLineNumber in(1,2)
GROUP BY LineNumber) AS V191



SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber
SELECT #VAT19NewFormat.*,isnull(@MLock,'N')MLock FROM #VAT19NewFormat  

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19NewFormat
DROP TABLE #VAT19

                 ";
                #endregion Update #VAT 19 from #VAT19BreakDown

                #endregion


                gotoTop = string.Empty;

                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        public DataSet VAT18Breakdown(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement

                sqlText = @"
 
 

--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='July-2016';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] varchar(100),	[SubLineNumber] varchar(100),	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
 
----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_1','Sale Local(VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_2','Service Stock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_3','Service NonStock Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_4','Sale Trading(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_5','Tender Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_6','Tender Trading Local(VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_7','Sale Debit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','1_8','Sale Credit(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_9','Transfer Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_10','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1_11','Toll Finish Issue Local(VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('PackageSale')

--------------------

-------1 end-------
-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN
	INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_1','Export in BDT(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_2','Export in BDT(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_3','Export in BDT(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_4','Export in BDT(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_5','Export in BDT(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_6','Export in BDT(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2_7','Export in BDT(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')
END
ELSE
	BEGIN
		
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_1','Export in USD(Other)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_2','Export in USD(ExportService)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_3','Export in USD(ExportServiceNS)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_4','Export in USD(ExportTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_5','Export in USD(ExportTrading)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_6','Export in USD(ExportTradingTender)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2_6','Export in USD(ExportPackage)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')

	END
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_1','Sale Local(Non VAT)'
FROM SalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_2','Service Stock Local(Non VAT)'
FROM SalesInvoiceDetails sid
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_3','Service NonStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_4','Sale Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_5','Sale Tender Trading(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('TradingTender')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_6','Tender Local(Non VAT)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_7','Sale Debit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','3_8','Sale Credit(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_9','Transfer Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_10','Toll Finish Issue Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3_10','ServiceStock Local(Non VAT)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceStock')

-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','4_1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','5_1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','5_1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','5_2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','5_3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','5_3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')
-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','6_1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','7_3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','7_5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','7_10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','7_11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','7_14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      -isnull(sum(PID.SubTotal),0),
---isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7_18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(PID.SubTotal),0),
--isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
--AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8_1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT     isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
--,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8_3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','8_5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8_7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8_9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

--INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
--SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
--isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
--FROM PurchaseInvoiceDetails PID 
--where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
--PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
--AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','8_11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','8_12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','9_1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','10_1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','10_2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','10_3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','10_6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','10_7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10_10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10_11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','10_15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','11_1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','12_1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','12_2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','12_3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)

 ----Add by Ruba for Calculating ATVAmount
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(ATVAmount),0),0,
0,'12','12_4','ATV Amount'
FROM PurchaseInvoiceDetails 
where post='Y'
 and ReceiveDate>= @Datefrom and  ReceiveDate <dateadd(d,1,@Dateto)

------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','13_0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','13_0','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','13_1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','13_1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','13_2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','13_3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','13_4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','13_4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

----Add by Ruba for calculating ATVAmount
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.ATVAmount),0),0,0,'13','13_4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  
--and Type in('Import-VAT','Import-Tarrif') 
and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport','InputServiceImport')
------

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','13_5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom 
--and Type in('Local-VAT','Local-Tarrif') 
and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','13_6','Sale VAT Local (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock','Wastage')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','13_7','Sale VAT Export (last month)'
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','13_8','Sale Credit (last month)'
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','13_9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','13_10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','13_11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','13_12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13_13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13_13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13_14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13_14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','13_15','Sale Credit SD(last month)'
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','13_16','Sale Local SD(last month)'    
from  SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue','Wastage')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','13_17','Sale Export SD(last month)'        
from  SalesInvoiceDetails SID
where  SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','13_18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','14_1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','15_1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','16_1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','16_1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','16_2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','16_2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','16_3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','16_3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','16_4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','16_4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','17_1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','16_1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','19_1','Total VDS for supplier')
-------19 End----
 select SL,SubSL,LineNumber,A  from(
select distinct 'A' SL ,'A1' SubSL,'Opening Balance(VAT-18)' LineNumber, sum(A)A  from #VAT19BreakDown
 where LineNumber in(13)
 group by LineNumber
 union all 
 select distinct 'A' ,'B1' , 'Rebate from Import Purchase',   sum(B)B  from #VAT19BreakDown
 where LineNumber in(8)
 group by LineNumber
 union all
 select distinct 'A' ,'C1',  'Rebate from Local Purchase',   sum(B)B  from #VAT19BreakDown
 where LineNumber in(7) and SubLineNumber not in('7_3','7_5')
 group by LineNumber
  union all
 select distinct 'A' ,'D1',  'Rebate from Service Purchase',   sum(B)B  from #VAT19BreakDown
 where LineNumber in(7) and SubLineNumber in('7_5')
 group by LineNumber
   union all
 select distinct 'A' ,'E1',  'Adjustment (Purchase Return)',   -sum(B)B  from #VAT19BreakDown
 where LineNumber in(7) and SubLineNumber in('7_3')
 group by LineNumber

 

     union all
 select  'A' ,'F1', 'Treasury Deposit(Without VDS)', sum(A)A  from #VAT19BreakDown
 where LineNumber in(16) and SubLineNumber not in('16_2','16_3')
     union all
 select distinct 'A' ,'G1', 'Treasury Deposit(VDS)', sum(A)A  from #VAT19BreakDown
 where LineNumber in(16) and SubLineNumber  in('16_2')
   union all
 select distinct 'A' ,'G2', 'Treasury Deposit( Cash/Credit Payble)', sum(A)A  from #VAT19BreakDown
 where LineNumber in(16) and SubLineNumber  in('16_3')

      union all
 select  'B' ,'H1', 'Less Payble VAT (Sale)',  sum(C)C from #VAT19BreakDown
 where LineNumber in(1,2,3,4) and SubLineNumber not in('1_7','1_8')
      union all
 select  'B' ,'I1', 'Adjustment(Debit Note)', sum(C)C  from #VAT19BreakDown
 where LineNumber in(1) and SubLineNumber in ('1_7')
       union all
 select  'B' ,'J1', 'Adjustment(Credit Note)', sum(C)C  from #VAT19BreakDown
 where LineNumber in(1) and SubLineNumber in ('1_8')
        union all
 select  'B' ,'K1', 'Adjustment(Shortable)',- sum(A)A  from #VAT19BreakDown
 where LineNumber in(12) 
       union all
 select  'B' ,'L1', 'Adjustment(VDS)', sum(A)A  from #VAT19BreakDown
 where LineNumber in(16) and SubLineNumber in ('16_2')
      

 ) as VAT18Break

DROP TABLE #VAT19BreakDown


 
";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet RepFormKaTradingNew(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement

                #region Backup

                sqlText = @"

";

                #endregion Backup

                #region Backup

                sqlText = @"

--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--DECLARE @ItemNo VARCHAR(200);

--SET @Itemno=11;
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='01/09/2013';
--SET @EndDate='06/09/2013';

declare @Present DECIMAL(25, 9);
CREATE TABLE #VAT_Ka(	[SerialNo] [int] IDENTITY(1,1) NOT NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL)

CREATE TABLE #VATTemp_Ka(	[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL) 

---- start purchase---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,'Purchase'
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(pd.UOMPrice,0),
pd.UOMQty,pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(pd.UOMPrice,0)
,pd.UOMQty,pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveRaw')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-pd.UOMPrice,-pd.UOMQty,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,pd.UOMPrice,pd.UOMQty,
pd.VATAmount,pd.SDAmount,TransactionType
from PurchaseInvoiceDetails PD where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')


insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-pd.UOMPrice,-pd.UOMQty,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >= @StartDate and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')
---- end purchase---

-------- Start Sale---
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,'Sale'
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Other')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Service')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Trading')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,
CurrencyValue*VATRate/100,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Export')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Tender')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Debit')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo,- UOMPrice,-( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end )Quantity,-VATAmount,-SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('Credit')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('TollFinishIssue')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,TransactionType
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('ServiceStock')

insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
select InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Sale',SalesInvoiceNo,
@ItemNo, UOMPrice,isnull(UOMQty,Quantity)Quantity,VATAmount,SDAmount,'Transfer'
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and 
InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0)
AND (SalesInvoiceDetails.Post =@post1 or Post= @post2)
AND TransactionType IN('InternalIssue')
------ end Sale---


SELECT @Present= COUNT(itemno) FROM #VATTemp_Ka
where  ItemNo=@ItemNo
IF (@Present =0)
BEGIN
insert into #VATTemp_Ka(Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks)
 VALUES(@StartDate,@StartDate,0,0,0,@ItemNo,0,0,0,0,'Opening')			    
END

insert into #VAT_Ka(ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks)
select @ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks
from #VATTemp_Ka
where  #VATTemp_Ka.ItemNo=@ItemNo
order by dailydate

------- Starting Qty
SET ROWCOUNT 1

update #VAT_Ka set 
StartingQuantity=isnull(Products.OpeningBalance,0)

+isnull(Purchase.PurchaseQuantity,0)-isnull(PurchaseR.PurchaseQuantity,0)
-isnull(sale.SaleQuantity ,0)-isnull(saleE.SaleQuantity ,0)+isnull(saleC.SaleQuantity ,0)
,StartingAmount=(isnull(Products.CostPrice,0)*isnull(Products.OpeningBalance,0))

+isnull(Purchase.PurchaseAmount,0)-isnull(PurchaseR.PurchaseAmount,0)

-isnull(sale.SaleAmount,0)-isnull(saleE.SaleAmount,0)+isnull(saleC.SaleAmount,0)

from Products 
----------Purchase Start --------
left outer join
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM(isnull(SubTotal,0))PurchaseAmount 
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('Other','PurchaseCN','Trading','TradingImport','TollReceive','InputService','Import','TollReceiveRaw') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) Purchase on Products.ItemNo=Purchase.itemno 

left outer JOIN
(select ItemNo,SUM(UOMQty)PurchaseQuantity,
SUM(isnull(SubTotal,0))PurchaseAmount
from PurchaseInvoiceDetails
where ReceiveDate < @StartDate and ItemNo=@ItemNo
AND(TransactionType IN('PurchaseReturn','PurchaseDN') ) 
AND (PurchaseInvoiceDetails.Post =@post1 or PurchaseInvoiceDetails.Post= @post2)
group by ItemNo) PurchaseR on Products.ItemNo=PurchaseR.itemno 

----------Purchase End --------

----------Sale Start --------

left outer JOIN

(select distinct ItemNo, SUM(UOMQty)SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails 
where InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo AND (UOMQty>0)AND (Post =@post1 or Post= @post2)
AND TransactionType  IN('other','Service','Trading','Tender','Debit','TollFinishIssue','ServiceStock','InternalIssue')
group by ItemNo
) Sale on Products.ItemNo=Sale.ItemNo  left outer JOIN

(select distinct ItemNo, SUM(UOMQty)SaleQuantity,
SUM(isnull(CurrencyValue,0))SaleAmount 
from SalesInvoiceDetails 
where InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo AND (UOMQty>0)AND (Post =@post1 or Post= @post2)
AND TransactionType  IN('Export')
group by ItemNo
) SaleE on Products.ItemNo=SaleE.ItemNo  left outer JOIN

(select distinct ItemNo, SUM( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity,
SUM(isnull(SubTotal,0))SaleAmount 
from SalesInvoiceDetails  LEFT OUTER JOIN
SalesInvoiceHeaders sih ON SalesInvoiceDetails.SalesInvoiceNo=sih.SalesInvoiceNo
where SalesInvoiceDetails.InvoiceDateTime < @StartDate 
and ItemNo=@ItemNo 
AND (UOMQty>0)

AND (SalesInvoiceDetails.Post =@post1 or SalesInvoiceDetails.Post= @post2)
AND sih.TransactionType IN('Credit')
group by ItemNo
) SaleC on Products.ItemNo=SaleC.ItemNo 
where Products.ItemNo=@ItemNo

----------Sale End --------

SET ROWCOUNT 0
------- Starting Qty end

update #VAT_Ka set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_Ka.TransID
and #VAT_Ka.TransType='Purchase'

select #VAT_Ka.SerialNo,convert (varchar,#VAT_Ka.StartDateTime,120)StartDateTime,
#VAT_Ka.StartingQuantity,#VAT_Ka.StartingAmount
,TransID,#VAT_Ka.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_Ka.Quantity,#VAT_Ka.VATRate,#VAT_Ka.SD,#VAT_Ka.UnitCost,p.HSCodeNo,#VAT_Ka.BENumber,#VAT_Ka.InvoiceDateTime,#VAT_Ka.Remarks
from #VAT_Ka left outer join
Vendors as V on #VAT_Ka.VendorID=v.VendorID left outer join 
Products P on #VAT_Ka.ItemNo=p.ItemNo
where  #VAT_Ka.ItemNo=@ItemNo
order by #VAT_Ka.SerialNo

DROP TABLE #VAT_Ka
DROP TABLE #VATTemp_Ka

";

                #endregion Backup


                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VDS12KhaNew(string VendorId, string DepositNumber, string DepositDateFrom, string DepositDateTo, string IssueDateFrom, string IssueDateTo, string BillDateFrom, string BillDateTo, string PurchaseNumber, bool chkPurchaseVDS)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VDS12Kha");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                if (chkPurchaseVDS == true)
                {
                    sqlText = @"
SELECT 	
VDSId
,vds.VendorId
,v.VendorName
,isnull(v.Address1,'NA')Address1
,v.Address2
,v.Address3
,v.City
,v.VATRegistrationNo
,vg.VendorGroupName
,isnull(v.BusinessType,'NA')BusinessType
,isnull(v.BusinessCode,'NA')BusinessCode
";
                }
                else
                {
                    sqlText += @"
SELECT 	
VDSId
,vds.VendorId
,v.CustomerName VendorName
,isnull(v.Address1,'NA')Address1
,v.Address2
,v.Address3
,v.City
,v.VATRegistrationNo
,vg.CustomerGroupName VendorGroupName
,isnull(v.BusinessType,'NA')BusinessType
,isnull(v.BusinessCode,'NA')BusinessCode
";
                }

                sqlText += @"
,VDS.VDSId
,isnull(BillAmount,0) PayAmount
,convert (varchar(200),VDS.BillDate,120)PayDate
,isnull(BillDeductAmount,0) DeductAmount
,isnull(DepositNumber,'NA') DepositNumber
,convert (date,VDS.DepositDate,101)DepositDate
,isnull(Remarks,'NA')Remarks

, VDS.IssueDate IssueDate
,isnull(d.TreasuryNo,0) TreasuryNo


                            FROM VDS	LEFT OUTER JOIN 
                            Deposits d ON vds.VDSId=d.DepositId LEFT OUTER JOIN 
";
                if (chkPurchaseVDS == true)
                {
                    sqlText += @"  Vendors v ON vds.VendorId=v.VendorID LEFT OUTER JOIN
                            VendorGroups vg ON v.VendorGroupID=vg.VendorGroupID

                            WHERE 	(vds.VendorId  LIKE '%' +  @VendorId + '%' OR @VendorId IS NULL) 
                            AND (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL)
                             ";
                }
                else
                {
                    sqlText += @"  Customers v ON vds.VendorId=v.CustomerID LEFT OUTER JOIN
                            CustomerGroups vg ON v.CustomerGroupID=vg.CustomerGroupID

                            WHERE 	(vds.VendorId  LIKE '%' +  @VendorId + '%' OR @VendorId IS NULL) 
                            AND (DepositNumber LIKE '%' + @DepositNumber + '%' OR @DepositNumber IS NULL)
                             ";
                }


                #endregion

                #region SQL Command

                SqlCommand objCommVDS = new SqlCommand();
                objCommVDS.Connection = currConn;

                objCommVDS.CommandText = sqlText;
                objCommVDS.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVDS.Parameters.Contains("@VendorId"))
                {
                    objCommVDS.Parameters.AddWithValue("@VendorId", VendorId);
                }
                else
                {
                    objCommVDS.Parameters["@VendorId"].Value = VendorId;
                }
                if (!objCommVDS.Parameters.Contains("@DepositNumber"))
                {
                    objCommVDS.Parameters.AddWithValue("@DepositNumber", DepositNumber);
                }
                else
                {
                    objCommVDS.Parameters["@DepositNumber"].Value = DepositNumber;
                }
                //if (!objCommVDS.Parameters.Contains("@PurchaseNumber"))
                // { objCommVDS.Parameters.AddWithValue("@PurchaseNumber", PurchaseNumber); }
                //else { objCommVDS.Parameters["@PurchaseNumber"].Value = PurchaseNumber; }
                //if (!objCommVDS.Parameters.Contains("@DepositDateFrom"))
                //{ objCommVDS.Parameters.AddWithValue("@DepositDateFrom", DepositDateFrom); }
                //else { objCommVDS.Parameters["@DepositDateFrom"].Value = DepositDateFrom; }
                //if (!objCommVDS.Parameters.Contains("@DepositDateTo"))
                //{ objCommVDS.Parameters.AddWithValue("@DepositDateTo", DepositDateTo); }
                //else { objCommVDS.Parameters["@DepositDateTo"].Value = DepositDateTo; }
                //if (!objCommVDS.Parameters.Contains("@IssueDateFrom"))
                //{ objCommVDS.Parameters.AddWithValue("@IssueDateFrom", IssueDateFrom); }
                //else { objCommVDS.Parameters["@IssueDateFrom"].Value = IssueDateFrom; }
                //if (!objCommVDS.Parameters.Contains("@IssueDateTo"))
                //{ objCommVDS.Parameters.AddWithValue("@IssueDateTo", IssueDateTo); }
                //else { objCommVDS.Parameters["@IssueDateTo"].Value = IssueDateTo; }
                //if (!objCommVDS.Parameters.Contains("@BillDateFrom"))
                //{ objCommVDS.Parameters.AddWithValue("@BillDateFrom", BillDateFrom); }
                //else { objCommVDS.Parameters["@BillDateFrom"].Value = BillDateFrom; }
                //if (!objCommVDS.Parameters.Contains("@BillDateTo"))
                //{ objCommVDS.Parameters.AddWithValue("@BillDateTo", BillDateTo); }
                //else { objCommVDS.Parameters["@BillDateTo"].Value = BillDateTo; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVDS);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT24(string ddbackno, string ddbFinishItemNo, string SalesInvoiceNo)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT24");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
                

SELECT
d.DDBackNo
,convert (varchar,d.DDBackDate,120)DDBackDate
,d.BillOfEntry
,SD.SalesInvoiceNo
,pid.TransactionType
,FpC.CategoryName FinishCatagoryName
,fpc.israw FinishType
,d.FgItemNo
,pF.ProductName FinishGoodsName
,pF.ProductDescription FinishGoodsDescription
,pF.HSCodeNo FHSCode
,RpC.CategoryName RawCatagoryName
,d.ItemNo
,pR.ProductName RowGoodsName
,pR.ProductDescription RawGoodsDescription
,pR.HSCodeNo RHSCode
,rpc.IsRaw RawType
,d.PurchaseUom
,sd.UOM FUOM
,d.PurchaseQuantity PurchaseQuantity
,d.UseQuantity UsedQuantity
,d.UnitPrice PerUnitCost
,(d.ClaimCD/isnull(d.FGQty,0)+d.ClaimRD/isnull(d.FGQty,0)) ImportDuty
,(d.ClaimSD/isnull(d.FGQty,0)) SDOtherDuty
,d.VAT
,d.PurchaseInvoiceNo
,d.AV
,d.CD
,d.RD
,d.SD
,d.CnF
,d.Insurance
,d.TVB
,d.TVA
,d.ATV
,d.Others
,d.UseQuantity
,d.ClaimCD/isnull(d.FGQty,0)ClaimCD
,d.ClaimRD/isnull(d.FGQty,0)ClaimRD
,d.ClaimSD/isnull(d.FGQty,0)ClaimSD
,d.ClaimVAT/isnull(d.FGQty,0)ClaimVAT
,d.ClaimCnF/isnull(d.FGQty,0)ClaimCnF
,d.ClaimInsurance/isnull(d.FGQty,0)ClaimInsurance
,d.ClaimTVB/isnull(d.FGQty,0)ClaimTVB
,d.ClaimTVA/isnull(d.FGQty,0)ClaimTVA
,d.ClaimATV/isnull(d.FGQty,0)ClaimATV
,d.ClaimOthers/isnull(d.FGQty,0)ClaimOthers
,d.SubTotalDDB/isnull(d.FGQty,0)SubTotalDDB
,d.UOMc
,d.UOMn
,d.UOMCD
,d.UOMRD
,d.UOMSD
,d.UOMVAT
,d.UOMCnF
,d.UOMInsurance
,d.UOMTVB
,d.UOMTVA
,d.UOMATV
,d.UOMOthers
,d.UOMSubTotalDDB
,d.PurchaseInvoiceNo
--,isnull(d.FGQty,0) FGQty

FROM dbo.DutyDrawBackDetails d
LEFT OUTER JOIN PurchaseInvoiceHeaders pid on d.PurchaseInvoiceNo=pid.PurchaseInvoiceNo
left outer JOIN Products pR on pR.ItemNo=d.ItemNo
left outer join Products pF on pF.ItemNo=d.FgItemNo
left outer join ProductCategories FpC on FpC.CategoryID=pF.CategoryID
left outer join ProductCategories RpC on RpC.CategoryID=pR.CategoryID
LEFT OUTER join (SELECT DISTINCT pid.SalesInvoiceNo,pid.UOM,pid.ItemNo
FROM SalesInvoiceDetails pid WHERE ItemNo=@ddbFinishItemNo AND SalesInvoiceNo=@SalesInvoiceNo)sd on d.FgItemNo=sd.ItemNo AND D.SalesInvoiceNo=SD.SalesInvoiceNo


where d.DDBackNo=@ddbackno
and d.FGQty>0 and d.UseQuantity>0  AND d.FgItemNo=@ddbFinishItemNo
order by pF.ProductName,pid.TransactionType,rpc.IsRaw


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ddbackno"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ddbackno", ddbackno);
                }
                else
                {
                    objCommVAT16.Parameters["@ddbackno"].Value = ddbackno;
                }
                if (!objCommVAT16.Parameters.Contains("@ddbFinishItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ddbFinishItemNo", ddbFinishItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ddbFinishItemNo"].Value = ddbFinishItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommVAT16.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }
                //if (StartDate == "")
                //{
                //    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                //    { objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value); }
                //    else { objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value; }
                //}
                //else
                //{
                //    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                //    { objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate); }
                //    else { objCommVAT16.Parameters["@StartDate"].Value = StartDate; }
                //}// Common Filed
                //if (EndDate == "")
                //{
                //    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                //    { objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value); }
                //    else { objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value; }
                //}
                //else
                //{
                //    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                //    { objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate); }
                //    else { objCommVAT16.Parameters["@EndDate"].Value = EndDate; }
                //}

                //if (!objCommVAT16.Parameters.Contains("@post1"))
                //{ objCommVAT16.Parameters.AddWithValue("@post1", post1); }
                //else { objCommVAT16.Parameters["@post1"].Value = post1; }

                //if (!objCommVAT16.Parameters.Contains("@post2"))
                //{ objCommVAT16.Parameters.AddWithValue("@post2", post2); }
                //else { objCommVAT16.Parameters["@post2"].Value = post2; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT22(string ddbackno)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT22");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
                


SELECT DISTINCT d.FgItemNo,
convert (varchar,d.DDBackDate,120)DDBackDate
,pF.ProductName  FinishGoodsName
,pF.HSCodeNo FHSCode
 ,pF.UOM 
,d.SalesInvoiceNo
 ,cur.CurrencyCode

,sd.SubTotal ForeignCurrency,sd.CurrencyValue LocalCurrency
,d.FgQty Quantity
,SUM(d.SubTotalDDB)/d.FgQty DutyDrawBackPerQuantity
,SUM(d.SubTotalDDB) TotalDutyDrawBack
FROM DutyDrawBackDetails d LEFT OUTER JOIN
SalesInvoiceDetails sd on d.FgItemNo=sd.ItemNo AND d.SalesInvoiceNo= sd.SalesInvoiceNo
left outer join Products pF on d.FgItemNo=pF.ItemNo
LEFT OUTER JOIN SalesInvoiceHeaders sih ON sd.SalesInvoiceNo=sih.SalesInvoiceNo
left outer JOIN Currencies cur ON cur.CurrencyId=sih.CurrencyId
WHERE d.DDBackNo=@ddbackno
GROUP BY d.FgItemNo,
d.DDBackDate
,pF.ProductName 
,pF.HSCodeNo
 ,pF.UOM 
,d.SalesInvoiceNo
,cur.CurrencyCode
,sd.SubTotal,sd.CurrencyValue ,d.FgQty


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ddbackno"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ddbackno", ddbackno);
                }
                else
                {
                    objCommVAT16.Parameters["@ddbackno"].Value = ddbackno;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VATDDB(string ddbackno, string salesInvoice)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 
SELECT dh.DDBackNo
,convert (varchar,dh.DDBackDate,120)DDBackDate,dh.SalesInvoiceNo,convert (varchar,dh.SalesDate,120)SalesDate,dh.CustormerID,c.CustomerName,c.Address1,c.Country,dh.CurrencyId
,cr.CurrencyCode,dh.ExpCurrency,dh.BDTCurrency,dh.FgItemNo,p.ProductName	 
,dh.TotalClaimCD,dh.TotalClaimRD,dh.TotalClaimSD,dh.TotalDDBack,dh.TotalClaimVAT
,dh.TotalClaimCnFAmount,dh.TotalClaimInsuranceAmount,dh.TotalClaimTVBAmount,dh.TotalClaimTVAAmount,dh.TotalClaimATVAmount,dh.TotalClaimOthersAmount
,dh.Comments,dh.CreatedBy,convert (varchar,dh.CreatedOn,120)CreatedOn,dh.LastModifiedBy,convert (varchar,dh.LastModifiedOn,120)LastModifiedOn,dh.Post
FROM DutyDrawBackHeader dh
left outer join Customers c on c.CustomerID=dh.CustormerID
left outer join Currencies cr on cr.CurrencyId=dh.CurrencyId
left outer join Products p on p.ItemNo=dh.FgItemNo
where DDBackNo =@ddbackno
              
SELECT dd.DDBackNo,convert (varchar,dd.DDBackDate,120)DDBackDate
,dd.DDLineNo,dd.PurchaseInvoiceNo,convert (varchar,dd.PurchaseDate,120)PurchaseDate
,dd.FgItemNo,pf.ProductName finishgoodsname,fpc.israw Finishproducttype	,sd.UOM FUOM,sd.Quantity FQuantity	
,dd.ItemNo,pr.ProductName Rawgoodsname,rpc.israw Rawproducttype,dd.BillOfEntry,dd.PurchaseUom,dd.PurchaseQuantity,dd.UnitPrice
,dd.AV,dd.CD,dd.RD,dd.SD,dd.VAT,dd.CnF,dd.Insurance,dd.TVB,dd.TVA,dd.ATV,dd.Others
,dd.UseQuantity,dd.ClaimCD,dd.ClaimRD,dd.ClaimSD,dd.ClaimVAT,dd.ClaimCnF,dd.ClaimInsurance
,dd.ClaimTVB,dd.ClaimTVA,dd.ClaimATV,dd.ClaimOthers,dd.SubTotalDDB
,dd.UOMc,dd.UOMn,dd.UOMCD,dd.UOMRD,dd.UOMSD,dd.UOMVAT,dd.UOMCnF,dd.UOMInsurance,dd.UOMTVB,dd.UOMTVA,dd.UOMATV,dd.UOMOthers
,dd.UOMSubTotalDDB
,dd.Post,dd.CreatedBy,dd.CreatedOn,dd.LastModifiedBy,dd.LastModifiedOn
FROM DutyDrawBackDetails dd
left outer join Products pf on pf.ItemNo=dd.FgItemNo
left outer join Products pr on pr.ItemNo=dd.ItemNo 
left outer join ProductCategories fpc on FpC.CategoryID=pf.CategoryID
left outer join ProductCategories rpc on RpC.CategoryID=pr.CategoryID
left outer join DutyDrawBackHeader dh on dh.DDBackNo=dd.DDBackNo
left outer join SalesInvoiceDetails sd on sd.ItemNo=dd.FgItemNo
where dd.DDBackNo =@ddbackno and sd.SalesInvoiceNo=@salesInvoice



                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ddbackno"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ddbackno", ddbackno);
                }
                else
                {
                    objCommVAT16.Parameters["@ddbackno"].Value = ddbackno;
                }
                if (!objCommVAT16.Parameters.Contains("@salesInvoice"))
                {
                    objCommVAT16.Parameters.AddWithValue("@salesInvoice", salesInvoice);
                }
                else
                {
                    objCommVAT16.Parameters["@salesInvoice"].Value = salesInvoice;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet PurchaseMis(string PurchaseId)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 

SELECT ph.PurchaseInvoiceNo
      ,ph.VendorID
      ,convert (varchar,ph.InvoiceDateTime,120)InvoiceDateTime
      ,ph.TotalAmount
      ,ph.TotalVATAmount
      ,ph.SerialNo
      ,ph.Comments     
      ,ph.BENumber
      ,ph.ProductType
      ,ph.TransactionType
      ,convert (varchar,ph.ReceiveDate,120)ReceiveDate
      ,ph.Post
      ,ph.CurrencyID
      ,ph.CurrencyRateFromBDT
      ,ph.WithVDS
      ,ph.PurchaseReturnId
	  ,v.VendorCode
      ,v.VendorName
      ,v.VendorGroupID
      ,v.Address1
      ,v.City
      ,v.TelephoneNo
      ,v.FaxNo
      ,v.Email
      ,convert (varchar,v.StartDateTime,120)StartDateTime
      ,v.ContactPerson
      ,v.ContactPersonDesignation
      ,v.ContactPersonTelephone
      ,v.ContactPersonEmail
      ,v.VATRegistrationNo
      ,v.TINNo
      ,v.ActiveStatus
      ,v.Country
      ,v.VDSPercent
  FROM PurchaseInvoiceHeaders ph

  left outer join Vendors v on v.VendorID=ph.VendorID

  Where PurchaseInvoiceNo=@PurchaseId


SELECT pd.PurchaseInvoiceNo
      ,pd.POLineNo
      ,pd.ItemNo PurchaseItemNo
      ,pd.Quantity
      ,pd.CostPrice
      ,pd.NBRPrice
      ,pd.UOM PurchaseUom
      ,pd.Comments
      ,pd.Type
      ,pd.ProductType
      ,pd.BENumber
      ,convert (varchar,pd.InvoiceDateTime,120)InvoiceDateTime
      ,convert (varchar,pd.ReceiveDate,120)ReceiveDate
      ,pd.Post
      ,pd.UOMQty
      ,pd.UOMPrice
      ,pd.UOMc
      ,pd.UOMn
      ,pd.DollerValue
      ,pd.CurrencyValue
      ,pd.RebateRate
      ,pd.RebateAmount
      ,pd.SubTotal
      ,pd.CnFAmount
      ,pd.InsuranceAmount
      ,pd.AssessableValue
      ,pd.CDAmount
      ,pd.RDAmount
      ,pd.SD
      ,pd.SDAmount
      ,pd.TVBAmount
      ,pd.VATRate
      ,pd.VATAmount
      ,pd.TVAAmount
      ,pd.ATVAmount
      ,pd.OthersAmount
      ,pd.TransactionType
      ,pd.PurchaseReturnId
	  ,P.ItemNo ProductItemNo
      ,P.ProductCode
      ,P.ProductName
      ,P.ProductDescription
      ,P.CategoryID
      ,P.UOM ProductUom    
      ,P.OpeningBalance
      ,P.SerialNo
      ,P.HSCodeNo     
      ,P.Trading      
      ,P.NonStock 
      ,Pc.CategoryName     
      ,pc.IsRaw      
  FROM PurchaseInvoiceDetails pd
  left outer join Products p on p.ItemNo=pd.ItemNo
  left outer join ProductCategories pc on pc.CategoryID=p.CategoryID

   Where PurchaseInvoiceNo=@PurchaseId



SELECT pdu.PIDutyID
      ,pdu.PurchaseInvoiceNo
      ,pdu.CnFInp
      ,pdu.CnFRate
      ,pdu.CnFAmount
      ,pdu.InsuranceInp
      ,pdu.InsuranceRate
      ,pdu.InsuranceAmount
      ,pdu.AssessableInp
      ,pdu.AssessableValue
      ,pdu.CDInp
      ,pdu.CDRate
      ,pdu.CDAmount
      ,pdu.RDInp
      ,pdu.RDRate
      ,pdu.RDAmount
      ,pdu.TVBInp
      ,pdu.TVBRate
      ,pdu.TVBAmount
      ,pdu.SDInp
      ,pdu.SD
      ,pdu.SDAmount
      ,pdu.VATInp
      ,pdu.VATRate
      ,pdu.VATAmount
      ,pdu.TVAInp
      ,pdu.TVARate
      ,pdu.TVAAmount
      ,pdu.ATVInp
      ,pdu.ATVRate
      ,pdu.ATVAmount
      ,pdu.OthersInp
      ,pdu.OthersRate
      ,pdu.OthersAmount
      ,pdu.TransactionType
	  ,pdu.Post
      ,pdu.Remarks
      ,pdu.ItemNo
      ,pdu.DutyCompleteQuantity
      ,pdu.DutyCompleteQuantityPercent
      ,pdu.LineCost
      ,pdu.UnitCost
      ,pdu.Quantity
	  ,p.ProductCode
	  ,p.ProductName
	  ,p.ProductDescription
  FROM PurchaseInvoiceDuties pdu
  left outer join Products p on p.ItemNo=pdu.ItemNo

  Where PurchaseInvoiceNo=@PurchaseId



                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@PurchaseId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@PurchaseId", PurchaseId);
                }
                else
                {
                    objCommVAT16.Parameters["@PurchaseId"].Value = PurchaseId;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet SaleMis(string SaleId)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 

SELECT sh.SalesInvoiceNo
      ,sh.CustomerID
      ,sh.DeliveryAddress1
      ,sh.VehicleID
      ,convert (varchar,sh.InvoiceDateTime,120)InvoiceDateTime
      ,convert (varchar,sh.DeliveryDate,120)DeliveryDate
      ,sh.TotalAmount
      ,sh.TotalVATAmount
      ,sh.SerialNo
      ,sh.Comments      
      ,sh.SaleType
      ,sh.PreviousSalesInvoiceNo
      ,sh.Trading
      ,sh.IsPrint
      ,sh.TenderId
      ,sh.TransactionType
      ,sh.Post
      ,isnull(sh.LCNumber,'nill')LCNumber
      ,isnull(sh.CurrencyID,'nill')CurrencyID
      ,isnull(sh.CurrencyRateFromBDT,0)CurrencyRateFromBDT
      ,isnull(sh.SaleReturnId,'nill')SaleReturnId
      ,isnull(sh.IsVDS,'nill')IsVDS
      ,isnull(sh.GetVDSCertificate,'nill')GetVDSCertificate 
	  ,c.CustomerName
      ,c.Address1
      ,c.City
      ,c.TelephoneNo
      ,c.FaxNo
      ,c.Email
      ,convert (varchar,c.StartDateTime,120)StartDateTime
      ,c.ContactPerson
      ,c.ContactPersonDesignation
      ,c.ContactPersonTelephone
      ,c.ContactPersonEmail
      ,c.TINNo
      ,c.VATRegistrationNo 
      ,c.ActiveStatus
      ,isnull(c.VDSPercent,0)VDSPercent
      ,isnull(v.VehicleCode,'nill')VehicleCode
      ,isnull(v.VehicleType,'nill')VehicleType
      ,isnull(v.VehicleNo,'nill')VehicleNo
      ,isnull(v.Description,'nill')Description
	  ,isnull(cu.CurrencyName,'nill')CurrencyName
      ,isnull(cu.CurrencyCode,'nill')CurrencyCode
      ,isnull(cu.Country,'nill')Country
  FROM SalesInvoiceHeaders sh
  left outer join Customers c on c.CustomerID = sh.CustomerID
  left outer join Vehicles v on v.VehicleID= sh.VehicleID
  left outer join Currencies cu on cu.CurrencyId= sh.CurrencyId
  Where sh.SalesInvoiceNo = @SaleId

SELECT sd.SalesInvoiceNo
      ,sd.InvoiceLineNo
      ,sd.ItemNo
      ,sd.Quantity
      ,sd.SalesPrice
      ,sd.NBRPrice
      ,sd.AVGPrice
      ,sd.UOM
      ,sd.VATRate
      ,sd.VATAmount
      ,sd.SubTotal
      ,sd.Comments
      ,sd.SD
      ,sd.SDAmount
      ,sd.SaleType
      ,sd.PreviousSalesInvoiceNo
      ,sd.Trading
      ,convert (varchar,sd.InvoiceDateTime,120)InvoiceDateTime
      ,sd.NonStock
      ,sd.TradingMarkUp
      ,sd.Type
      ,sd.BENumber
      ,sd.Post
      ,sd.UOMQty
      ,sd.UOMPrice
      ,sd.UOMc
      ,sd.UOMn
      ,isnull(sd.DollerValue,0)DollerValue
      ,isnull(sd.CurrencyValue,0)CurrencyValue
      ,sd.TransactionType
      ,isnull(sd.VATName,'nill')VATName
      ,isnull(sd.SaleReturnId,'nill')SaleReturnId
      ,isnull(sd.DiscountAmount,0)DiscountAmount
      ,isnull(sd.DiscountedNBRPrice,0)DiscountedNBRPrice
	  ,p.ProductCode
      ,p.ProductName
      ,p.ProductDescription
  FROM SalesInvoiceDetails sd
  left outer join Products p on p.ItemNo=sd.ItemNo
  Where sd.SalesInvoiceNo = @SaleId


SELECT se.SalesInvoiceNo
      ,se.SaleLineNo
      ,se.RefNo
      ,se.Description
      ,se.Quantity
      ,se.GrossWeight
      ,se.NetWeight
      ,se.NumberFrom
      ,se.NumberTo
      ,se.Comments
      ,se.PortFrom
      ,se.PortTo 
  FROM SalesInvoiceHeadersExport se
   Where se.SalesInvoiceNo = @SaleId




                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@SaleId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@SaleId", SaleId);
                }
                else
                {
                    objCommVAT16.Parameters["@SaleId"].Value = SaleId;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet IssueMis(string IssueId)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 
SELECT ih.IssueNo
      ,convert (varchar,ih.IssueDateTime,120)IssueDateTime
      ,ih.TotalVATAmount
      ,ih.TotalAmount
      ,ih.SerialNo
      ,ih.Comments
	  ,ih.ReceiveNo
      ,ih.TransactionType
      ,ih.IssueReturnId
      ,ih.Post
  FROM IssueHeaders ih

   where ih.IssueNo=@IssueId


SELECT id.IssueNo
      ,id.IssueLineNo
      ,id.ItemNo
      ,id.Quantity
      ,id.NBRPrice
      ,id.CostPrice
      ,id.UOM
      ,id.VATRate
      ,id.VATAmount
      ,id.SubTotal
      ,id.Comments
      ,id.ReceiveNo
      ,convert (varchar,id.IssueDateTime,120)IssueDateTime
      ,id.SD
      ,id.SDAmount
      ,id.Wastage
      ,id.BOMDate
      ,id.FinishItemNo
      ,id.Post
      ,id.TransactionType
      ,id.IssueReturnId
      ,id.DiscountAmount
      ,id.DiscountedNBRPrice
      ,id.UOMQty
      ,id.UOMPrice
      ,id.UOMc
      ,id.UOMn
	  ,p.ProductCode
      ,p.ProductName
      ,p.ProductDescription
  FROM IssueDetails id
  left outer join Products p on p.ItemNo=id.ItemNo

  where id.IssueNo=@IssueId






                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@IssueId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@IssueId", IssueId);
                }
                else
                {
                    objCommVAT16.Parameters["@IssueId"].Value = IssueId;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet ReceiveMis(string ReceiveId)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 
SELECT rh.ReceiveNo
      ,convert (varchar,rh.ReceiveDateTime,120)ReceiveDateTime
      ,rh.TotalAmount
      ,rh.TotalVATAmount
      ,rh.SerialNo
      ,rh.Comments
      ,rh.TransactionType
      ,rh.Post
      ,rh.ReceiveReturnId
  FROM ReceiveHeaders rh
  where ReceiveNo=@ReceiveId


SELECT rd.ReceiveNo
      ,rd.ReceiveLineNo
      ,rd.ItemNo
      ,rd.Quantity
      ,rd.CostPrice
      ,rd.NBRPrice
      ,rd.UOM
      ,rd.VATRate
      ,rd.VATAmount
      ,rd.SubTotal
      ,rd.Comments
      ,rd.SD
      ,rd.SDAmount
      ,rd.TransactionType
      ,convert (varchar,rd.ReceiveDateTime,120)ReceiveDateTime
      ,rd.Post
      ,rd.VATName
      ,rd.ReceiveReturnId
      ,rd.DiscountAmount
      ,rd.DiscountedNBRPrice
      ,rd.BOMId
      ,rd.BOMId BOMId1
	  ,p.ProductCode
      ,p.ProductName
      ,p.ProductDescription
	  ,pc.CategoryName
      ,pc.Description   
      ,pc.IsRaw
      ,pc.HSCodeNo 
	  ,pc.Trading
      ,pc.NonStock
  FROM ReceiveDetails rd
    left outer join Products p on p.ItemNo=rd.ItemNo
	left outer join ProductCategories pc on pc.CategoryID=p.CategoryID
	where rd.ReceiveNo=@ReceiveId






                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ReceiveId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ReceiveId", ReceiveId);
                }
                else
                {
                    objCommVAT16.Parameters["@ReceiveId"].Value = ReceiveId;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT1KaNew(string FinishItemNo, string EffectDate, string VATName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Ka");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Lock

                #endregion Lock

                sqlText = @"




--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo=154;
--SET @VATName='VAT 1';
--SET @EffectDate='2013/04/20';

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName


SELECT b.RawItemNo, isnull(p.ProductCode,'N')ProductCode,
 isnull(p.ProductName,'NA')ProductName, isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, convert (varchar,b.EffectDate,120)EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
FROM BOMRaws b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.RawItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0 and b.RawItemType not in ('Overhead');



                            ";


                #endregion

                #region SQL Command

                SqlCommand objCommVAT1Ka = new SqlCommand();
                objCommVAT1Ka.Connection = currConn;

                objCommVAT1Ka.CommandText = sqlText;
                objCommVAT1Ka.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Ka.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1Ka.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1Ka.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1Ka.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Ka.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Ka.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Ka.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Ka.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Ka.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Ka);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT1KhaNew(string FinishItemNo, string EffectDate, string VATName)
        {
            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Kha");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction



                #region SQL Statement


                sqlText = @"


--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo=192;
--SET @VATName='VAT 1 Kha (Trading)';
--SET @EffectDate='2014-09-04';

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,106)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
(b.NBRPrice-b.MarkUpValue) NBRPrice , b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName






                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT1Kha = new SqlCommand();
                objCommVAT1Kha.Connection = currConn;

                objCommVAT1Kha.CommandText = sqlText;
                objCommVAT1Kha.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Kha.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1Kha.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1Kha.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1Kha.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Kha.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Kha.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Kha.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Kha.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Kha.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Kha);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }


        public DataSet ReportVAT1GaNewBackup05102013(string FinishItemNo, string EffectDate, string VATName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Ga");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

";

                #endregion SQL Statement

                #region SQL Statement

                sqlText = @"
        
--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo='6568';
--SET @VATName='VAT 1';
--SET @EffectDate='2013-04-01';

CREATE TABLE #BOMRaws([BOMRawId] [varchar](200)  NULL,[BOMId] [varchar](200)  NULL,
[BOMLineNo] [int] NULL,[FinishItemNo] [varchar](200)  NULL,[RawItemNo] [varchar](200)  NULL,
[RawItemType] [varchar](200) NOT NULL,[EffectDate] [datetime]  NULL,[VATName] [varchar](200)  NULL,
[UseQuantity] [decimal](25, 9) NULL,[WastageQuantity] [decimal](25, 9) NULL,[Cost] [decimal](25, 9) NULL,
[UOM] [varchar](200) NULL,[VATRate] [decimal](25, 9) NULL,[VATAmount] [decimal](25, 9) NULL,
[SD] [decimal](25, 9) NULL,[SDAmount] [decimal](25, 9) NULL,[TradingMarkUp] [decimal](25, 9) NULL,
[RebateRate] [decimal](25, 9) NULL,[MarkUpValue] [decimal](25, 9) NULL,[CreatedBy] [varchar](200) NULL,
[CreatedOn] [datetime] NULL,[LastModifiedBy] [varchar](200) NULL,[LastModifiedOn] [datetime] NULL,
[UnitCost] [decimal](25, 9) NULL,[UOMn] [varchar](200) NULL,[UOMc] [decimal](25, 9) NULL,
[UOMPrice] [decimal](25, 9) NULL,[UOMUQty] [decimal](25, 9) NULL,[UOMWQty] [decimal](25, 9) NULL,
[TotalQuantity] [decimal](25, 9) NULL,[Post] [varchar](1) NULL,[PBOMId] [varchar](200) NULL)

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

SELECT SL,RawItemNo,ProductCode,ProductName, ProductDescription,
CategoryName,IsRaw,
BOMRawId, BOMId, BOMLineNo, FinishItemNo, UOM, EffectDate, UseQuantity,
WastageQuantity, Cost, VATRate, VATAmount, SD, SDAmount,
TradingMarkUp, MarkUpValue, RebateRate, UnitCost, TotalQuantity,RawItemType
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'N')ProductCode,
 isnull(p.ProductName,'NA')ProductName, isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, convert (varchar,b.EffectDate,120)EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
FROM BOMRaws b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.RawItemNo=p.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0 and b.RawItemType not in ('Overhead')
UNION 
SELECT 'O' SL,b.RawItemNo, isnull(p.ProductCode,'N')ProductCode,
 isnull(p.ProductName,'NA')ProductName, isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, convert (varchar,b.EffectDate,120)EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
FROM BOMRaws b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.RawItemNo=p.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0 and b.RawItemType in ('Overhead')
) AS a

INSERT INTO #BOMRaws(BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId)
SELECT BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId 
 FROM BOMRaws b
WHERE b.BOMId IN(SELECT b.PBOMId FROM BOMRaws b 
                 WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
                 AND isnull(b.PBOMId,0) >0) AND b.cost>0  and b.RawItemType  IN('Raw')
UPDATE #BOMRaws SET
UseQuantity=isnull(#BOMRaws.UseQuantity,0)*isnull(p.totalQuantity,0),
WastageQuantity=isnull(#BOMRaws.WastageQuantity,0)*isnull(p.totalQuantity,0),
Cost=isnull(#BOMRaws.Cost,0)*isnull(p.totalQuantity,0),
UnitCost=isnull(#BOMRaws.UnitCost,0)*isnull(p.totalQuantity,0),
totalQuantity=isnull(#BOMRaws.totalQuantity,0)*isnull(p.totalQuantity,0)
FROM (SELECT isnull(b.UOMUQty,0)+isnull(b.UOMWQty,0) TotalQuantity,b.PBOMId
        FROM BOMRaws b 
      WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
      AND isnull(b.PBOMId,0) >0) p WHERE #BOMRaws.BOMId=p.pBOMId
----------BOM RawP
select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, isnull(b.UseQuantity,0)UseQuantity,
isnull(b.WastageQuantity,0)WastageQuantity, isnull(b.Cost,0)Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, isnull(b.UnitCost,0)UnitCost, isnull(b.TotalQuantity,0)TotalQuantity,b.RawItemType
,fp.ProductName FProductName,fp.ProductCode FProductCode

FROM #BOMRaws b LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

)AS a ORDER BY a.SL,a.BOMRawId

DROP TABLE #BOMRaws
";

                #endregion SQL Statement

                #region SQL Command

                SqlCommand objCommVAT1Ga = new SqlCommand();
                objCommVAT1Ga.Connection = currConn;

                objCommVAT1Ga.CommandText = sqlText;
                objCommVAT1Ga.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Ga.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Ga);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT1GaNew(string FinishItemNo, string EffectDate, string VATName, string IsPercent)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Ga");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

";

                #endregion SQL Statement

                #region SQL Statement

                sqlText = @"
        
        
--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo='6568';
--SET @VATName='VAT 1';
--SET @EffectDate='2013-04-01';

CREATE TABLE #BOMRaws([BOMRawId] [varchar](200)  NULL,[BOMId] [varchar](200)  NULL,
[BOMLineNo] [int] NULL,[FinishItemNo] [varchar](200)  NULL,[RawItemNo] [varchar](200)  NULL,
[RawItemType] [varchar](200) NOT NULL,[EffectDate] [datetime]  NULL,[VATName] [varchar](200)  NULL,
[UseQuantity] [decimal](25, 9) NULL,[WastageQuantity] [decimal](25, 9) NULL,[Cost] [decimal](25, 9) NULL,
[UOM] [varchar](200) NULL,[VATRate] [decimal](25, 9) NULL,[VATAmount] [decimal](25, 9) NULL,
[SD] [decimal](25, 9) NULL,[SDAmount] [decimal](25, 9) NULL,[TradingMarkUp] [decimal](25, 9) NULL,
[RebateRate] [decimal](25, 9) NULL,[MarkUpValue] [decimal](25, 9) NULL,[CreatedBy] [varchar](200) NULL,
[CreatedOn] [datetime] NULL,[LastModifiedBy] [varchar](200) NULL,[LastModifiedOn] [datetime] NULL,
[UnitCost] [decimal](25, 9) NULL,[UOMn] [varchar](200) NULL,[UOMc] [decimal](25, 9) NULL,
[UOMPrice] [decimal](25, 9) NULL,[UOMUQty] [decimal](25, 9) NULL,[UOMWQty] [decimal](25, 9) NULL,
[TotalQuantity] [decimal](25, 9) NULL,[Post] [varchar](1) NULL,[PBOMId] [varchar](200) NULL)

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
	SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType NOT IN('Finish','Overhead','Raw','Pack')
UNION
SELECT 'B' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType IN('Finish')
UNION
SELECT 'C' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType IN('Raw')
UNION
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Pack')

UNION
SELECT 'E' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo,
CASE WHEN @IsPercent='Y' THEN '%' ELSE '-' END AS UOM,
b.EffectDate, 0 UseQuantity,
0 WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, 
 CASE WHEN @IsPercent='Y' THEN  isnull(b.RebateRate,0) ELSE 0 END AS TotalQuantity,
b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Overhead')
)AS a ORDER BY a.SL,a.BOMRawId


INSERT INTO #BOMRaws(BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId)
SELECT BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId 
 FROM BOMRaws b
WHERE b.BOMId IN(SELECT b.PBOMId FROM BOMRaws b 
                 WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
                 AND isnull(b.PBOMId,0) >0) AND b.cost>0  and b.RawItemType  IN('Raw')
UPDATE #BOMRaws SET
UseQuantity=isnull(#BOMRaws.UseQuantity,0)*isnull(p.totalQuantity,0),
WastageQuantity=isnull(#BOMRaws.WastageQuantity,0)*isnull(p.totalQuantity,0),
Cost=isnull(#BOMRaws.Cost,0)*isnull(p.totalQuantity,0),
UnitCost=isnull(#BOMRaws.UnitCost,0)*isnull(p.totalQuantity,0),
totalQuantity=isnull(#BOMRaws.totalQuantity,0)*isnull(p.totalQuantity,0)
FROM (SELECT isnull(b.UOMUQty,0)+isnull(b.UOMWQty,0) TotalQuantity,b.PBOMId
        FROM BOMRaws b 
      WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
      AND isnull(b.PBOMId,0) >0) p WHERE #BOMRaws.BOMId=p.pBOMId
----------BOM RawP
select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, isnull(b.UseQuantity,0)UseQuantity,
isnull(b.WastageQuantity,0)WastageQuantity, isnull(b.Cost,0)Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, isnull(b.UnitCost,0)UnitCost, isnull(b.TotalQuantity,0)TotalQuantity,b.RawItemType
,fp.ProductName FProductName,fp.ProductCode FProductCode

FROM #BOMRaws b LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

)AS a ORDER BY a.SL,a.BOMRawId

DROP TABLE #BOMRaws
";

                #endregion SQL Statement

                #region SQL Command

                SqlCommand objCommVAT1Ga = new SqlCommand();
                objCommVAT1Ga.Connection = currConn;

                objCommVAT1Ga.CommandText = sqlText;
                objCommVAT1Ga.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Ga.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@IsPercent"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@IsPercent", IsPercent);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@IsPercent"].Value = IsPercent;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Ga.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Ga.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Ga.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Ga);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT1GhaNew(string finishitemno, string EffectDate, string VATName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1Gha");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement


                sqlText = @"

--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo=154;
--SET @VATName='VAT 1';
--SET @EffectDate='2013/04/20';

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName


SELECT b.RawItemNo, isnull(p.ProductCode,'N')ProductCode,
 isnull(p.ProductName,'NA')ProductName, isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, convert (varchar,b.EffectDate,120)EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
FROM BOMRaws b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.RawItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0 and b.RawItemType not in ('Overhead');



                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT1Gha = new SqlCommand();
                objCommVAT1Gha.Connection = currConn;

                objCommVAT1Gha.CommandText = sqlText;
                objCommVAT1Gha.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1Gha.Parameters.Contains("@finishitemno"))
                {
                    objCommVAT1Gha.Parameters.AddWithValue("@finishitemno", finishitemno);
                }
                else
                {
                    objCommVAT1Gha.Parameters["@finishitemno"].Value = finishitemno;
                }

                if (!objCommVAT1Gha.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1Gha.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1Gha.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1Gha.Parameters.Contains("@VATName"))
                {
                    objCommVAT1Gha.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1Gha.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1Gha);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet FormKaNew(string FinishItemNo, string EffectDate, string VATName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportFormKa");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            --DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo=154;
--SET @VATName='VAT 1';
--SET @EffectDate='2013/04/20';

SELECT b.BOMId, b.FinishItemNo, convert (varchar,b.EffectDate,120)EffectDate, b.VATName, b.Comments,
b.RebateTotal RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
ON b.FinishItemNo=p.ItemNo 
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName




                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommFormKa = new SqlCommand();
                objCommFormKa.Connection = currConn;

                objCommFormKa.CommandText = sqlText;
                objCommFormKa.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommFormKa.Parameters.Contains("@FinishItemNo"))
                {
                    objCommFormKa.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommFormKa.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommFormKa.Parameters.Contains("@EffectDate"))
                {
                    objCommFormKa.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommFormKa.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommFormKa.Parameters.Contains("@VATName"))
                {
                    objCommFormKa.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommFormKa.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommFormKa);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BOMNew(string FinishItemNo, string EffectDate, string VATName, string IsPercent)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1");

            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

";

                #endregion SQL Statement

                #region SQL Statement

                sqlText = @"

--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @IsPercent AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo='6568';
--SET @IsPercent='Y';
--SET @VATName='VAT 1';
--SET @EffectDate='2013-04-01';

DECLARE @WithOverhead AS VARCHAR(200);
select @WithOverhead=settingValue from Settings where SettingGroup='BOM' and SettingName='TollIssueCostWithOthers'
 

CREATE TABLE #BOMRaws([BOMRawId] [varchar](200)  NULL,[BOMId] [varchar](200)  NULL,
[BOMLineNo] [int] NULL,[FinishItemNo] [varchar](200)  NULL,[RawItemNo] [varchar](200)  NULL,
[RawItemType] [varchar](200) NOT NULL,[EffectDate] [datetime]  NULL,[VATName] [varchar](200)  NULL,
[UseQuantity] [decimal](25, 9) NULL,[WastageQuantity] [decimal](25, 9) NULL,[Cost] [decimal](25, 9) NULL,
[UOM] [varchar](200) NULL,[VATRate] [decimal](25, 9) NULL,[VATAmount] [decimal](25, 9) NULL,
[SD] [decimal](25, 9) NULL,[SDAmount] [decimal](25, 9) NULL,[TradingMarkUp] [decimal](25, 9) NULL,
[RebateRate] [decimal](25, 9) NULL,[MarkUpValue] [decimal](25, 9) NULL,[CreatedBy] [varchar](200) NULL,
[CreatedOn] [datetime] NULL,[LastModifiedBy] [varchar](200) NULL,[LastModifiedOn] [datetime] NULL,
[UnitCost] [decimal](25, 9) NULL,[UOMn] [varchar](200) NULL,[UOMc] [decimal](25, 9) NULL,
[UOMPrice] [decimal](25, 9) NULL,[UOMUQty] [decimal](25, 9) NULL,[UOMWQty] [decimal](25, 9) NULL,
[TotalQuantity] [decimal](25, 9) NULL,[Post] [varchar](1) NULL,[PBOMId] [varchar](200) NULL)

IF(@VATName='VAT 1 (Toll Issue)' and @WithOverhead='N')

	BEGIN
SELECT b.BOMId, b.FinishItemNo, b.EffectDate, b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RebateTotal RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, '-'UOM, b.EffectDate, 0 UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Overhead')

)AS a ORDER BY a.SL,a.BOMRawId
	END
ELSE
BEGIN


SELECT b.BOMId, b.FinishItemNo, b.EffectDate, b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  pc.CategoryName, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo  LEFT OUTER JOIN 
ProductCategories pc ON p.CategoryID=pc.CategoryID

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
	SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType NOT IN('Finish','Overhead','Raw','Pack')
UNION
SELECT 'B' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType IN('Finish')
UNION
SELECT 'C' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType IN('Raw')
UNION
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Pack')

UNION
SELECT 'E' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo,
CASE WHEN @IsPercent='Y' THEN '%' ELSE '-' END AS UOM,
b.EffectDate, 0 UseQuantity,
0 WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost,
 CASE WHEN @IsPercent='Y' THEN  isnull(b.RebateRate,0) ELSE 0 END AS TotalQuantity,
b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.cost>0  and b.RawItemType  IN('Overhead')
)AS a ORDER BY a.SL,a.BOMRawId

	END

SELECT b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
 LEFT OUTER JOIN
products p ON HeadID=p.ItemNo

WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
AND b.AdditionalCost>0

INSERT INTO #BOMRaws(BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId)
SELECT BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId FROM BOMRaws b
WHERE b.BOMId IN(SELECT b.PBOMId FROM BOMRaws b 
                 WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
                 AND isnull(b.PBOMId,0) >0) AND b.cost>0  and b.RawItemType  IN('Raw')

UPDATE #BOMRaws SET
UseQuantity=isnull(#BOMRaws.UseQuantity,0)*isnull(p.totalQuantity,0),
WastageQuantity=isnull(#BOMRaws.WastageQuantity,0)*isnull(p.totalQuantity,0),
Cost=isnull(#BOMRaws.Cost,0)*isnull(p.totalQuantity,0),
UnitCost=isnull(#BOMRaws.UnitCost,0)*isnull(p.totalQuantity,0),
totalQuantity=isnull(#BOMRaws.totalQuantity,0)*isnull(p.totalQuantity,0)
FROM (SELECT isnull(b.UOMUQty,0)+isnull(b.UOMWQty,0) TotalQuantity,b.PBOMId
        FROM BOMRaws b 
      WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName
      AND isnull(b.PBOMId,0) >0) p WHERE #BOMRaws.BOMId=p.pBOMId

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
isnull(pc.CategoryName,'NA')CategoryName,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, isnull(b.UseQuantity,0)UseQuantity,
isnull(b.WastageQuantity,0)WastageQuantity, isnull(b.Cost,0)Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, isnull(b.UnitCost,0)UnitCost, isnull(b.TotalQuantity,0)TotalQuantity,b.RawItemType
,fp.ProductName FProductName,fp.ProductCode FProductCode

FROM #BOMRaws b LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

)AS a ORDER BY a.SL,a.BOMRawId

SELECT b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
LEFT OUTER JOIN
products p ON HeadID=p.ItemNo
WHERE b.BOMId IN(
SELECT b.PBOMId FROM BOMRaws b
WHERE b.FinishItemNo=@FinishItemNo AND b.EffectDate=@EffectDate AND b.VATName=@VATName

AND isnull(b.PBOMId,0) >0)
AND b.AdditionalCost>0


DROP TABLE #BOMRaws



";

                #endregion SQL Statement



                #region SQL Command

                SqlCommand objCommVAT1 = new SqlCommand();
                objCommVAT1.Connection = currConn;
                objCommVAT1.CommandText = sqlText;
                objCommVAT1.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1.Parameters.Contains("@IsPercent"))
                {
                    objCommVAT1.Parameters.AddWithValue("@IsPercent", IsPercent);
                }
                else
                {
                    objCommVAT1.Parameters["@IsPercent"].Value = IsPercent;
                }

                if (!objCommVAT1.Parameters.Contains("@FinishItemNo"))
                {
                    objCommVAT1.Parameters.AddWithValue("@FinishItemNo", FinishItemNo);
                }
                else
                {
                    objCommVAT1.Parameters["@FinishItemNo"].Value = FinishItemNo;
                }

                if (!objCommVAT1.Parameters.Contains("@EffectDate"))
                {
                    objCommVAT1.Parameters.AddWithValue("@EffectDate", EffectDate);
                }
                else
                {
                    objCommVAT1.Parameters["@EffectDate"].Value = EffectDate;
                }

                if (!objCommVAT1.Parameters.Contains("@VATName"))
                {
                    objCommVAT1.Parameters.AddWithValue("@VATName", VATName);
                }
                else
                {
                    objCommVAT1.Parameters["@VATName"].Value = VATName;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1);
                dataAdapter.Fill(dataSet);


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        public DataSet BOMNew(string BOMId, string VATName, string IsPercent)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT1");

            #endregion

            #region Try

            try
            {

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"

";

                #endregion SQL Statement

                #region SQL Statement

                sqlText = @"

--DECLARE @FinishItemNo AS VARCHAR(200);
--DECLARE @VATName AS VARCHAR(200);
--DECLARE @IsPercent AS VARCHAR(200);
--DECLARE @EffectDate AS DATETIME;

--SET @FinishItemNo='6568';
--SET @IsPercent='Y';
--SET @VATName='VAT 1';
--SET @EffectDate='2013-04-01';

DECLARE @WithOverhead AS VARCHAR(200);
select @WithOverhead=settingValue from Settings where SettingGroup='BOM' and SettingName='TollIssueCostWithOthers'
 

CREATE TABLE #BOMRaws([BOMRawId] [varchar](200)  NULL,[BOMId] [varchar](200)  NULL,
[BOMLineNo] [int] NULL,[FinishItemNo] [varchar](200)  NULL,[RawItemNo] [varchar](200)  NULL,
[RawItemType] [varchar](200) NOT NULL,[EffectDate] [datetime]  NULL,[VATName] [varchar](200)  NULL,
[UseQuantity] [decimal](25, 9) NULL,[WastageQuantity] [decimal](25, 9) NULL,[Cost] [decimal](25, 9) NULL,
[UOM] [varchar](200) NULL,[VATRate] [decimal](25, 9) NULL,[VATAmount] [decimal](25, 9) NULL,
[SD] [decimal](25, 9) NULL,[SDAmount] [decimal](25, 9) NULL,[TradingMarkUp] [decimal](25, 9) NULL,
[RebateRate] [decimal](25, 9) NULL,[MarkUpValue] [decimal](25, 9) NULL,[CreatedBy] [varchar](200) NULL,
[CreatedOn] [datetime] NULL,[LastModifiedBy] [varchar](200) NULL,[LastModifiedOn] [datetime] NULL,
[UnitCost] [decimal](25, 9) NULL,[UOMn] [varchar](200) NULL,[UOMc] [decimal](25, 9) NULL,
[UOMPrice] [decimal](25, 9) NULL,[UOMUQty] [decimal](25, 9) NULL,[UOMWQty] [decimal](25, 9) NULL,
[TotalQuantity] [decimal](25, 9) NULL,[Post] [varchar](1) NULL,[PBOMId] [varchar](200) NULL)

IF(@VATName='VAT 1 (Toll Issue)' and @WithOverhead='N')

	BEGIN
SELECT b.BOMId, b.FinishItemNo, b.EffectDate, b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RebateTotal RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo,  
--pc.CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

WHERE b.BOMId=@BOMId  

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,
--isnull(CategoryName,'NA')CategoryName,
case when CHARINDEX ('(',CategoryName,1)>0 and CHARINDEX (')',CategoryName,1)>0 then  substring(isnull(CategoryName,'N/A'),CHARINDEX ('(',CategoryName,1)+1,(CHARINDEX (')',CategoryName,1)-CHARINDEX ('(',CategoryName,1))-1) else isnull(CategoryName,'N/A') end CategoryName

,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, '-'UOM, b.EffectDate, 0 UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 ) and b.RawItemType  IN('Overhead')

)AS a ORDER BY  a.ProductName--a.SL,a.BOMRawId
	END
ELSE
BEGIN


SELECT b.BOMId, b.FinishItemNo, b.EffectDate, b.VATName, b.Comments,
b.RawTotal,
0 PackingTotal, b.RebateTotal, b.AdditionalTotal, b.RebateAdditionTotal,
b.NBRPrice, b.PacketPrice, b.RawOHCost, b.LastNBRPrice,
b.LastNBRWithSDAmount, b.TotalQuantity, b.SDAmount, b.VATAmount,
b.WholeSalePrice, b.NBRWithSDAmount, b.MarkUpValue, b.LastMarkUpValue,
b.LastSDAmount, b.LastAmount,	
b.UOM  ,p.ProductCode, p.ProductName,
p.ProductDescription,p.HSCodeNo, 
--pc.CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName
, pc.IsRaw
FROM BOMs b
LEFT OUTER JOIN Products p ON b.FinishItemNo=p.ItemNo  LEFT OUTER JOIN 
ProductCategories pc ON p.CategoryID=pc.CategoryID

WHERE b.BOMId=@BOMId 

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
	SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType NOT IN('Finish','Overhead','Raw','Pack')
UNION
SELECT 'B' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType IN('Finish')
UNION
SELECT 'C' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType IN('Raw')
UNION
SELECT 'D' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, b.UseQuantity,
b.WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost, b.TotalQuantity,b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo
WHERE b.BOMId=@BOMId 
AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType  IN('Pack')

UNION
SELECT 'E' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo,
CASE WHEN @IsPercent='Y' THEN '%' ELSE '-' END AS UOM,
b.EffectDate, 0 UseQuantity,
0 WastageQuantity, b.Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, b.UnitCost,
 CASE WHEN @IsPercent='Y' THEN  isnull(b.RebateRate,0) ELSE 0 END AS TotalQuantity,
b.RawItemType
,isnull(fp.ProductName,'NA') FProductName,isnull(fp.ProductCode,'NA') FProductCode
FROM BOMRaws b
LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID

LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

WHERE b.BOMId=@BOMId 
AND (b.cost>0  ) and b.RawItemType  IN('Overhead')
)AS a ORDER BY  a.ProductName--a.SL,a.BOMRawId

	END

--SELECT b.BOMId, b.OHLineNo, 
--
--b.HeadName HeadNameOld,
--p.ProductCode OHCode,p.ProductName HeadName,
-- b.EffectDate, b.VATName, b.HeadAmount,
--b.RebatePercent, b.RebateAmount, b.AdditionalCost
--FROM BOMCompanyOverhead  b 
-- LEFT OUTER JOIN
--products p ON HeadID=p.ItemNo
--
--WHERE b.BOMId=@BOMId 
--AND b.AdditionalCost>0

select * from(
SELECT 'A'Sl, b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
 LEFT OUTER JOIN
products p ON HeadID=p.ItemNo

WHERE b.BOMId=@BOMId 
AND b.AdditionalCost>0
and p.ProductName not in('Margin','estimated profit')
--order by p.ProductName
union all
SELECT 'B'Sl, b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
 LEFT OUTER JOIN
products p ON HeadID=p.ItemNo

WHERE b.BOMId=@BOMId 
AND b.AdditionalCost>0
and p.ProductName  in('Margin','estimated profit')
--order by p.ProductName
) as a order by  a.Sl,a.HeadName--a.Sl,a.HeadName

INSERT INTO #BOMRaws(BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId)
SELECT BOMRawId,
BOMId,BOMLineNo,FinishItemNo,RawItemNo,RawItemType,EffectDate,VATName,UseQuantity,WastageQuantity,Cost,
UOM,VATRate,VATAmount,SD,SDAmount,TradingMarkUp,RebateRate,MarkUpValue,CreatedBy,CreatedOn,
LastModifiedBy,LastModifiedOn,UnitCost,UOMn,UOMc,UOMPrice,UOMUQty,UOMWQty,TotalQuantity,Post,PBOMId FROM BOMRaws b
WHERE b.BOMId IN(SELECT b.PBOMId FROM BOMRaws b 
                 WHERE b.BOMId=@BOMId 
                 AND isnull(b.PBOMId,0) >0) AND (b.cost>0 or b.unitCost>0 or b.TotalQuantity>0)  and b.RawItemType  IN('Raw')

UPDATE #BOMRaws SET
UseQuantity=isnull(#BOMRaws.UseQuantity,0)*isnull(p.totalQuantity,0),
WastageQuantity=isnull(#BOMRaws.WastageQuantity,0)*isnull(p.totalQuantity,0),
Cost=isnull(#BOMRaws.Cost,0)*isnull(p.totalQuantity,0),
UnitCost=isnull(#BOMRaws.UnitCost,0)*isnull(p.totalQuantity,0),
totalQuantity=isnull(#BOMRaws.totalQuantity,0)*isnull(p.totalQuantity,0)
FROM (SELECT isnull(b.UOMUQty,0)+isnull(b.UOMWQty,0) TotalQuantity,b.PBOMId
        FROM BOMRaws b 
      WHERE b.BOMId=@BOMId 
      AND isnull(b.PBOMId,0) >0) p WHERE #BOMRaws.BOMId=p.pBOMId

select isnull(SL,'0')SL,isnull(RawItemNo,'0')RawItemNo,isnull(ProductCode,'NA')ProductCode,isnull(ProductName,'NA')ProductName,isnull(ProductDescription,'NA')ProductDescription,isnull(CategoryName,'NA')CategoryName,isnull(IsRaw,'NA')IsRaw,
isnull(BOMRawId,'0')BOMRawId,isnull(BOMId,'0')BOMId,isnull(BOMLineNo,'0')BOMLineNo,isnull(FinishItemNo,'0')FinishItemNo,isnull(UOM,'NA')UOM,isnull(EffectDate,'1900/01/01')EffectDate,isnull(UseQuantity,0)UseQuantity,
isnull(WastageQuantity,0)WastageQuantity,isnull(Cost,0)Cost,isnull(VATRate,0)VATRate,isnull(VATAmount,0)VATAmount,isnull(SD,0)SD,isnull(SDAmount,0)SDAmount,
isnull(TradingMarkUp,0)TradingMarkUp,isnull(MarkUpValue,0)MarkUpValue,isnull(RebateRate,0)RebateRate,isnull(UnitCost,0)UnitCost,isnull(TotalQuantity,0)TotalQuantity,isnull(RawItemType,'NA')RawItemType,isnull(FProductName,'NA')FProductName,isnull(FProductCode,'NA')FProductCode
FROM 
(
SELECT 'A' SL,b.RawItemNo, isnull(p.ProductCode,'NA')ProductCode,
 isnull(p.ProductName,'NA')ProductName, 
 isnull(p.ProductDescription,'NA')ProductDescription,
--isnull(pc.CategoryName,'NA')CategoryName
case when CHARINDEX ('(',PC.CategoryName,1)>0 and CHARINDEX (')',PC.CategoryName,1)>0 then  substring(isnull(PC.CategoryName,'N/A'),CHARINDEX ('(',PC.CategoryName,1)+1,(CHARINDEX (')',PC.CategoryName,1)-CHARINDEX ('(',PC.CategoryName,1))-1) else isnull(PC.CategoryName,'N/A') end CategoryName

,isnull(pc.IsRaw,'NA')IsRaw,
b.BOMRawId, b.BOMId, b.BOMLineNo, b.FinishItemNo, b.UOM, b.EffectDate, isnull(b.UseQuantity,0)UseQuantity,
isnull(b.WastageQuantity,0)WastageQuantity, isnull(b.Cost,0)Cost, b.VATRate, b.VATAmount, b.SD, b.SDAmount,
b.TradingMarkUp, b.MarkUpValue, b.RebateRate, isnull(b.UnitCost,0)UnitCost, isnull(b.TotalQuantity,0)TotalQuantity,b.RawItemType
,fp.ProductName FProductName,fp.ProductCode FProductCode

FROM #BOMRaws b LEFT OUTER JOIN Products p ON b.RawItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
LEFT OUTER JOIN Products Fp ON b.FinishItemNo =fp.ItemNo

)AS a ORDER BY  a.ProductName--a.SL,a.BOMRawId

SELECT b.BOMId, b.OHLineNo, 

b.HeadName HeadNameOld,
p.ProductCode OHCode,p.ProductName HeadName,
 b.EffectDate, b.VATName, b.HeadAmount,
b.RebatePercent, b.RebateAmount, b.AdditionalCost
FROM BOMCompanyOverhead  b 
LEFT OUTER JOIN
products p ON HeadID=p.ItemNo
WHERE b.BOMId IN(
SELECT b.PBOMId FROM BOMRaws b
WHERE b.BOMId=@BOMId 

AND isnull(b.PBOMId,0) >0)
AND b.AdditionalCost>0



DROP TABLE #BOMRaws



";

                #endregion SQL Statement



                #region SQL Command

                SqlCommand objCommVAT1 = new SqlCommand();
                objCommVAT1.Connection = currConn;
                objCommVAT1.CommandText = sqlText;
                objCommVAT1.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT1.Parameters.Contains("@IsPercent"))
                {
                    objCommVAT1.Parameters.AddWithValue("@IsPercent", IsPercent);
                }
                else
                {
                    objCommVAT1.Parameters["@IsPercent"].Value = IsPercent;
                }

                if (!objCommVAT1.Parameters.Contains("@BOMId"))
                {
                    objCommVAT1.Parameters.AddWithValue("@BOMId", BOMId);
                }
                else
                {
                    objCommVAT1.Parameters["@BOMId"].Value = BOMId;
                }
                CommonDAL commonDal = new CommonDAL();
                bool TollIssueWithRaw = false;

                TollIssueWithRaw = Convert.ToBoolean(commonDal.settingValue("BOM", "VAT1(TollIssue)WithRaw") == "Y" ? true : false);
                if (!TollIssueWithRaw)
                {
                    if (!objCommVAT1.Parameters.Contains("@VATName"))
                    {
                        objCommVAT1.Parameters.AddWithValue("@VATName", VATName);
                    }
                    else
                    {
                        objCommVAT1.Parameters["@VATName"].Value = VATName;
                    }
                }
                else
                {
                    if (!objCommVAT1.Parameters.Contains("@VATName"))
                    {
                        objCommVAT1.Parameters.AddWithValue("@VATName", "");
                    }
                    else
                    {
                        objCommVAT1.Parameters["@VATName"].Value = "";
                    }

                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT1);
                dataAdapter.Fill(dataSet);


            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BankNew(string BankID)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Bank Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT   
                            BankID ,
BankCode ,
                            isnull(BankName,'N/A')BankName, 
                            isnull(BranchName,'N/A')BranchName,
                            isnull(Address1,'N/A')Address1,
                            isnull(Address2,'N/A')Address2,
                            isnull(Address3,'N/A')Address3,
                            isnull(TelephoneNo,'N/A')TelephoneNo, 
                            isnull(ContactPerson,'N/A')ContactPerson,
                            isnull(ContactPersonTelephone,'N/A')ContactPersonTelephone, 
                            isnull(ContactPersonEmail,'N/A')ContactPersonEmail,
                            isnull(AccountNumber,'N/A')AccountNumber
                            FROM         dbo.BankInformations   
 ";
                if (!string.IsNullOrWhiteSpace(BankID))
                {
                    sqlText += " WHERE BankID=@BankID";
                }
                sqlText += " order by BankName";


                #endregion

                #region SQL Command

                SqlCommand objCommBankReport = new SqlCommand();
                objCommBankReport.Connection = currConn;

                objCommBankReport.CommandText = sqlText;
                objCommBankReport.CommandType = CommandType.Text;
                objCommBankReport.Parameters.AddWithValueAndNullHandle("@BankID", BankID);


                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommBankReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet CustomerGroupNew(string CustomerGroupID)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Customer Group Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT    CustomerGroupID, CustomerGroupName, CustomerGroupDescription, GroupType,Comments, ActiveStatus
                            FROM         CustomerGroups 
";
                if (!string.IsNullOrWhiteSpace(CustomerGroupID))
                {

                    sqlText += " WHERE CustomerGroupID = @CustomerGroupID ";
                }
                sqlText += "  order by CustomerGroupName";

                #endregion

                #region SQL Command

                SqlCommand objCommCustomrGroupReport = new SqlCommand();
                objCommCustomrGroupReport.Connection = currConn;

                objCommCustomrGroupReport.CommandText = sqlText;
                objCommCustomrGroupReport.CommandType = CommandType.Text;
                objCommCustomrGroupReport.Parameters.AddWithValueAndNullHandle("@CustomerGroupID", CustomerGroupID);


                #endregion

                #region Parameter

                if (CustomerGroupID == "")
                {
                    if (!objCommCustomrGroupReport.Parameters.Contains("@CustomerGroupID"))
                    {
                        objCommCustomrGroupReport.Parameters.AddWithValue("@CustomerGroupID", System.DBNull.Value);
                    }
                    else
                    {
                        objCommCustomrGroupReport.Parameters["@CustomerGroupID"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommCustomrGroupReport.Parameters.Contains("@CustomerGroupID"))
                    {
                        objCommCustomrGroupReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID);
                    }
                    else
                    {
                        objCommCustomrGroupReport.Parameters["@CustomerGroupID"].Value = CustomerGroupID;
                    }
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCustomrGroupReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet CustomerNew(string CustomerID, string CustomerGroupID)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Customer Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT  
                            C.CustomerID,
                            isnull(C.CustomerCode,'N/A')CustomerCode,
                            isnull(C.CustomerName,'N/A')CustomerName,
                            isnull(C.VATRegistrationNo,'N/A')VATRegistrationNo,
                            isnull(C.TINNo,'N/A')TINNo,
                            isnull(C.Address1,'N/A')Address1,
                            isnull(C.Address2,'N/A')Address2,
                            isnull(C.Address3,'N/A')Address3,
                            isnull(C.TelephoneNo,'N/A')TelephoneNo,
                            isnull(C.ContactPerson,'N/A')ContactPerson,
                            isnull(C.ContactPersonTelephone,'N/A')ContactPersonTelephone,
                            isnull(C.ContactPersonEmail,'N/A')ContactPersonEmail ,
                            isnull(CG.CustomerGroupName,'N/A')CustomerGroupName,

                            isnull(CG.GroupType,'N/A')GroupType

                            FROM         dbo.Customers AS C LEFT OUTER JOIN
                                                  dbo.CustomerGroups AS CG ON C.CustomerGroupID = CG.CustomerGroupID
where c.ActiveStatus in ('N','Y')
";

                if (!string.IsNullOrWhiteSpace(CustomerID))
                {
                    sqlText += " and CustomerID=@CustomerID";

                }
                if (!string.IsNullOrWhiteSpace(CustomerGroupID))
                {
                    sqlText += " and c.CustomerGroupID=@CustomerGroupID ";

                }
                sqlText += " order by C.CustomerName ";


                #endregion

                #region SQL Command

                SqlCommand objCommCustomrReport = new SqlCommand();
                objCommCustomrReport.Connection = currConn;

                objCommCustomrReport.CommandText = sqlText;
                objCommCustomrReport.CommandType = CommandType.Text;
                objCommCustomrReport.Parameters.AddWithValue("@CustomerID", CustomerID);
                objCommCustomrReport.Parameters.AddWithValue("@CustomerGroupID", CustomerGroupID);


                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCustomrReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet DepositNew(string DepositNo, string DepositDateFrom, string DepositDateTo, string BankID, string Post, string transactionType)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Deposit Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
 SELECT TType,DepositId,TreasuryNo,DepositType,DepositDateTime,DepositAmount,ChequeNo,
ChequeDate,BankName,BranchName,DepositPerson,TransactionType,Post
FROM 
(
SELECT    'Deposit' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
isnull(D.TransactionType ,'N/A')TransactionType,d.Post,B.BankID

FROM         dbo.Deposits AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
where Transactiontype NOT IN('AdjCashPayble-Credit','Treasury-Credit','VDS-Credit')

UNION ALL

SELECT    'Deposit-Credit' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
-isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
isnull(D.TransactionType ,'N/A')TransactionType,d.Post,B.BankID

FROM         dbo.Deposits AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
where Transactiontype IN('AdjCashPayble-Credit','Treasury-Credit','VDS-Credit')


  

UNION ALL

SELECT   'SD' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
--'SDDeposit' TransactionType,
isnull(D.TransactionType ,'N/A')TransactionType,d.Post,B.BankID

FROM SDDeposits AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
  where  TransactionType NOT IN('Treasury-Opening','Treasury-Credit')

  UNION ALL

SELECT   'SD-Credit' TType,
D.DepositId,
isnull(D.TreasuryNo,'N/A') TreasuryNo,
isnull(D.DepositType,'N/A')DepositType ,
convert (varchar(200),D.DepositDateTime,120)DepositDateTime,
-isnull(D.DepositAmount,0)DepositAmount,
isnull(D.ChequeNo,'N/A')ChequeNo,
convert (varchar(200),D.ChequeDate,120)ChequeDate ,
isnull(B.BankName,'N/A')BankName,
isnull(B.BranchName,'N/A')BranchName,
isnull(D.DepositPerson ,'N/A')DepositPerson,
--'SDDeposit' TransactionType
isnull(D.TransactionType ,'N/A')TransactionType
,d.Post,B.BankID

FROM SDDeposits AS D LEFT OUTER JOIN
dbo.BankInformations AS B ON D.BankID = B.BankID
  where  TransactionType IN('Treasury-Credit')


) AS A


WHERE 
--(DepositAmount>0) AND
 TransactionType NOT IN('Treasury-Opening')";
                if (!string.IsNullOrWhiteSpace(DepositNo))
                {
                    sqlText += " and DepositId='" + DepositNo + "' ";
                }
                if (!string.IsNullOrWhiteSpace(DepositDateFrom))
                {
                    sqlText += " and DepositDateTime >='" + DepositDateFrom + "' ";
                }
                if (!string.IsNullOrWhiteSpace(DepositDateTo))
                {
                    sqlText += " and DepositDateTime <dateadd(d,1, '" + DepositDateTo + "') ";
                }


                if (!string.IsNullOrWhiteSpace(BankID))
                {
                    sqlText += " and BankID='" + BankID + "' ";
                }
                if (!string.IsNullOrWhiteSpace(Post))
                {
                    sqlText += " and Post='" + Post + "' ";
                }
                if (!string.IsNullOrWhiteSpace(transactionType))
                {
                    sqlText += " and TransactionType='" + transactionType + "' ";
                }


                sqlText += "  order by TransactionType,DepositDateTime";

                #endregion

                #region SQL Command

                SqlCommand objCommDepositReport = new SqlCommand();
                objCommDepositReport.Connection = currConn;

                objCommDepositReport.CommandText = sqlText;
                objCommDepositReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDepositReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VATDisposeDsNew(string DisposeNumber)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT Dispose Ds");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT 	
                            d.DisposeNumber RFId
                            ,isnull(SaleNumber,'NA')BENumber
                            ,isnull(PurchaseNumber,'NA')PurchaseNumber
                            ,LineNumber
                            ,d.ItemNo
                            ,p.ProductName
                            ,p.ProductCode
                            ,p.ProductDescription
                            ,d.UOM
                            ,isnull((Quantity+QuantityImport)*RealPrice,0) RealAmount
                            ,isnull(Quantity,0)+isnull(QuantityImport,0)Quantity
                            ,'NA' serialNumber
                            ,isnull(d.VATAmount,0) RealVAT
                            ,isnull(PresentPrice,0) PresentValue
                            ,d.Remarks
                            ,convert (varchar(200),D.DisposeDate,120)PostingDate,
                            isnull(dh.AppVATAmount,0)+ isnull(dh.AppVATAmountImport,0)AppVATAmount,
                            isnull(dh.AppTotalPrice,0)+isnull(dh.AppTotalPriceImport,0)AppTotalPrice,

                            convert (varchar(200),dh.AppDate,120)AppDate,
                            dh.AppRefNumber,
                            dh.AppRemarks

                            FROM DisposeDetails D LEFT OUTER JOIN
                            Products P ON D.ItemNo=p.ItemNo left outer  JOIN
                            DisposeHeaders DH on d.DisposeNumber=dh.DisposeNumber

                            WHERE 
                            (dh.DisposeNumber = @DisposeNumber) 
                            and Quantity>0
                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommRRItem = new SqlCommand();
                objCommRRItem.Connection = currConn;

                objCommRRItem.CommandText = sqlText;
                objCommRRItem.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommRRItem.Parameters.Contains("@DisposeNumber"))
                {
                    objCommRRItem.Parameters.AddWithValue("@DisposeNumber", DisposeNumber);
                }
                else
                {
                    objCommRRItem.Parameters["@DisposeNumber"].Value = DisposeNumber;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommRRItem);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet MISVAT16New(string CategoryId, string StartDate, string EndDate, string UserName, string ItemNo)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Report MIS VAT-16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            --DECLARE @Itemno VARCHAR(200);
                           -- DECLARE @CategoryId VARCHAR(200);

                           -- DECLARE @StartDate DATETIME;
                           -- DECLARE @EndDate DATETIME;

CREATE TABLE #VAT_16_Management(	[ItemNo] [varchar](200) NULL,	[Opening] [decimal](25, 9) NULL,	
[UCost] [decimal](25, 9) NULL,	[Purchase] [decimal](25, 9) NULL,	[Issue] [decimal](25, 9) NULL)

                            insert into #VAT_16_Management(ItemNo,Opening,UCost,Purchase,Issue)
                            select distinct itemno,0,IssuePrice,0,0 from Products
                            where (itemno in(select  distinct itemno from PurchaseInvoiceDetails 
                            where PurchaseInvoiceDetails.Post='Y' and InvoiceDateTime >= @StartDate and InvoiceDateTime <DATEADD(d,1,@EndDate)  )
                            or itemno in(select  distinct itemno from IssueDetails 
                            where Post='Y' and IssueDateTime >= @StartDate and IssueDateTime < DATEADD(d,1,@EndDate) ))
                            and (CategoryId = @CategoryId or @CategoryId is null )
                            and (ItemNo = @ItemNo or @ItemNo is null )

                            update #VAT_16_Management set Opening=
                            isnull(Products.OpeningBalance,0)+isnull(Purchase.PurchaseQuantity,0)-isnull(Issue.IssueQuantity,0)
                            from #VAT_16_Management left outer join
                            Products on #VAT_16_Management.ItemNo=Products.ItemNo  left outer join
                            (select ItemNo,SUM(Quantity)PurchaseQuantity
                            from PurchaseInvoiceDetails
                            where Post='Y' and InvoiceDateTime < @StartDate  
                            group by ItemNo) Purchase on #VAT_16_Management.ItemNo=Purchase.itemno left outer join
                            (select ItemNo, SUM(Quantity)IssueQuantity 
                            from IssueDetails
                            where  Post='Y' and IssueDateTime < @StartDate 
                            group by ItemNo) Issue on #VAT_16_Management.ItemNo=Issue.ItemNo 

                            update #VAT_16_Management set Purchase=
                            isnull(Purchase.PurchaseQuantity,0)
                            from #VAT_16_Management left outer join
                            (select ItemNo,SUM(Quantity)PurchaseQuantity
                            from PurchaseInvoiceDetails
                            where Post='Y' and InvoiceDateTime >= @StartDate and InvoiceDateTime <DATEADD(d,1,@EndDate)
                            group by ItemNo) Purchase on #VAT_16_Management.ItemNo=Purchase.itemno

                            update #VAT_16_Management set Issue=
                            isnull(Issue.IssueQuantity,0)
                            from #VAT_16_Management  left outer join
                            (select ItemNo, SUM(Quantity)IssueQuantity 
                            from IssueDetails
                            where  Post='Y' and  IssueDateTime >= @StartDate and IssueDateTime < DATEADD(d,1,@EndDate)
                            group by ItemNo) Issue on #VAT_16_Management.ItemNo=Issue.ItemNo 

                            select a.itemno,b.productname,b.uom,a.opening,a.ucost,a.Purchase,a.Issue
                            from #VAT_16_Management as a left outer join
                            Products as b on a.itemno=b.itemno

                            DROP table #VAT_16_Management

                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                //if (!objCommVAT16.Parameters.Contains("@CategoryId"))
                //{ objCommVAT16.Parameters.AddWithValue("@CategoryId", CategoryId); }
                //else { objCommVAT16.Parameters["@CategoryId"].Value = CategoryId; }

                if (CategoryId == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@CategoryId"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@CategoryId", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@CategoryId"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@CategoryId"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@CategoryId", CategoryId);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@CategoryId"].Value = CategoryId;
                    }
                }


                if (!objCommVAT16.Parameters.Contains("@StartDate"))
                {
                    objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT16.Parameters.Contains("@EndDate"))
                {
                    objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }

                if (ItemNo == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@ItemNo", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@ItemNo"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                    }
                }
                //if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                //{ objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo); }
                //else { objCommVAT16.Parameters["@ItemNo"].Value = ItemNo; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet MISVAT17New(string CategoryId, string UserName, string StartDate, string EndDate, string ItemNo)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Report MIS VAT-17");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
CREATE TABLE #VAT_17_Management(	[ItemNo] [varchar](200) NULL,	[Opening] [decimal](25, 9) NULL,	
[UCost] [decimal](25, 9) NULL,	[Received] [decimal](25, 9) NULL,	[Sale] [decimal](25, 9) NULL) 

                            insert into #VAT_17_Management(ItemNo,Opening,UCost,Received,Sale)
                            select distinct itemno,0,NBRPrice,0,0 from Products
                            where (itemno in(select  distinct itemno from ReceiveDetails 
                                                where Post='Y' and ReceiveDateTime >= @StartDate and ReceiveDateTime <DATEADD(d,1,@EndDate) )
                            or itemno in(select  distinct itemno from SalesInvoiceDetails 
                                            where  Post='Y' and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) ))
                            and (CategoryId = @CategoryId or @CategoryId is null)
                            and (ItemNo = @ItemNo or @ItemNo is null)

                            update #VAT_17_Management set Opening=
                            isnull(Products.OpeningBalance,0)+isnull(Received.ReceivedQuantity,0)-
                            isnull(Sale.SaleQuantity,0)+isnull(SaleC.SaleQuantity,0)
                            from #VAT_17_Management left outer join
                            Products on #VAT_17_Management.ItemNo=Products.ItemNo 
                            left outer join
                            (select ItemNo,SUM(Quantity)ReceivedQuantity
                            from ReceiveDetails
                            where  Post='Y' and ReceiveDateTime < @StartDate 
                            group by ItemNo) Received on #VAT_17_Management.ItemNo=Received.itemno
                            left outer join
                            (select ItemNo, SUM( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity,SUM(isnull(SubTotal,0)+isnull(SDAmount,0)+
                            isnull(VATAmount,0)+(isnull(SubTotal,0)*isnull(tradingMarkup,0)/100))SaleAmount 
                            from SalesInvoiceDetails LEFT OUTER JOIN
                            SalesInvoiceHeaders sih ON SalesInvoiceDetails.SalesInvoiceNo=sih.SalesInvoiceNo
                            where  sih.Post='Y' and sih.TransactionType NOT IN ('Credit') 
                            and SalesInvoiceDetails.InvoiceDateTime < @StartDate 
                            group by ItemNo) Sale on #VAT_17_Management.ItemNo=Sale.ItemNo  left outer join
                            (select ItemNo, SUM( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity,SUM(isnull(SubTotal,0)+isnull(SDAmount,0)
                            +isnull(VATAmount,0)+(isnull(SubTotal,0)*isnull(tradingMarkup,0)/100))SaleAmount 
                            from SalesInvoiceDetails LEFT OUTER JOIN
                            SalesInvoiceHeaders sih ON SalesInvoiceDetails.SalesInvoiceNo=sih.SalesInvoiceNo
                            where  sih.Post='Y' and sih.TransactionType IN ('Credit') 
                            and SalesInvoiceDetails.InvoiceDateTime < @StartDate 
                            group by ItemNo) SaleC on #VAT_17_Management.ItemNo=SaleC.ItemNo


                            update #VAT_17_Management set Received=
                            isnull(Received.ReceivedQuantity,0)+isnull(SaleC.SaleQuantity,0)
                            from #VAT_17_Management left outer join
                            (select ItemNo,SUM(Quantity)ReceivedQuantity
                            from ReceiveDetails
                            where  Post='Y' and ReceiveDateTime >= @StartDate and ReceiveDateTime <DATEADD(d,1,@EndDate)
                            group by ItemNo) Received on #VAT_17_Management.ItemNo=Received.itemno
                            left outer join
                            (select ItemNo, SUM( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end )SaleQuantity 
                            from SalesInvoiceDetails
                            where  Post='Y' and saleType in('Credit')
                            and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate)
                            group by ItemNo) SaleC on #VAT_17_Management.ItemNo=SaleC.ItemNo


                            update #VAT_17_Management set Sale=
                            isnull(Sale.SaleQuantity,0)
                            from #VAT_17_Management left outer join
                            (select ItemNo, SUM(Quantity)SaleQuantity 
                            from SalesInvoiceDetails
                            where saleType in('New','Debit') 
                            and InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate)
                            group by ItemNo) Sale on #VAT_17_Management.ItemNo=Sale.ItemNo 


                            select a.itemno,b.productname,b.uom,a.opening,a.ucost,a.received,a.sale
                            from #VAT_17_Management as a left outer join
                            Products as b on a.itemno=b.itemno

                            DROP table #VAT_17_Management

                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT17 = new SqlCommand();
                objCommVAT17.Connection = currConn;

                objCommVAT17.CommandText = sqlText;
                objCommVAT17.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (CategoryId == "")
                {
                    if (!objCommVAT17.Parameters.Contains("@CategoryId"))
                    {
                        objCommVAT17.Parameters.AddWithValue("@CategoryId", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT17.Parameters["@CategoryId"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT17.Parameters.Contains("@CategoryId"))
                    {
                        objCommVAT17.Parameters.AddWithValue("@CategoryId", CategoryId);
                    }
                    else
                    {
                        objCommVAT17.Parameters["@CategoryId"].Value = CategoryId;
                    }
                }
                if (!objCommVAT17.Parameters.Contains("@UserName"))
                {
                    objCommVAT17.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT17.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = StartDate;
                }
                // Common Filed

                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = EndDate;
                }


                if (ItemNo == "")
                {
                    if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT17.Parameters.AddWithValue("@ItemNo", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT17.Parameters["@ItemNo"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                    {
                        objCommVAT17.Parameters.AddWithValue("@ItemNo", ItemNo);
                    }
                    else
                    {
                        objCommVAT17.Parameters["@ItemNo"].Value = ItemNo;
                    }
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet MISVAT18New(string UserName, string StartDate, string EndDate)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Report MIS VAT-18");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            declare @cnt int
                            declare @UnitCount int
                            declare @PVat [decimal](18, 2);

CREATE TABLE #VAT_18_Management(	[Sl] [decimal](25, 9) NULL,	[PeriodName] [varchar](200) NULL,
[PeriodStart] [datetime] NULL,	[PeriodEnd] [datetime] NULL,	[Opening] [decimal](25, 9) NULL,	
[Deposit] [decimal](25, 9) NULL,	[Purchase] [decimal](25, 9) NULL,	[Sale] [decimal](25, 9) NULL) 

                            insert into #VAT_18_Management(Sl,PeriodName,PeriodStart,PeriodEnd,Opening,Deposit,Purchase,Sale)
                            select ROW_NUMBER() OVER(ORDER by PeriodStart),PeriodName,PeriodStart,PeriodEnd,0,0,0,0 from fiscalyear
                            where PeriodStart >=@StartDate
                            and PeriodEnd <=@EndDate
                            order by PeriodStart

                            set @cnt=1
                            set @UnitCount=(select max (sl) from #VAT_18_Management)
                            while @cnt<=@UnitCount
                            begin

                            select @PVat= isnull(sum(DepositAmount),0)    
                             from  Deposits WHERE Post='Y' and  DepositDateTime < 	(select PeriodStart from #VAT_18_Management where sl=@cnt )
                            select @PVat= @PVat+isnull(sum(totalvatamount) ,0)    
                            from  PurchaseInvoiceHeaders where invoicedatetime < (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            select @PVat= @PVat-isnull(sum(totalvatamount),0)    
                             from  SalesInvoiceHeaders 
                                  where SalesInvoiceHeaders.TransactionType NOT IN('Credit') AND  Post='Y' and invoicedatetime<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            select @PVat= @PVat+isnull(sum(totalvatamount) ,0)   
                             from  SalesInvoiceHeaders     where Post='Y' and   SalesInvoiceHeaders.TransactionType IN('Credit')
                              and invoicedatetime < (select PeriodStart from #VAT_18_Management where sl=@cnt )

                            update #VAT_18_Management set Opening=@PVat where Sl=@cnt

                            update  #VAT_18_Management set 
                            deposit=
                            (select   isnull(sum(DepositAmount),0)
                            from  Deposits    where Post='Y' and DepositDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt) 
                            and DepositDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt)))
                            where sl=@cnt

                            update  #VAT_18_Management set sale=
                            (select isnull(sum(TotalVATAmount),0)
                            from  SalesInvoiceHeaders 
                            where Post='Y'   and SalesInvoiceHeaders.TransactionType NOT IN('Credit')and InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))) 

                             where sl=@cnt 

                            update  #VAT_18_Management set Purchase=
                            (select isnull(sum(TotalVATAmount),0)
                            from  SalesInvoiceHeaders 
                            where Post='Y' and SalesInvoiceHeaders.TransactionType IN('Credit')and InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt)))

                            where sl=@cnt

                            update  #VAT_18_Management set Purchase=
                            ( select  isnull(sum(TotalVATAmount),0)
                            from  PurchaseInvoiceHeaders
                            where Post='Y' and InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt)))
                            where sl=@cnt 

                            set @cnt=@cnt+1
                            End

                            select PeriodName,Opening,Deposit,Purchase ,sale from #VAT_18_Management 

                            DROP TABLE #VAT_18_Management
  
                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ProductCategoryNew(string cgID)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Product Category Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT 
                            CategoryID,
                            isnull(CategoryName,'N/A')CategoryName,
                            isnull(HSCodeNo,'N/A')HSCodeNo ,
                            isnull(VATRate,0)VATRate ,
                            isnull(IsRaw,'N/A')IsRaw,
                            isnull(Description,'N/A') Description,
                            isnull(ActiveStatus,'N')ActiveStatus

                            FROM         dbo.ProductCategories ";
                if (!string.IsNullOrWhiteSpace(cgID))
                {
                    sqlText += " WHERE CategoryID=@cgID";

                }
                sqlText += " order by CategoryName";



                #endregion

                #region SQL Command

                SqlCommand objCommProductCategoryReport = new SqlCommand();
                objCommProductCategoryReport.Connection = currConn;

                objCommProductCategoryReport.CommandText = sqlText;
                objCommProductCategoryReport.CommandType = CommandType.Text;
                objCommProductCategoryReport.Parameters.AddWithValue("@cgID", cgID);


                #endregion


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProductCategoryReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ProductNew(string ItemNo, string CategoryID, string IsRaw)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Product Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT  
                                                        p.ItemNo,

                            isnull(p.ProductName,'N/A')ProductName, 
                            isnull(PC.CategoryName,'N/A')CategoryName,
                            isnull(p.HSCodeNo,'N/A')HSCodeNo,
                            isnull(p.VATRate,0)VATRate,
                            isnull(p.SD,0)SD,
                            isnull(p.UOM,'N/A')UOM ,
                            isnull(p.NBRPrice,0)NBRPrice ,
                            isnull(p.SalesPrice,0)SalesPrice,
                            isnull(p.CostPrice,0)CostPrice,
                            isnull(p.PacketPrice,0)PacketPrice,
                            isnull(p.SerialNo,'N/A') SerialNo,
                            pc.IsRaw,p.ProductCode 


                            FROM         dbo.Products AS p LEFT OUTER JOIN
                            dbo.ProductCategories AS PC ON p.CategoryID = PC.CategoryID

                            WHERE p.ActiveStatus in ('Y','N')";
                if (!string.IsNullOrWhiteSpace(ItemNo))
                {
                    sqlText += " and ItemNo=@ItemNo";

                }
                if (!string.IsNullOrWhiteSpace(CategoryID))
                {
                    sqlText += " and p.CategoryID=@CategoryID";

                }
                if (!string.IsNullOrWhiteSpace(IsRaw))
                {
                    sqlText += " and pc.IsRaw=@IsRaw";

                }
                sqlText += " order by ProductName";


                #endregion

                #region SQL Command

                SqlCommand objCommProductReport = new SqlCommand();
                objCommProductReport.Connection = currConn;

                objCommProductReport.CommandText = sqlText;
                objCommProductReport.CommandType = CommandType.Text;
                objCommProductReport.Parameters.AddWithValue("@ItemNo", ItemNo);
                objCommProductReport.Parameters.AddWithValue("@CategoryID", CategoryID);
                objCommProductReport.Parameters.AddWithValue("@IsRaw", IsRaw);



                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProductReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }


        public DataSet PurchaseNew(string PurchaseInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string VendorId, string ItemNo, string CategoryID, string ProductType, string TransactionType, string Post, string PurchaseType, string VendorGroupId, string FromBOM, string UOM, string UOMn, decimal UOMc, decimal TotalQty, decimal rCostPrice, bool pCategoryLike = false, string PGroup = "")
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string purchaseInvoiceNo = PurchaseInvoiceNo;
            string invoiceDateFrom = InvoiceDateFrom;
            string invoiceDateTo = InvoiceDateTo;
            string vendorId = VendorId;
            string itemNo = ItemNo;
            string categoryID = CategoryID;
            string productType = ProductType;
            string transactionType = TransactionType;
            string post = Post;
            string purchaseType = PurchaseType;

            DataSet dataSet = new DataSet("Purchase Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = " ";
                sqlText =
                    @"
                            SELECT    
PIH.PurchaseInvoiceNo PurchaseInvoiceNo,
 PIH.InvoiceDateTime InvoiceDateTime,
PIH.VendorID VendorID, 
isnull(V.VendorName,'N/A')VendorName,
PID.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName,
p.ProductCode,
isnull(UOMn,'NA')UOMn,
isnull(UOMQty,0)UOMQty,
isnull(UOMPrice,0)UOMPrice,
pc.CategoryName,
pc.IsRaw,     
 PIH.ReceiveDate ReceiveDate,                         
isnull(PID.UOM,'N/A')UOM,
isnull(PID.Quantity,0)Quantity,
isnull(PID.CostPrice,0)CostPrice,
isnull(PID.SD,0)SD,
isnull(PID.SDAmount,0)SDAmount,
isnull(PID.VATRate,0)VATRate,
PID.CnFAmount
,PID.InsuranceAmount
,PID.CDAmount
,PID.RDAmount
,PID.TVBAmount
,PID.TVAAmount
,PID.ATVAmount
,PID.OthersAmount,
CASE 
WHEN PID.TransactionType='InputService' or PID.TransactionType='InputServiceImport' THEN isnull(PID.RebateAmount,0)
ELSE isnull(PID.VATAmount,0) END AS VATAmount, ";

                if (FromBOM == "Y")
                {
                    sqlText +=
                        @"  
CASE 
WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
THEN isnull(PID.AssessableValue,0)
ELSE isnull(PID.SubTotal,0) END AS SubTotal,
";
                }
                else
                {
                    sqlText +=
                        @"  
isnull(PID.SubTotal,0)  AS SubTotal,
--CASE 
--WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
--THEN isnull(PID.AssessableValue,0)
--ELSE isnull(PID.SubTotal,0) END AS SubTotal,

--CASE 
--WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
----THEN isnull(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) ,0)
--THEN isnull(PID.AssessableValue,0)
--ELSE isnull(PID.SubTotal,0) END AS SubTotal,
--isnull(PID.AssessableValue,0) SubTotal,
";
                }


                sqlText += @"  
convert (varchar,PID.ReceiveDate,120)ReceiveDate,
isnull(PID.BENumber,'-')BENumber
";
                sqlText += " ,'" + UOM + "' rUOM ";
                sqlText += " ,'" + UOMn + "' rUOMn ";
                sqlText += " ," + UOMc + " rUOMc";
                sqlText += " ," + TotalQty + " rTotalQty ";
                sqlText += " , cast(" + rCostPrice + " as decimal(25,9)) ItemCostPrice ";

                sqlText += @"  	
					
FROM         PurchaseInvoiceHeaders AS PIH LEFT OUTER JOIN
PurchaseInvoiceDetails AS PID ON PIH.PurchaseInvoiceNo = PID.PurchaseInvoiceNo LEFT OUTER JOIN
Products AS P ON PID.ItemNo = P.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID LEFT OUTER join
Vendors AS V ON PIH.VendorID = V.VendorID  LEFT OUTER JOIN
vendorGroups vg ON v.VendorGroupID=vg.VendorGroupID 
--left outer join Costing c on PID.ItemNo=c.ItemNo
WHERE PID.Quantity>0
--and (pc.IsRaw= 'Raw' or pc.IsRaw= 'Finish')
";

                #endregion

                #region Parameter

                if (FromBOM == "Y")
                {
                    sqlText += " and PIH.PurchaseInvoiceNo='" + purchaseInvoiceNo + "' ";
                    sqlText += " and p.ItemNo='" + itemNo + "' ";

                }
                else if (FromBOM == "N")
                {
                    if (!string.IsNullOrWhiteSpace(purchaseInvoiceNo))
                    {
                        sqlText += " and PIH.PurchaseInvoiceNo='" + purchaseInvoiceNo + "' ";
                    }
                    if (!string.IsNullOrWhiteSpace(itemNo))
                    {
                        sqlText += " and p.ItemNo='" + itemNo + "' ";
                    }
                    if (pCategoryLike)
                    {
                        sqlText += " and (pc.CategoryName LIKE '%' + '" + PGroup + "' + '%' )";

                    }
                    else
                    {

                        if (!string.IsNullOrWhiteSpace(categoryID))
                        {
                            sqlText += " and pc.categoryID='" + categoryID + "' ";
                        }
                    }
                    if (!string.IsNullOrWhiteSpace(productType))
                    {
                        sqlText += " and pc.IsRaw='" + productType + "' ";
                    }
                    if (!string.IsNullOrWhiteSpace(vendorId))
                    {
                        sqlText += " and v.VendorID='" + vendorId + "' ";
                    }
                    if (!string.IsNullOrWhiteSpace(transactionType))
                    {
                        sqlText += " and pid.TransactionType='" + transactionType + "' ";
                    }


                    if (!string.IsNullOrWhiteSpace(invoiceDateFrom))
                    {
                        sqlText += " and pid.ReceiveDate >='" + invoiceDateFrom + "' ";
                    }
                    if (!string.IsNullOrWhiteSpace(invoiceDateTo))
                    {
                        sqlText += " and pid.ReceiveDate <dateadd(d,1, '" + invoiceDateTo + "') ";
                    }
                    if (!string.IsNullOrWhiteSpace(VendorGroupId))
                    {
                        sqlText += " and vg.VendorGroupID='" + VendorGroupId + "' ";
                    }
                }
                if (!string.IsNullOrWhiteSpace(post))
                {
                    sqlText += " and pid.Post='" + post + "' ";
                }
                sqlText += " ORDER BY PIH.PurchaseInvoiceNo ";

                #endregion Parameter

                #region SQL Command

                SqlCommand objCommPurchaseReport = new SqlCommand();
                objCommPurchaseReport.Connection = currConn;

                objCommPurchaseReport.CommandText = sqlText;
                objCommPurchaseReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            //catch (SqlException sqlex)
            //{
            //    throw sqlex;
            //}
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet IssueNew(string IssueNo, string IssueDateFrom, string IssueDateTo, string itemNo, string categoryID, string productType, string TransactionType, string Post, string waste, bool pCategoryLike = false, string PGroup = "")
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Issue Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT   
IH.IssueNo IssueNo, 
convert (varchar,IH.IssueDateTime,120)IssueDateTime,
ID.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName, 
isnull(P.ProductCode,'N/A')ProductCode,
isnull(ID.UOM,'N/A')UOM, 
isnull(ID.UOMn,'N/A')UOMn,
isnull(ID.UOMc,1)UOMc,
isnull(ID.UOMQty,isnull(ID.Quantity,0))UOMQty,
isnull(ID.UOMWastage,isnull(ID.Wastage,0))UOMWastage,
isnull(ID.UOMPrice,isnull(ID.CostPrice,0))UOMPrice,
isnull(ID.CostPrice,0)CostPrice, 
isnull(ID.Quantity ,0)Quantity,
isnull(ID.Wastage ,0)Wastage,
isnull(ID.SubTotal ,0)SubTotal,
pc.CategoryName,pc.IsRaw ProductType,
                            
isnull(IH.Comments ,'N/A')Comments
FROM  dbo.IssueDetails AS ID LEFT OUTER JOIN
dbo.IssueHeaders AS IH ON ID.IssueNo = IH.IssueNo LEFT OUTER JOIN
dbo.Products AS P ON ID.ItemNo = P.ItemNo left outer join
dbo.ProductCategories PC on p.CategoryID=pc.CategoryID

                            WHERE (ID.Quantity>0)";

                #region Where

                if (!string.IsNullOrWhiteSpace(IssueNo))
                {
                    sqlText += " and IH.IssueNo='" + IssueNo + "' ";
                }

                if (waste == "Y")
                {
                    sqlText += " and ID.Wastage>0";
                }
                else if (waste == "N")
                {
                    sqlText += " and ID.Wastage<=0";
                }

                if (!string.IsNullOrWhiteSpace(itemNo))
                {
                    sqlText += " and p.ItemNo='" + itemNo + "' ";
                }
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName LIKE '%' + '" + PGroup + "' + '%' )";

                }
                else
                {
                    if (!string.IsNullOrWhiteSpace(categoryID))
                    {
                        sqlText += " and pc.categoryID='" + categoryID + "' ";
                    }
                }
                if (!string.IsNullOrWhiteSpace(productType))
                {
                    sqlText += " and pc.IsRaw='" + productType + "' ";
                }
                if (!string.IsNullOrWhiteSpace(TransactionType))
                {
                    sqlText += " and IH.TransactionType='" + TransactionType + "' ";
                }

                if (!string.IsNullOrWhiteSpace(Post))
                {
                    sqlText += " and IH.Post='" + Post + "' ";
                }
                if (!string.IsNullOrWhiteSpace(IssueDateFrom))
                {
                    sqlText += " and IH.IssueDateTime >='" + IssueDateFrom + "' ";
                }
                if (!string.IsNullOrWhiteSpace(IssueDateTo))
                {
                    sqlText += " and IH.IssueDateTime <dateadd(d,1, '" + IssueDateTo + "') ";
                }



                #endregion Where

                sqlText += " order by IH.IssueNo ";

                #endregion

                #region SQL Command

                SqlCommand objCommIssueReport = new SqlCommand();
                objCommIssueReport.Connection = currConn;

                objCommIssueReport.CommandText = sqlText;
                objCommIssueReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommIssueReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();
                    }
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ReceiveNew(string ReceiveNo, string ReceiveDateFrom, string ReceiveDateTo, string itemNo, string categoryID, string productType, string transactionType, string post)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Receive Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT   
RH.ReceiveNo ReceiveNo, 
convert (varchar,RH.ReceiveDateTime,120)ReceiveDateTime,
RD.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName,
isnull(P.ProductCode,'N/A')ProductCode,
isnull(RD.UOM,'N/A')UOM, 
isnull(RD.UOMn,'N/A')UOMn,
isnull(RD.UOMc,1)UOMc,
isnull(RD.UOMQty,isnull(RD.Quantity,0))UOMQty,
isnull(RD.UOMPrice,isnull(RD.CostPrice,0))UOMPrice,
isnull(RD.Quantity,0) Quantity,
isnull(RD.CostPrice,0)CostPrice,
isnull(RD.SD,0)SD,
isnull(RD.SDAmount,0)SDAmount,
isnull(RD.VATRate,0)VATRate,
isnull(RD.VATAmount,0)VATAmount,
isnull(RD.SubTotal,0)SubTotal,
pc.CategoryName,pc.IsRaw ProductType,
isnull(RH.Comments,'N/A') Comments
FROM  ReceiveDetails AS RD LEFT OUTER JOIN
ReceiveHeaders AS RH ON RD.ReceiveNo = RH.ReceiveNo LEFT OUTER JOIN
Products AS P ON RD.ItemNo = P.ItemNo  left outer join
ProductCategories PC on p.CategoryID=pc.CategoryID  

                            WHERE (RD.Quantity>0) ";

                if (!string.IsNullOrWhiteSpace(ReceiveNo))
                {
                    sqlText += " and RH.ReceiveNo='" + ReceiveNo + "' ";
                }

                if (!string.IsNullOrWhiteSpace(itemNo))
                {
                    sqlText += " and RD.ItemNo='" + itemNo + "' ";
                }
                if (!string.IsNullOrWhiteSpace(categoryID))
                {
                    sqlText += " and pc.categoryID='" + categoryID + "' ";
                }
                if (!string.IsNullOrWhiteSpace(productType))
                {
                    sqlText += " and pc.IsRaw='" + productType + "' ";
                }
                if (!string.IsNullOrWhiteSpace(transactionType))
                {
                    sqlText += " and RH.TransactionType='" + transactionType + "' ";
                }

                if (!string.IsNullOrWhiteSpace(post))
                {
                    sqlText += " and RH.Post='" + post + "' ";
                }
                if (!string.IsNullOrWhiteSpace(ReceiveDateFrom))
                {
                    sqlText += " and RH.ReceiveDateTime >='" + ReceiveDateFrom + "' ";
                }
                if (!string.IsNullOrWhiteSpace(ReceiveDateTo))
                {
                    sqlText += " and RH.ReceiveDateTime <dateadd(d,1, '" + ReceiveDateTo + "') ";
                }


                sqlText += "  order by RH.ReceiveDateTime";

                #endregion

                #region SQL Command

                SqlCommand objCommReceiveReport = new SqlCommand();
                objCommReceiveReport.Connection = currConn;

                objCommReceiveReport.CommandText = sqlText;
                objCommReceiveReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommReceiveReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }
        public DataSet SaleNew(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid, string ItemNo, string CategoryID, string productType, string TransactionType, string Post, string onlyDiscount, bool bPromotional, string CustomerGroupID, bool pCategoryLike = false, string PGroup = "")
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
                            convert (varchar,SIH.InvoiceDateTime,120)InvoiceDateTime,
                            isnull(C.CustomerName,'N/A')CustomerName,
                            sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')ProductName,
                            isnull(P.ProductCode,'N/A')ProductCode,
                            isnull(SID.UOM,'N/A')UOM,
                            isnull(SID.UOMn,'N/A')UOMn,
                            isnull(SID.UOMc,1)UOMc,                            
                            isnull(SID.Quantity,0)Quantity,

                            isnull(SID.PromotionalQuantity,0)PromotionalQuantity,
                            isnull(isnull(SID.Quantity,0)  -isnull(SID.PromotionalQuantity,0),0) SaleQuantity,

                            isnull(SID.UOMQty,isnull(SID.Quantity,0))UOMQty,
                            isnull(SID.NBRPrice,0)NBRPrice,
isnull(NULLIF(isnull(SID.DiscountedNBRPrice,0),0),isnull(SID.NBRPrice,0))Discount,
                            isnull(SID.UOMPrice,isnull(SID.NBRPrice,0))UOMPrice,
                            isnull(SID.SD,0)SD,
                            isnull(SID.SDAmount,0)SDAmount,
                            isnull(SID.VATRate,0)VATRate,
                            isnull(SID.VATAmount,0)VATAmount ,
                            isnull(SID.SubTotal,0) SubTotal,
                            SID.Trading,
                            SID.TradingMarkUp,
                            SID.NonStock,
                            SID.SaleType,
                            pc.CategoryName,pc.IsRaw ProductType
,isnull(trc.Heading1,'')Heading1,isnull(trc.Heading2,'')Heading2

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
      
                            WHERE (SID.Quantity>0)";
                //DiscountAmount
                if (!string.IsNullOrWhiteSpace(vSalesInvoiceNo))
                    sqlText += " and SID.SalesInvoiceNo='" + vSalesInvoiceNo + "' ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (!string.IsNullOrWhiteSpace(InvoiceDateFrom))
                {
                    sqlText += " and SID.InvoiceDateTime >='" + InvoiceDateFrom + "' ";
                }
                if (!string.IsNullOrWhiteSpace(InvoiceDateTo))
                {
                    sqlText += " and (SID.InvoiceDateTime <dateadd(d,1, '" + InvoiceDateTo + "')) ";
                }
                if (!string.IsNullOrWhiteSpace(vCustomerid))
                    sqlText += " and C.CustomerID='" + vCustomerid + "' ";

                if (!string.IsNullOrWhiteSpace(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID='" + CustomerGroupID + "' ";
                if (!string.IsNullOrWhiteSpace(vItemNo))
                    sqlText += " and SID.ItemNo='" + vItemNo + "' ";
                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName LIKE '%' + '" + PGroup + "' + '%' )";

                }
                else
                {
                    if (!string.IsNullOrWhiteSpace(vCategoryID))
                        sqlText += " and P.CategoryID='" + vCategoryID + "' ";
                }
                if (!string.IsNullOrWhiteSpace(vproductType))
                    sqlText += " and pc.IsRaw='" + vproductType + "' ";
                if (!string.IsNullOrWhiteSpace(vTransactionType))
                {
                    sqlText += " and SIH.TransactionType='" + vTransactionType + "' ";
                }

                if (!string.IsNullOrWhiteSpace(vPost))
                {
                    sqlText += " and SIH.Post='" + vPost + "' ";
                }


                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet SaleNewWithChassisEngine(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid,
                               string ItemNo, string CategoryID, string productType, string TransactionType, string Post,
                               string onlyDiscount, bool bPromotional, string CustomerGroupID, string chassis, string engine)
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
                            convert (varchar,SIH.InvoiceDateTime,120)InvoiceDateTime,
                            isnull(C.CustomerName,'N/A')CustomerName,
                            sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')ProductName,
                            isnull(P.ProductCode,'N/A')ProductCode,
                            isnull(SID.UOM,'N/A')UOM,
                            isnull(SID.UOMn,'N/A')UOMn,
                            isnull(SID.UOMc,1)UOMc,                            
                            isnull(SID.Quantity,0)Quantity,

                            isnull(SID.PromotionalQuantity,0)PromotionalQuantity,
                            isnull(isnull(SID.Quantity,0)  -isnull(SID.PromotionalQuantity,0),0) SaleQuantity,

                            isnull(SID.UOMQty,isnull(SID.Quantity,0))UOMQty,
                            isnull(SID.NBRPrice,0)NBRPrice,
isnull(NULLIF(isnull(SID.DiscountedNBRPrice,0),0),isnull(SID.NBRPrice,0))Discount,
                            isnull(SID.UOMPrice,isnull(SID.NBRPrice,0))UOMPrice,
                            isnull(SID.SD,0)SD,
                            isnull(SID.SDAmount,0)SDAmount,
                            isnull(SID.VATRate,0)VATRate,
                            isnull(SID.VATAmount,0)VATAmount ,
                            isnull(SID.SubTotal,0) SubTotal,
                            SID.Trading,
                            SID.TradingMarkUp,
                            SID.NonStock,
                            SID.SaleType,
                            pc.CategoryName,pc.IsRaw ProductType
,isnull(trc.Heading1,'')Heading1,isnull(trc.Heading2,'')Heading2

                            FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
left outer join Trackings trc on sid.SalesInvoiceNo=trc.SaleInvoiceNo and sid.ItemNo=trc.FinishItemNo
      
                            WHERE (SID.Quantity>0)";
                //DiscountAmount
                if (!string.IsNullOrWhiteSpace(vSalesInvoiceNo))
                    sqlText += " and SID.SalesInvoiceNo='" + vSalesInvoiceNo + "' ";

                if (onlyDiscount == "Y")
                {
                    sqlText += " and SID.DiscountAmount >0 ";
                }
                else if (onlyDiscount == "N")
                {
                    sqlText += " and SID.DiscountAmount <=0 ";
                }


                if (bPromotional == true)
                {
                    sqlText += " and SID.PromotionalQuantity >0 ";
                }
                if (!string.IsNullOrWhiteSpace(InvoiceDateFrom))
                {
                    sqlText += " and SID.InvoiceDateTime >='" + InvoiceDateFrom + "' ";
                }
                if (!string.IsNullOrWhiteSpace(InvoiceDateTo))
                {
                    sqlText += " and (SID.InvoiceDateTime <dateadd(d,1, '" + InvoiceDateTo + "')) ";
                }
                if (!string.IsNullOrWhiteSpace(vCustomerid))
                    sqlText += " and C.CustomerID='" + vCustomerid + "' ";

                if (!string.IsNullOrWhiteSpace(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID='" + CustomerGroupID + "' ";

                if (!string.IsNullOrWhiteSpace(chassis))
                    sqlText += " and trc.Heading1='" + chassis + "' ";
                if (!string.IsNullOrWhiteSpace(engine))
                    sqlText += " and trc.Heading2='" + engine + "' ";

                if (!string.IsNullOrWhiteSpace(vItemNo))
                    sqlText += " and SID.ItemNo='" + vItemNo + "' ";
                if (!string.IsNullOrWhiteSpace(vCategoryID))
                    sqlText += " and P.CategoryID='" + vCategoryID + "' ";
                if (!string.IsNullOrWhiteSpace(vproductType))
                    sqlText += " and pc.IsRaw='" + vproductType + "' ";
                if (!string.IsNullOrWhiteSpace(vTransactionType))
                {
                    sqlText += " and SIH.TransactionType='" + vTransactionType + "' ";
                }

                if (!string.IsNullOrWhiteSpace(vPost))
                {
                    sqlText += " and SIH.Post='" + vPost + "' ";
                }


                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }



        public DataSet StockNew(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate,
                                string Post1, string Post2, bool WithoutZero = false, bool pCategoryLike = false, string PGroup = "")
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Stock Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction




                #region SQL

                sqlText = @"
                                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='2013/05/01';
--SET @EndDate='2013/05/31';



CREATE TABLE #StockTemp(ItemNo varchar(200) NULL)


INSERT INTO #StockTemp(ItemNo) 
SELECT distinct p.ItemNo
FROM Products p
WHERE 
--isnull(p.OpeningBalance,0) > 0 and ";
                if (!string.IsNullOrWhiteSpace(ProductNo))
                {
                    sqlText += "\r\n p.itemno='" + ProductNo + "' AND ";
                }
                sqlText += @" 

 p.CategoryID IN(
SELECT DISTINCT CategoryID FROM ProductCategories pc
WHERE  pc.ActiveStatus='Y' ";

                if (pCategoryLike)
                {
                    sqlText += " and (pc.CategoryName LIKE '%' + '" + PGroup + "' + '%' )";

                }
                else
                {
                    if (!string.IsNullOrWhiteSpace(CategoryNo))
                    {
                        sqlText += " and pc.CategoryID='" + CategoryNo + "' ";
                    }
                }
                if (!string.IsNullOrWhiteSpace(ItemType))
                {
                    sqlText += " and pc.IsRaw='" + ItemType + "' ";
                }


                sqlText += " ) ";

                sqlText += @" 
SELECT distinct a.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw ItemType
,sum(OpeningQty)OpeningQty,sum(OpeningCost)OpeningCost
,sum(InQty)ReceiveQty,sum(InCost)ReceiveCost
,sum(OutQty)issueQty,sum(OutCost)IssueCost,'N' Trading,'N' NonStock,0 issueUCost,0 CloseQty ,0 CloseUCost,0 CloseCost
,'1900/01/01' TransDate, 'N' TransType,'N' TransNumber

 FROM(
 	
(
	SELECT distinct a.ItemNo, SUM(a.Quantity)OpeningQty,sum(a.Amount)OpeningCost,0 InQty,0 InCost ,0 OutQty,0 OutCost
	FROM (
		(SELECT  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) )  
UNION ALL (
		SELECT  ItemNo, isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull((isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE (Post =@post1 or Post= @post2) 
and TransactionType in('other','Service','ServiceNS','InputService','Trading','TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN'

) 


AND ReceiveDate < @StartDate  
  AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
 )  
 UNION ALL (
	
	SELECT  ItemNo, isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull((isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE  (Post =@post1 or Post= @post2) 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate     
 AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
 ) 
 UNION ALL 
(	SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull((isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE  (Post =@post1 or Post= @post2) 
and TransactionType in('PurchaseReturn','PurchaseDN') 
 AND ReceiveDate< @StartDate     
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) ) 
UNION ALL 


(SELECT  ItemNo,-isnull((UOMQty),0) IssueQuantity,-isnull((isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)    
AND IssueDateTime< @StartDate   
and TransactionType NOT IN('IssueReturn','ReceiveReturn','TollIssue') 
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  AND (UOMQty>0))  

UNION ALL 


(SELECT  ItemNo,isnull((UOMQty),0) IssueQuantity,isnull((isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)    
AND IssueDateTime< @StartDate   
and TransactionType IN('TollIssue') 
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  AND (UOMQty>0))  


UNION ALL 
(SELECT  ItemNo,isnull((UOMQty),0) IssueQuantity,isnull((isnull(SubTotal,0)),0)
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)    

AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)   AND (UOMQty>0))   
UNION ALL 

(SELECT  ItemNo,isnull((isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,isnull((isnull(SubTotal,0)),0)SubTotal   
 FROM ReceiveDetails WHERE  (Post =@post1 or Post= @post2)   
  AND ReceiveDateTime< @StartDate  
  and TransactionType not IN('ReceiveReturn','InternalIssue','Trading') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  ) 
UNION ALL

(SELECT  ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,-isnull((isnull(SubTotal,0)),0)SubTotal    
FROM ReceiveDetails WHERE  (Post =@post1 or Post= @post2)   
AND ReceiveDateTime< @StartDate  
 and TransactionType IN('ReceiveReturn') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  ) 
UNION ALL 

(SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,-isnull(( SubTotal),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2) 
 AND InvoiceDateTime< @StartDate     
AND TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','TradingTender'
,'Tender','Debit','TollFinishIssue','ServiceStock') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )  
UNION ALL  

(SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) SaleExpQuantity,-isnull(( CurrencyValue),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2) 
 AND InvoiceDateTime< @StartDate      
AND TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )  
UNION ALL

(SELECT  ItemNo,isnull( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ,0) SaleCreditQuantity,isnull(( SubTotal),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2)  
AND InvoiceDateTime< @StartDate    
 AND TransactionType in( 'Credit') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )
UNION ALL 

(select  ItemNo,-isnull((isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull((isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull((isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) 

AND DisposeDetails.DisposeDate< @StartDate     
 AND  (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)   
and sih.FromStock in ('Y'))    

) AS a GROUP BY a.ItemNo
	)


UNION ALL -- Receive  in
SELECT distinct pID.ItemNo,0,0 
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
,0,0
FROM PurchaseInvoiceDetails pID
where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('other','Service','ServiceNS','InputService','Trading'
,'TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN') 
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL -- Receive  in
SELECT distinct pID.ItemNo,0,0 
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(isnull((isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0),0)) Cost
,0,0
FROM PurchaseInvoiceDetails pID
where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Receive Return out
SELECT distinct pID.ItemNo,0,0 

,-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost
,0,0
FROM PurchaseInvoiceDetails pID
where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('PurchaseReturn','PurchaseDN')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Issue InputService out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType NOT IN('IssueReturn','ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Issue Return in
SELECT distinct pID.ItemNo,0,0 
,0,0
,-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost

FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('IssueReturn','ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo


UNION ALL  -- VAT26 out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(Quantity+QuantityImport,0)) Quantity,SUM(isnull(RealPrice,0)) Cost
FROM DisposeDetails pID 
where pID.DisposeDate >= @StartDate and pID.DisposeDate < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- ReceiveDetails in
SELECT distinct pID.ItemNo,0,0 
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
,0,0
FROM ReceiveDetails pID
where pID.ReceiveDateTime >= @StartDate and pID.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType NOT IN('ReceiveReturn','InternalIssue','Trading')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- ReceiveReturn out
SELECT distinct pID.ItemNo,0,0 

,-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost
,0,0
FROM ReceiveDetails pID
where pID.ReceiveDateTime >= @StartDate and pID.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Sale out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost
FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','TradingTender','Tender'
,'Debit','TollFinishIssue','ServiceStock')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Sale out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.CurrencyValue,0)) Cost
FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo

UNION ALL  -- Credit In
SELECT distinct pID.ItemNo,0,0 
,0,0
,-SUM( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost

FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('Credit')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo
) AS a LEFT OUTER JOIN
Products p ON a.ItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
GROUP BY a.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw 

                ";
                if (WithoutZero)
                {
                    sqlText += @" 
having sum(OpeningQty)>0 or sum(InQty)>0 or sum(OutQty)>0
";

                }
                sqlText += @" 
ORDER BY pc.IsRaw ,pc.CategoryName,p.ProductName
drop table #StockTemp

";


                #endregion SQL

                #region SQL Command

                SqlCommand objCommStockReport = new SqlCommand();
                objCommStockReport.Connection = currConn;

                objCommStockReport.CommandText = sqlText;
                objCommStockReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommStockReport.Parameters.Contains("@Post1"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommStockReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommStockReport.Parameters.Contains("@Post2"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommStockReport.Parameters["@Post2"].Value = Post2;
                }



                if (!objCommStockReport.Parameters.Contains("@StartDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommStockReport.Parameters["@StartDate"].Value = StartDate;
                }


                if (!objCommStockReport.Parameters.Contains("@EndDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommStockReport.Parameters["@EndDate"].Value = EndDate;
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommStockReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet StockWithAdjNew(string ProductNo, string CategoryNo, string ItemType, string StartDate, string EndDate,
                               string Post1, string Post2, bool WithoutZero = false)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Stock Adjastment Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction




                #region SQL

                sqlText = @"
                                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='2013/05/01';
--SET @EndDate='2013/05/31';



CREATE TABLE #StockTemp(ItemNo varchar(200) NULL)


INSERT INTO #StockTemp(ItemNo) 
SELECT distinct p.ItemNo
FROM Products p
WHERE 
--isnull(p.OpeningBalance,0) > 0 and ";
                if (!string.IsNullOrWhiteSpace(ProductNo))
                {
                    sqlText += "\r\n p.itemno='" + ProductNo + "' AND ";
                }
                sqlText += @" 

 p.CategoryID IN(
SELECT DISTINCT CategoryID FROM ProductCategories pc
WHERE  pc.ActiveStatus='Y' ";

                if (!string.IsNullOrWhiteSpace(CategoryNo))
                {
                    sqlText += " and pc.CategoryID='" + CategoryNo + "' ";
                }
                if (!string.IsNullOrWhiteSpace(ItemType))
                {
                    sqlText += " and pc.IsRaw='" + ItemType + "' ";
                }


                sqlText += " ) ";

                sqlText += @" 
DECLARE @ClosingAvgRate decimal(25,9);

DECLARE @InAvgRate decimal(25,9);
DECLARE @OutAvgRate decimal(25,9);


CREATE TABLE #StockTable(
SerialNo  varchar (5) NULL, ItemNo varchar (200) NULL, OpenQty   decimal (25, 9) NULL, OpenAmt   decimal (25, 9) NULL ,
ReceiveQty   decimal (25, 9) NULL, ReceiveCost   decimal (25, 9) NULL ,
issueQty   decimal (25, 9) NULL, IssueCost   decimal (25, 9) NULL ,
CloseQty   decimal (25, 9) NULL, CloseCost   decimal (25, 9) NULL ,
AdjInAmt   decimal (25, 9) NULL,AdjOutAmt   decimal (25, 9) NULL,
TransactionType  varchar (50) NULL 
)

CREATE TABLE #OpenTable(
SerialNo  varchar (5) NULL, ItemNo varchar (200) NULL, OpenQty   decimal (25, 9) NULL, OpenAmt   decimal (25, 9) NULL ) 

CREATE TABLE #InTable(
SerialNo  varchar (5) NULL, ItemNo varchar (200) NULL, InQty   decimal (25, 9) NULL, InAmt   decimal (25, 9) NULL,AdjInAmt   decimal (25, 9) NULL,
TransactionType  varchar (50) NULL ) 

CREATE TABLE #OutTable(
SerialNo  varchar (5) NULL, ItemNo varchar (200) NULL, OutQty   decimal (25, 9) NULL, OutAmt   decimal (25, 9) NULL ,AdjOutAmt   decimal (25, 9) NULL,
TransactionType  varchar (50) NULL ) 
 

INSERT into #OpenTable(SerialNo,ItemNo,OpenQty,OpenAmt)
SELECT distinct 'Open' SerialNo, o.ItemNo,Sum (o.Quantity) OpenQty, sum(o.Amount) OpenAmt
	FROM (
		(SELECT  ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) )  
UNION ALL (
		SELECT  ItemNo, isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull((isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE (Post =@post1 or Post= @post2) 
and TransactionType in('other','Service','ServiceNS','InputService','Trading','TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN'

) 
AND ReceiveDate < @StartDate  
  AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
 )  
 UNION ALL (
	
	SELECT  ItemNo, isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull((isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE  (Post =@post1 or Post= @post2) 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
AND ReceiveDate < @StartDate     
 AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
 ) 
 UNION ALL 
(	SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull((isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE  (Post =@post1 or Post= @post2) 
and TransactionType in('PurchaseReturn','PurchaseDN') 
 AND ReceiveDate< @StartDate     
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) ) 
UNION ALL 


(SELECT  ItemNo,-isnull((UOMQty),0) IssueQuantity,-isnull((isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)    
AND IssueDateTime< @StartDate   
and TransactionType NOT IN('IssueReturn','ReceiveReturn') 
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  AND (UOMQty>0))  
UNION ALL 
(SELECT  ItemNo,isnull((UOMQty),0) IssueQuantity,isnull((isnull(SubTotal,0)),0)
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)    

AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)   AND (UOMQty>0))   
UNION ALL 

(SELECT  ItemNo,isnull((isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,isnull((isnull(SubTotal,0)),0)SubTotal   
 FROM ReceiveDetails WHERE  (Post =@post1 or Post= @post2)   
  AND ReceiveDateTime< @StartDate  
  and TransactionType not IN('ReceiveReturn','InternalIssue','Trading') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  ) 
UNION ALL

(SELECT  ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) ReceiveQuantity,-isnull((isnull(SubTotal,0)),0)SubTotal    
FROM ReceiveDetails WHERE  (Post =@post1 or Post= @post2)   
AND ReceiveDateTime< @StartDate  
 and TransactionType IN('ReceiveReturn') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  ) 
UNION ALL 

(SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) SaleNewQuantity,-isnull(( SubTotal),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2) 
 AND InvoiceDateTime< @StartDate     
AND TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','TradingTender'
,'Tender','Debit','TollFinishIssue','ServiceStock') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )  
UNION ALL  

(SELECT   ItemNo,-isnull((isnull(UOMQty,isnull(Quantity,0))),0) SaleExpQuantity,-isnull(( CurrencyValue),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2) 
 AND InvoiceDateTime< @StartDate      
AND TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )  
UNION ALL

(SELECT  ItemNo,isnull( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ,0) SaleCreditQuantity,isnull(( SubTotal),0)SubTotal 
FROM SalesInvoiceDetails   WHERE  (Post =@post1 or Post= @post2)  
AND InvoiceDateTime< @StartDate    
 AND TransactionType in( 'Credit') AND  itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  )
UNION ALL 

(select  ItemNo,-isnull((isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull((isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull((isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where itemno IN (SELECT DISTINCT Itemno FROM #StockTemp) 

AND DisposeDetails.DisposeDate< @StartDate     
 AND  (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)   
and sih.FromStock in ('Y'))    

) AS o GROUP BY o.ItemNo

INSERT into #InTable(SerialNo,ItemNo,InQty,InAmt,TransactionType,AdjInAmt ) 

	SELECT distinct 'In' SerialNo, i.ItemNo,ISNULL(SUM(i.Quantity),0) InQty,ISNULL(sum(i.Cost),0) InCost,i.TransactionType ,0 AdjInAmt 
	FROM 
	
	(
					 -- Receive  in
					SELECT distinct pID.ItemNo,0 OpeningQty,0 OpeningCost
					,ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,ISNULL(SUM(isnull(pID.SubTotal,0)),0) Cost
					,0 OutQty,0 OutCost,pID.TransactionType
					FROM PurchaseInvoiceDetails pID
					where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) 
					and (pID.Post =@post1 or pID.Post= @post2)
					AND pID.TransactionType in('other','Service','ServiceNS','InputService','Trading'
					,'TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN') 
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

					UNION ALL -- Receive  in
					SELECT distinct pID.ItemNo,0,0 
					,ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,ISNULL(SUM(isnull(isnull((isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0),0)),0) Cost
					,0,0,pID.TransactionType
					FROM PurchaseInvoiceDetails pID
					where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) 
					and (pID.Post =@post1 or pID.Post= @post2)
					AND pID.TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

					UNION ALL  -- Receive Return out
					SELECT distinct pID.ItemNo,0,0 
					,-ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,-ISNULL(SUM(isnull(pID.SubTotal,0)),0) Cost
					,0,0,pID.TransactionType
					FROM PurchaseInvoiceDetails pID
					where pID.ReceiveDate >= @StartDate and pID.ReceiveDate < DATEADD(d,1, @EndDate) 
					and (pID.Post =@post1 or pID.Post= @post2)
					AND pID.TransactionType IN('PurchaseReturn','PurchaseDN')
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

					
					UNION ALL  -- ReceiveDetails in
					SELECT distinct pID.ItemNo,0,0 
					,ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,ISNULL(SUM(isnull(pID.SubTotal,0)),0) Cost
					,0,0,pID.TransactionType
					FROM ReceiveDetails pID
					where pID.ReceiveDateTime >= @StartDate and pID.ReceiveDateTime < DATEADD(d,1, @EndDate) 
					and (pID.Post =@post1 or pID.Post= @post2)
					AND pID.TransactionType NOT IN('ReceiveReturn','InternalIssue','Trading')
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

					UNION ALL  -- ReceiveReturn out
					SELECT distinct pID.ItemNo,0,0 
					,-ISNULL(SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )),0) Quantity,-ISNULL(SUM(isnull(pID.SubTotal,0)),0) Cost
					,0,0,pID.TransactionType
					FROM ReceiveDetails pID
					where pID.ReceiveDateTime >= @StartDate and pID.ReceiveDateTime < DATEADD(d,1, @EndDate) 
					and (pID.Post =@post1 or pID.Post= @post2)
					AND pID.TransactionType IN('ReceiveReturn')
					and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
					GROUP BY pID.ItemNo,pID.TransactionType

)  AS i GROUP BY i.ItemNo,i.TransactionType

INSERT into #OutTable(SerialNo,ItemNo,OutQty,OutAmt,TransactionType,AdjOutAmt)

SELECT distinct 'Out' SerialNo, c.ItemNo,ISNULL(SUM(c.Quantity),0) OutQty,ISNULL(sum(c.Cost),0) OutCost,c.TransactionType,0 AdjOutAmt 
	FROM 
	
	(

SELECT distinct pID.ItemNo,0 OpeningQty,0 OpeningCost 
,0 InQty,0 InCost
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost,pID.TransactionType
FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Other','PackageSale','PackageProduction','Service','ServiceNS','TradingTender','Tender'
,'Debit','TollFinishIssue','ServiceStock')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType

UNION ALL  -- Sale out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.CurrencyValue,0)) Cost,pID.TransactionType
FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType in('Export','ExportService','ExportTrading','ExportTradingTender','ExportPackage','ExportTender')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType

UNION ALL  -- Credit In
SELECT distinct pID.ItemNo,0,0 
,0,0
,-SUM( case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end ) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost,pID.TransactionType

FROM SalesInvoiceDetails pID
where pID.InvoiceDateTime >= @StartDate and pID.InvoiceDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('Credit')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType

UNION ALL  -- Issue InputService out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,SUM(isnull(pID.SubTotal,0)) Cost,pID.TransactionType
FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType NOT IN('IssueReturn','ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType

UNION ALL  -- Issue Return in
SELECT distinct pID.ItemNo,0,0 
,0,0
,-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) Quantity,-SUM(isnull(pID.SubTotal,0)) Cost,pID.TransactionType

FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
AND pID.TransactionType IN('IssueReturn','ReceiveReturn')
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType


UNION ALL  -- VAT26 out
SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(Quantity+QuantityImport,0)) Quantity,SUM(isnull(RealPrice,0)) Cost,pID.TransactionType
FROM DisposeDetails pID 
where pID.DisposeDate >= @StartDate and pID.DisposeDate < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo,pID.TransactionType


)AS c Group by c.ItemNo,c.TransactionType

--Opening Value
insert into #StockTable(SerialNo,ItemNo,OpenQty,OpenAmt)
select #OpenTable.SerialNo,#OpenTable.ItemNo,IsNull(OpenQty,0) OpenQty,ISNULL(OpenAmt,0) OpenAmt from #OpenTable

--Receive Value
insert into #StockTable(SerialNo,ItemNo,ReceiveQty,ReceiveCost,TransactionType,AdjInAmt)
select SerialNo,ItemNo,IsNull(InQty,0) InQty,IsNull(InAmt,0) InAmt,TransactionType,AdjInAmt from #InTable

--Issue Value
insert into #StockTable(SerialNo,ItemNo,issueQty,IssueCost,TransactionType,AdjOutAmt)
select SerialNo,ItemNo,IsNull(OutQty,0) OutQty,IsNull(OutAmt,0) OutAmt,TransactionType,AdjOutAmt from #OutTable

--For loop in sql Cursor
DECLARE @ItemNo varchar(50)
DECLARE CurItemNo CURSOR FOR 
SELECT DISTINCT Itemno FROM #StockTemp
OPEN CurItemNo
FETCH NEXT FROM  CurItemNo INTo @ItemNo
WHILE @@FETCH_STATUS = 0
BEGIN
--
Select @ClosingAvgRate=ISNULL(#OpenTable.OpenAmt/#OpenTable.OpenQty,0) from #OpenTable where OpenQty>0 
and #OpenTable.ItemNo= @ItemNo
Select @InAvgRate=ISNULL(#InTable.InAmt/#InTable.InQty,0) from #InTable where InQty>0
and #InTable.ItemNo= @ItemNo
Select @OutAvgRate=ISNULL(#OutTable.OutAmt/#OutTable.OutQty,0) from #OutTable where OutQty>0
and #OutTable.ItemNo= @ItemNo

if @ClosingAvgRate != @OutAvgRate
Begin

update #OutTable Set AdjOutAmt = adj.Adjout
from (
	(Select ISNULL((@ClosingAvgRate * #OutTable.OutQty)-(@OutAvgRate * #OutTable.OutQty),0) Adjout 
	from #OutTable where TransactionType not in( 'TradingTender','ExportTradingTender','ExportTender','Tender') AND  itemno =@ItemNo
	AND OutQty>0)

UNION ALL
	(Select ISNULL((@ClosingAvgRate * OutQty)-(OutAmt),0) Adjout 
	from #OutTable where TransactionType in( 'TradingTender','ExportTradingTender','ExportTender','Tender') AND  itemno =@ItemNo
	AND OutQty>0)
) as adj
where #OutTable.ItemNo = @ItemNo 
end	

if @ClosingAvgRate != @InAvgRate
Begin

UPDATE #InTable SET AdjInAmt = ISnull(NULLIF(adj1.AdjIn,0),0)
from (
	(Select ISNULL((@ClosingAvgRate * #InTable.InQty)-(@OutAvgRate * #InTable.InQty),0) AdjIn 
	from #InTable where 
	itemno =@ItemNo AND InQty>0)
	) as adj1
	Where #InTable.ItemNo = @ItemNo

end	

FETCH NEXT FROM  CurItemNo INTo @ItemNo
END
CLOSE CurItemNo
DEALLOCATE CurItemNo 

Update #StockTable SET AdjOutAmt=#OutTable.AdjOutAmt from #OutTable where #StockTable.ItemNo = #OutTable.ItemNo
Update #StockTable SET AdjInAmt=#InTable.AdjInAmt from #InTable where #StockTable.ItemNo = #InTable.ItemNo

SELECT distinct st.ItemNo,ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw ItemType
,ISNULL(sum(st.OpenQty),0)OpeningQty,ISNULL(sum(st.OpenAmt),0)OpeningCost
,ISNULL(sum(st.ReceiveQty),0) ReceiveQty,ISNULL((sum(st.ReceiveCost)+st.AdjInAmt),0) ReceiveCost
,ISNULL(sum(st.issueQty),0) issueQty,ISNULL((sum(st.IssueCost)+st.AdjOutAmt),0) IssueCost,ISNULL(st.AdjOutAmt,0) AdjOutAmt,
ISNULL(st.AdjInAmt,0) AdjInAmt,
'N' Trading,'N' NonStock,0 issueUCost,0 CloseQty ,0 CloseUCost,0 CloseCost
,'1900/01/01' TransDate, 'N' TransType,'N' TransNumber
from #StockTable st LEFT OUTER JOIN  
Products p ON st.ItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
GROUP BY st.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw,st.AdjOutAmt,st.AdjInAmt 


                ";

                if (WithoutZero)
                {
                    sqlText += @" 
 having sum(st.OpenQty)>0 or sum(st.ReceiveQty)>0 or sum(st.issueQty)>0
";

                }
                sqlText += @" 
ORDER BY pc.IsRaw ,pc.CategoryName,p.ProductName

Drop table #StockTable
Drop table #StockTemp
Drop table #OpenTable
Drop table #InTable
Drop table #OutTable

";


                #endregion SQL

                #region SQL Command

                SqlCommand objCommStockReport = new SqlCommand();
                objCommStockReport.Connection = currConn;

                objCommStockReport.CommandText = sqlText;
                objCommStockReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommStockReport.Parameters.Contains("@Post1"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommStockReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommStockReport.Parameters.Contains("@Post2"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommStockReport.Parameters["@Post2"].Value = Post2;
                }



                if (!objCommStockReport.Parameters.Contains("@StartDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommStockReport.Parameters["@StartDate"].Value = StartDate;
                }


                if (!objCommStockReport.Parameters.Contains("@EndDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommStockReport.Parameters["@EndDate"].Value = EndDate;
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommStockReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet StockWastage(string ProductNo, string CategoryNo, string ItemType, string StartDate,
                                    string EndDate, string Post1, string Post2, bool WithoutZero = false)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Stock Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction


                #region SQL

                //                sqlText = @"
                //
                //";

                #endregion SQL

                #region SQL

                sqlText = @"
                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);
--SET @post1='N';
--SET @post2='N';
--SET @StartDate='2013/05/01';
--SET @EndDate='2013/05/31';



CREATE TABLE #StockTemp(ItemNo varchar(200) NULL)


INSERT INTO #StockTemp(ItemNo) 
SELECT distinct p.ItemNo
FROM Products p
WHERE isnull(p.OpeningBalance,0) > 0 ";
                if (!string.IsNullOrWhiteSpace(ProductNo))
                {
                    sqlText += " and p.itemno='" + ProductNo + "' ";
                }
                sqlText += @" 

AND p.CategoryID IN(
SELECT DISTINCT CategoryID FROM ProductCategories pc
WHERE  pc.ActiveStatus='Y' ";

                if (!string.IsNullOrWhiteSpace(CategoryNo))
                {
                    sqlText += " and pc.CategoryID='" + CategoryNo + "' ";
                }
                if (!string.IsNullOrWhiteSpace(ItemType))
                {
                    sqlText += " and pc.IsRaw='" + ItemType + "' ";
                }


                sqlText += " ) ";

                sqlText += @" 
SELECT distinct a.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw ItemType
,sum(OpeningQty)OpeningQty,sum(OpeningCost)OpeningCost
,sum(InQty)ReceiveQty,sum(InCost)ReceiveCost
,sum(OutQty)issueQty,sum(OutCost)IssueCost,'N' Trading,'N' NonStock,0 issueUCost,0 CloseQty ,0 CloseUCost,0 CloseCost
,'1900/01/01' TransDate, 'N' TransType,'N' TransNumber

 FROM(
 	
SELECT distinct a.ItemNo, SUM(a.Quantity)OpeningQty,sum(a.Amount)OpeningCost,0 InQty,0 InCost ,0 OutQty,0 OutCost
	FROM (	
SELECT  ItemNo,
-isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0)Quantity,
-isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0)Amount 
FROM DisposeDetails WHERE (Post =@post1 or Post= @post2) 
and TransactionType in('VAT27')AND DisposeDetails.FromStock='Y' 
AND DisposeDate < @StartDate      AND itemno IN 
(SELECT DISTINCT Itemno FROM #StockTemp WHERE #StockTemp.ItemNo IN(SELECT DISTINCT ItemNo FROM Products p 
                                                                   WHERE p.CategoryID IN (SELECT CategoryID FROM ProductCategories pc WHERE pc.IsRaw='raw')))
UNION ALL
SELECT  ItemNo,isnull((UOMWastage),0) IssueQuantity,isnull((isnull(UOMWastage,0)*isnull(UOMPrice,0)),0)  
FROM IssueDetails WHERE  (Post =@post1 or Post= @post2)    AND IssueDateTime< @StartDate     
AND itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)  AND (UOMQty>0)  
) AS a GROUP BY a.ItemNo
UNION ALL
SELECT distinct pID.ItemNo,0,0 
,SUM(isnull(NULLIF(UOMWastage,0),isnull(UOMWastage,0) )) Quantity,SUM(isnull(UOMWastage,0)*isnull(UOMPrice,0)) Cost
,0,0
FROM IssueDetails pID
where pID.IssueDateTime >= @StartDate and pID.IssueDateTime < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp)
GROUP BY pID.ItemNo
UNION ALL

SELECT distinct pID.ItemNo,0,0 
,0,0
,SUM(isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0)) Quantity
,SUM(isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0)) Cost
FROM DisposeDetails pID
where pID.DisposeDate >= @StartDate and pID.DisposeDate < DATEADD(d,1, @EndDate) 
and (pID.Post =@post1 or pID.Post= @post2)
and TransactionType in('VAT27')AND pID.FromStock='Y' 
and itemno IN (SELECT DISTINCT Itemno FROM #StockTemp WHERE #StockTemp.ItemNo
IN(SELECT DISTINCT ItemNo FROM Products p WHERE p.CategoryID IN (SELECT CategoryID FROM ProductCategories pc WHERE pc.IsRaw='raw')))
GROUP BY pID.ItemNo
) AS a LEFT OUTER JOIN
Products p ON a.ItemNo=p.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID
GROUP BY a.ItemNo,p.ProductCode,p.ProductName,p.UOM,p.HSCodeNo,pc.CategoryName,pc.IsRaw 

                ";

                if (WithoutZero)
                {
                    sqlText += @" 
 having sum(OpeningQty)>0 or sum(InQty)>0 or sum(OutQty)>0
";

                }
                sqlText += @" 
 ORDER BY pc.IsRaw ,pc.CategoryName,p.ProductName
 drop table #StockTemp

";


                #endregion SQL

                #region SQL Command

                SqlCommand objCommStockReport = new SqlCommand();
                objCommStockReport.Connection = currConn;

                objCommStockReport.CommandText = sqlText;
                objCommStockReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommStockReport.Parameters.Contains("@Post1"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommStockReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommStockReport.Parameters.Contains("@Post2"))
                {
                    objCommStockReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommStockReport.Parameters["@Post2"].Value = Post2;
                }



                if (!objCommStockReport.Parameters.Contains("@StartDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommStockReport.Parameters["@StartDate"].Value = StartDate;
                }


                if (!objCommStockReport.Parameters.Contains("@EndDate"))
                {
                    objCommStockReport.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommStockReport.Parameters["@EndDate"].Value = EndDate;
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommStockReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet VehicleNew(string VehicleNo)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Vehicle Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT 
                            VehicleID,
                            VehicleType,
                            VehicleNo,
                            Description,
                            Comments,
                            ActiveStatus
 

                            FROM         Vehicles                      
                            WHERE
                            (VehicleNo = @VehicleNo or @VehicleNo is null) 
                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVehicleReport = new SqlCommand();
                objCommVehicleReport.Connection = currConn;

                objCommVehicleReport.CommandText = sqlText;
                objCommVehicleReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (VehicleNo == "")
                {
                    if (!objCommVehicleReport.Parameters.Contains("@VehicleNo"))
                    {
                        objCommVehicleReport.Parameters.AddWithValue("@VehicleNo", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVehicleReport.Parameters["@VehicleNo"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVehicleReport.Parameters.Contains("@VehicleNo"))
                    {
                        objCommVehicleReport.Parameters.AddWithValue("@VehicleNo", VehicleNo);
                    }
                    else
                    {
                        objCommVehicleReport.Parameters["@VehicleNo"].Value = VehicleNo;
                    }
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVehicleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet Adjustment(string HeadId, string AdjType, string StartDate, string EndDate, string Post)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Vehicle Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT ah.AdjHistoryNo, 
isnull(nullif(an.AdjName,''),'NA')AdjName
,convert(varchar,isnull(ah.AdjDate,'1900/01/01'),120)AdjDate
,isnull(ah.AdjInputAmount,0)AdjInputAmount
,isnull(ah.AdjInputPercent,0)AdjInputPercent
,isnull(ah.AdjAmount,0)AdjAmount
,isnull(nullif(ah.AdjType,''),'NA')AdjType
,isnull(nullif(ah.AdjReferance,''),'NA')AdjReferance
,isnull(nullif(ah.AdjDescription,''),'NA')AdjDescription
FROM AdjustmentHistorys ah
LEFT OUTER JOIN AdjustmentName an ON ah.AdjId=an.AdjId

WHERE ah.AdjInputAmount>0

";
                if (!string.IsNullOrWhiteSpace(HeadId))
                {
                    sqlText += " and an.AdjName='" + HeadId + "' ";
                }
                if (!string.IsNullOrWhiteSpace(AdjType))
                {
                    sqlText += " and ah.AdjType='" + AdjType + "' ";
                }
                if (!string.IsNullOrWhiteSpace(Post))
                {
                    sqlText += " and ah.Post='" + Post + "' ";
                }
                if (!string.IsNullOrWhiteSpace(StartDate))
                {
                    sqlText += " and ah.AdjDate >='" + StartDate + "' ";
                }
                if (!string.IsNullOrWhiteSpace(EndDate))
                {
                    sqlText += " and ah.AdjDate <dateadd(d,1, '" + EndDate + "') ";
                }

                #endregion

                #region SQL Command

                SqlCommand objCommVehicleReport = new SqlCommand();
                objCommVehicleReport.Connection = currConn;

                objCommVehicleReport.CommandText = sqlText;
                objCommVehicleReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVehicleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet VendorGroupNew(string VendorGroupID)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Vendor Group Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT     VendorGroupID, VendorGroupName, VendorGroupDescription, Comments, GroupType,ActiveStatus
                            FROM         VendorGroups
";
                if (!string.IsNullOrWhiteSpace(VendorGroupID))
                {
                    sqlText += " where VendorGroupID=@VendorGroupID";
                }
                sqlText += " order by VendorGroupName";


                #endregion

                #region SQL Command

                SqlCommand objCommVendorGroupReport = new SqlCommand();
                objCommVendorGroupReport.Connection = currConn;

                objCommVendorGroupReport.CommandText = sqlText;
                objCommVendorGroupReport.CommandType = CommandType.Text;
                objCommVendorGroupReport.Parameters.AddWithValueAndNullHandle("@VendorGroupID", VendorGroupID);


                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVendorGroupReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet InputOutputCoEfficient(string RawItemNo, string StartDate, string EndDate, string Post1, string Post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("InputOutputCoEfficientReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = "";
                sqlText += "  DECLARE @StartDate DATETIME;";
                sqlText += " DECLARE @EndDate DATETIME;";
                sqlText += " DECLARE @RawItem VARCHAR(10);";
                sqlText += "  DECLARE @TotalIssueQuantity DECIMAL (25,9); ";
                sqlText += "  DECLARE @TotalIssueQuantityR DECIMAL (25,9); ";
                sqlText += "  DECLARE @post1 VARCHAR(2); ";
                sqlText += "  DECLARE @post2 VARCHAR(2); ";
                sqlText += " SET @RawItem='" + RawItemNo + "'";
                sqlText += " SET @StartDate='" + StartDate + "';";
                sqlText += " SET @EndDate='" + EndDate + "';";
                sqlText += " SET @post1='" + Post1 + "';";
                sqlText += " SET @post2='" + Post2 + "';";
                sqlText += @"
CREATE TABLE #Table1(FinisgItemNo varchar(100) NULL,ReceiveNo varchar(100) NULL,BatchNo varchar(100) NULL,
	ReceiveQuantity decimal(25, 9) NULL,
	IssueQuantityBOMUom decimal(25, 9) NULL,BOMUom varchar(100) NULL,BOMUomc decimal(25, 9) NULL,
	ReceiveDate DATETIME,BOMID VARCHAR(100),TransactionType VARCHAR(100)
)
INSERT INTO #Table1(FinisgItemNo, ReceiveNo,TransactionType, BatchNo, ReceiveDate,ReceiveQuantity,
IssueQuantityBOMUom, BOMUom, BOMUomc,BOMID)

SELECT rd.ItemNo,isnull(rh.ReceiveNo,'-')ReceiveNo,rd.TransactionType,isnull(rh.SerialNo,'-')BatchNo,
rd.ReceiveDateTime ReceiveDate,SUM(isnull(rd.UOMQty,0))ReceiveQuantity
,0 IssueQuantityBOMUom,0 BOMUom,0 BOMUomc,0 BOMID
FROM ReceiveDetails rd  LEFT OUTER JOIN ReceiveHeaders rh ON rd.ReceiveNo=rh.ReceiveNo
WHERE ItemNo IN(SELECT distinct FinishItemNo  FROM BOMRaws WHERE RawItemNo=@RawItem)
AND rd.ReceiveDateTime >DATEADD(d,-1, @StartDate) and rd.ReceiveDateTime <DATEADD(d,1, @EndDate) 
AND rd.TransactionType IN ('Other','TollFinishReceive','WIP','PackageProduction','Tender')
AND (rd.Post =@post1 or rd.Post= @post2)
GROUP BY rd.ItemNo,rh.ReceiveNo,rd.TransactionType,rh.SerialNo,rd.ReceiveDateTime

INSERT INTO #Table1(FinisgItemNo, ReceiveNo,TransactionType, BatchNo, ReceiveDate,ReceiveQuantity,
IssueQuantityBOMUom, BOMUom, BOMUomc,BOMID)

SELECT rd.ItemNo,isnull(rh.ReceiveNo,'-')ReceiveNo,rd.TransactionType,isnull(rh.SerialNo,'-')BatchNo,rd.ReceiveDateTime ReceiveDate,
-SUM(isnull(rd.UOMQty,0))ReceiveQuantity
,0 IssueQuantityBOMUom,0 BOMUom,0 BOMUomc,0 BOMID
FROM ReceiveDetails rd  LEFT OUTER JOIN ReceiveHeaders rh ON rd.ReceiveNo=rh.ReceiveNo
WHERE ItemNo IN(SELECT distinct FinishItemNo  FROM BOMRaws WHERE RawItemNo=@RawItem)
AND rd.ReceiveDateTime >DATEADD(d,-1, @StartDate) and rd.ReceiveDateTime <DATEADD(d,1, @EndDate) 
AND rd.TransactionType IN ('ReceiveReturn')
AND (rd.Post =@post1 or rd.Post= @post2)
GROUP BY rd.ItemNo,rh.ReceiveNo,rd.TransactionType,rh.SerialNo,rd.ReceiveDateTime
UPDATE #Table1 SET BOMID=(select top 1 BOMID FROM BOMs b  WHERE EffectDate<=#Table1.ReceiveDate AND #Table1.FinisgItemNo=b.FinishItemNo )


UPDATE #Table1 SET 
IssueQuantityBOMUom =b.TotalQuantity,
BOMUOMc=b.UOMc,
BOMUom = b.UOM

FROM BOMRaws b
 WHERE b.BOMId=#Table1.BOMID AND b.RawItemNo=@RawItem
 

 
 SELECT @TotalIssueQuantity =SUM(isnull(id.UOMQty,0))
 FROM IssueDetails id
	where id.IssueDateTime >DATEADD(d,-1, @StartDate) and id.IssueDateTime <DATEADD(d,1, @EndDate)
	AND id.TransactionType IN('Other') AND id.ItemNo=@RawItem
--AND (id.Post =@post1 or id.Post= @post2)
	
	 SELECT @TotalIssueQuantityR =-SUM(isnull(id.UOMQty,0))
 FROM IssueDetails id
	where id.IssueDateTime >DATEADD(d,-1, @StartDate) and id.IssueDateTime <DATEADD(d,1, @EndDate)
	AND id.TransactionType IN('IssueReturn') AND id.ItemNo=@RawItem
--AND (id.Post =@post1 or id.Post= @post2)
	
SELECT p.ItemNo,p.ProductCode,p.ProductName,p.UOM,isnull(isnull(@TotalIssueQuantity,0)-isnull(@TotalIssueQuantityR,0),0) IssueQty
  FROM Products p WHERE p.ItemNo=@RawItem


SELECT t.FinisgItemNo,p.ProductCode,p.ProductName,p.UOM,
t.ReceiveNo,t.BatchNo,t.ReceiveQuantity,t.IssueQuantityBOMUom, t.BOMUom, t.BOMUomc,t.TransactionType,isnull(isnull(@TotalIssueQuantity,0)-isnull(@TotalIssueQuantityR,0),0) IssueQty
 FROM #Table1 t
LEFT OUTER JOIN Products p ON t.FinisgItemNo=p.ItemNo
DROP TABLE #Table1


";


                #endregion

                #region SQL Command

                SqlCommand objCommVendorGroupReport = new SqlCommand();
                objCommVendorGroupReport.Connection = currConn;

                objCommVendorGroupReport.CommandText = sqlText;
                objCommVendorGroupReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVendorGroupReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }


        public DataSet VendorReportNew(string VendorID, string VendorGroupID)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Vendor Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT 
                            V.VendorID, 
                            isnull(V.VendorCode,'N/A')VendorCode ,
                            isnull(V.VendorName,'N/A')VendorName ,
                            isnull(V.VATRegistrationNo,'N/A')VATRegistrationNo,
                            isnull(V.TINNo,'N/A')TINNo ,
                            isnull(V.Comments,'N/A')Comments ,
                            isnull(V.Address1,'N/A')Address1,
                            isnull(V.Address2,'N/A')Address2,
                            isnull(V.Address3,'N/A')Address3,
                            isnull(V.TelephoneNo,'N/A')TelephoneNo,
                            isnull(V.ContactPerson,'N/A')ContactPerson,
                            isnull(V.ContactPersonTelephone,'N/A')ContactPersonTelephone ,
                            isnull(V.ContactPersonEmail,'N/A')ContactPersonEmail,
                            isnull(VG.VendorGroupName,'N/A') VendorGroupName,
                            isnull(VG.GroupType,'N/A') GroupType
                            FROM         dbo.Vendors AS V LEFT OUTER JOIN
                            dbo.VendorGroups AS VG ON V.VendorGroupID = VG.VendorGroupID
                        
                            WHERE v.ActiveStatus in ('Y','N')";
                if (!string.IsNullOrWhiteSpace(VendorID))
                {
                    sqlText += " and VendorID =@VendorID ";

                }
                if (!string.IsNullOrWhiteSpace(VendorGroupID))
                {
                    sqlText += " and v.VendorGroupID =@VendorGroupID ";

                }
                sqlText += " order by VendorName ";

                #endregion

                #region SQL Command

                SqlCommand objCommVendorReport = new SqlCommand();
                objCommVendorReport.Connection = currConn;

                objCommVendorReport.CommandText = sqlText;
                objCommVendorReport.CommandType = CommandType.Text;
                objCommVendorReport.Parameters.AddWithValueAndNullHandle("@VendorID", VendorID);
                objCommVendorReport.Parameters.AddWithValueAndNullHandle("@VendorGroupID", VendorGroupID);


                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVendorReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet TrasurryDepositeNew(string DepositId)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("TrasurryDepositeNew");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
                
SELECT dp.DepositId
      ,dp.TreasuryNo
      ,convert (varchar,dp.DepositDateTime,120)DepositDateTime
      ,dp.DepositType
      ,dp.DepositAmount
      ,dp.ChequeNo
      ,dp.ChequeBank
      ,dp.ChequeBankBranch
      ,convert (varchar,dp.ChequeDate,120)ChequeDate
      ,dp.Comments
      ,dp.BankID	
	  ,dp.TreasuryCopy
      ,dp.DepositPerson
      ,dp.DepositPersonDesignation
      ,dp.TransactionType
	  ,bk.BankCode
      ,bk.BankName
      ,bk.BranchName
      ,bk.AccountNumber
      ,bk.Address1
      ,bk.City
      ,bk.TelephoneNo
      ,bk.FaxNo
      ,bk.Email
      ,bk.ContactPerson
      ,bk.ContactPersonDesignation
      ,bk.ContactPersonTelephone
      ,bk.ContactPersonEmail	 
  FROM Deposits dp
  left outer join BankInformations bk on dp.BankID =bk.BankID
  where dp.DepositId=@DepositId


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@DepositId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@DepositId", DepositId);
                }
                else
                {
                    objCommVAT16.Parameters["@DepositId"].Value = DepositId;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet VDSDepositNew(string DepositId)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VDSDeposit");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                #region Backup

                string top;


                sqlText = @"
                
 SELECT dp.DepositId
      ,dp.TreasuryNo
      ,convert (varchar,dp.DepositDateTime,120)DepositDateTime
      ,dp.DepositType
      ,dp.DepositAmount
      ,dp.ChequeNo
      ,dp.ChequeBank
      ,dp.ChequeBankBranch
      ,convert (varchar,dp.ChequeDate,120)ChequeDate
      ,dp.Comments
      ,dp.BankID	
	  ,dp.TreasuryCopy
      ,ISNULL(dp.DepositPerson,'-') DepositPerson
      ,dp.DepositPersonDesignation
      ,dp.TransactionType
	  ,vds.VendorId
	  ,vds.BillDeductAmount VDSAmount
	  ,bk.BankCode
      ,bk.BankName
      ,bk.BranchName
      ,bk.AccountNumber
      ,bk.City BankCity
	  ,v.VendorName
	  ,v.Address1
	  ,v.Address2
	  ,v.Address3
	  ,v.City
      
  FROM Deposits dp inner join VDS vds on vds.VDSId=dp.DepositId
  left outer join Vendors v on v.VendorID=vds.VendorID
  left outer join BankInformations bk on dp.BankID =bk.BankID
  where dp.DepositId=@DepositId

                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@DepositId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@DepositId", DepositId);
                }
                else
                {
                    objCommVAT16.Parameters["@DepositId"].Value = DepositId;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet SDTrasurryDepositeNew(string DepositId)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("TrasurryDepositeNew");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
                
SELECT dp.DepositId
      ,dp.TreasuryNo
      ,convert (varchar,dp.DepositDateTime,120)DepositDateTime
      ,dp.DepositType
      ,dp.DepositAmount
      ,dp.ChequeNo
      ,dp.ChequeBank
      ,dp.ChequeBankBranch
      ,convert (varchar,dp.ChequeDate,120)ChequeDate
      ,dp.Comments
      ,dp.BankID	
	  ,dp.TreasuryCopy
      ,dp.DepositPerson
      ,dp.DepositPersonDesignation
      ,dp.TransactionType
	  ,bk.BankCode
      ,bk.BankName
      ,bk.BranchName
      ,bk.AccountNumber
      ,bk.Address1
      ,bk.City
      ,bk.TelephoneNo
      ,bk.FaxNo
      ,bk.Email
      ,bk.ContactPerson
      ,bk.ContactPersonDesignation
      ,bk.ContactPersonTelephone
      ,bk.ContactPersonEmail	 
  FROM SDDeposits dp
  left outer join BankInformations bk on dp.BankID =bk.BankID
  where dp.DepositId=@DepositId


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@DepositId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@DepositId", DepositId);
                }
                else
                {
                    objCommVAT16.Parameters["@DepositId"].Value = DepositId;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ComapnyProfileString(string CompanyID)
        {
            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataTable = new DataSet();

            try
            {
                #region open connection

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection

                sqlText = @"
SELECT 
CompanyID,
CompanyName,
CompanyLegalName,
Address1,
Address2,
Address3,
City,
ZipCode,
TelephoneNo,
FaxNo,
Email,
ContactPerson,
ContactPersonDesignation,
ContactPersonTelephone,
ContactPersonEmail,
TINNo,
VatRegistrationNo,
Comments,
ActiveStatus,
convert(varchar(200), FYearStart,120)FYearStart,
convert (varchar(200),FYearEnd,120)FYearEnd

FROM  CompanyProfiles
                 
WHERE (CompanyId  =  @CompanyId ) ;

SELECT IssueFromBOM.IssueFromBOM,PrepaidVAT.PrepaidVAT
FROM
(SELECT s.SettingValue IssueFromBOM FROM Settings s
WHERE s.SettingName='IssueFromBOM') IssueFromBOM,
(SELECT s.SettingValue PrepaidVAT FROM Settings s
WHERE s.SettingName='PrepaidVAT') PrepaidVAT;

SELECT SettingGroup,SettingName,SettingValue  FROM Settings WHERE ActiveStatus='Y' ORDER BY SettingGroup
";

                SqlCommand objCommBankInformation = new SqlCommand();
                objCommBankInformation.Connection = currConn;
                objCommBankInformation.CommandText = sqlText;
                objCommBankInformation.CommandType = CommandType.Text;



                if (!objCommBankInformation.Parameters.Contains("@CompanyID"))
                {
                    objCommBankInformation.Parameters.AddWithValue("@CompanyID", CompanyID);
                }
                else
                {
                    objCommBankInformation.Parameters["@CompanyID"].Value = CompanyID;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommBankInformation);
                dataAdapter.Fill(dataTable);


            }
            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            return dataTable;

        }

        public DataSet ComapnyProfile(string CompanyID)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                        SELECT 
CompanyID,
CompanyName,
CompanyLegalName,
Address1,
Address2,
Address3,
City,
ZipCode,
TelephoneNo,
FaxNo,
Email,
ContactPerson,
ContactPersonDesignation,
ContactPersonTelephone,
ContactPersonEmail,
TINNo,
VatRegistrationNo,
Comments,
ActiveStatus,
convert(varchar(200), FYearStart,120)FYearStart,
convert (varchar(200),FYearEnd,120)FYearEnd

FROM  CompanyProfiles
                 
WHERE (CompanyId  =  @CompanyId ) 

";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@CompanyID"))
                {
                    objCommVAT16.Parameters.AddWithValue("@CompanyID", CompanyID);
                }
                else
                {
                    objCommVAT16.Parameters["@CompanyID"].Value = CompanyID;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet CurrencyReportNew()
        {
            #region Objects & Variables


            SqlConnection currConn = null;
            string sqlText = "";
            DataSet reportDataset = new DataSet();

            #endregion

            #region try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = "";
                sqlText +=
                    " select cc.CurrencyConversionId,cc.CurrencyCodeFrom,cf.CurrencyName CurrencyNameF, cf.CurrencyCode CurrencyCodeF";
                sqlText += " ,cc.CurrencyCodeTo,ct.CurrencyName CurrencyNameT,ct.CurrencyCode CurrencyCodeT,";
                sqlText +=
                    " cc.CurrencyRate,cc.Comments,convert (varchar,cc.ConversionDate,120)ConversionDate,cc.ActiveStatus";
                sqlText += " from dbo.CurrencyConversion cc ";
                sqlText += " inner join dbo.Currencies cf on cc.CurrencyCodeFrom=cf.CurrencyId";
                sqlText += " inner join dbo.Currencies ct on cc.CurrencyCodeTo=ct.CurrencyId";
                sqlText += " order by cc.CurrencyConversionId";

                // sqlText += "WHERE 	(cc.CurrencyCodeFrom  LIKE '%' +  '" + CurrencyCodeFrom + "' + '%' OR cc.CurrencyCodeFrom IS NULL)";

                //sqlText += " and (cc.CurrencyCodeTo LIKE '%' + '" + CurrencyCodeTo + "' + '%' OR cc.CurrencyCodeTo IS NULL)";
                // sqlText += " and (cc.CurrencyRate LIKE '%' + '" +CurrencyRate  + "' + '%' OR cc.CurrencyRate IS NULL)";
                // sqlText += "and (cc.ConversionDate LIKE '%' + '" + ConversionDate + "' + '%' OR cc.ConversionDate IS NULL)";
                // sqlText += " and (cc.ActiveStatus LIKE '%' + '" + ActiveStatus + "' + '%' OR cc.ActiveStatus IS NULL)";

                SqlCommand objCommProductType = new SqlCommand();
                objCommProductType.Connection = currConn;
                objCommProductType.CommandText = sqlText;
                objCommProductType.CommandType = CommandType.Text;

                //if (!objCommProductType.Parameters.Contains("@CurrencyCodeFrom"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyCodeFrom", CurrencyCodeFrom); }
                //else { objCommProductType.Parameters["@CurrencyCodeFrom"].Value = CurrencyCodeFrom; }

                //if (!objCommProductType.Parameters.Contains("@CurrencyCodeF"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyCodeF", CurrencyCodeF); }
                //else { objCommProductType.Parameters["@CurrencyCodeF"].Value = CurrencyCodeF; }
                //if (!objCommProductType.Parameters.Contains("@CurrencyNameF"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyNameF", CurrencyNameF); }
                //else { objCommProductType.Parameters["@CurrencyNameF"].Value = CurrencyNameF; }

                //if (!objCommProductType.Parameters.Contains("@CurrencyCodeTo"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyCodeTo", CurrencyCodeTo); }
                //else { objCommProductType.Parameters["@CurrencyCodeTo"].Value = CurrencyCodeTo; }
                //if (!objCommProductType.Parameters.Contains("@CurrencyCodeT"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyCodeT", CurrencyCodeT); }
                //else { objCommProductType.Parameters["@CurrencyCodeT"].Value = CurrencyCodeT; }
                //if (!objCommProductType.Parameters.Contains("@CurrencyNameT"))
                //{ objCommProductType.Parameters.AddWithValue("@CurrencyNameT", CurrencyNameT); }
                //else { objCommProductType.Parameters["@CurrencyNameT"].Value = CurrencyNameT; }

                //if (!objCommProductType.Parameters.Contains("@ActiveStatus"))
                //{ objCommProductType.Parameters.AddWithValue("@ActiveStatus", ActiveStatus); }
                //else { objCommProductType.Parameters["@ActiveStatus"].Value = ActiveStatus; }



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommProductType);
                dataAdapter.Fill(reportDataset);

                #endregion
            }
            #endregion
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            #endregion
            #region finally

            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return reportDataset;
        }

        public DataSet CostingNew(string ID, string ItemNo, string UOM, string UOMn, decimal UOMc,
                                  decimal totalQty, decimal rCostPrice)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string invoiceDateFrom = ID;
            string itemNo = ItemNo;

            DataSet dataSet = new DataSet("Purchase Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = " ";
                sqlText =
                    @"
                            SELECT    
'' PurchaseInvoiceNo,
 c.InputDate InvoiceDateTime,
'' VendorID, 
'N/A' VendorName,
c.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName,
p.ProductCode,
'NA' UOMn,
isnull(c.Quantity,0) UOMQty,
isnull(c.UnitCost,0) UOMPrice,
pc.CategoryName,
pc.IsRaw,     
c.InputDate ReceiveDate,                         
'N/A' UOM,
isnull(c.Quantity,0) Quantity,
isnull(c.UnitCost,0) CostPrice,
Isnull(c.SD,0) SD,
isnull(c.SDAmount,0)SDAmount,
Isnull(c.SD,0) VATRate,
Isnull(c.SD,0) CnFAmount, 
Isnull(c.SD,0) InsuranceAmoount
,Isnull(c.CD,0) CDAmount
,Isnull(c.RD,0) RDAmount
,Isnull(c.TVB,0) TVBAmount
,Isnull(c.TVA,0) TVAAmount
,Isnull(c.ATV,0) ATVAmount
,Isnull(c.Other,0) OthersAmount
,Isnull(c.VATAmount,0) AS VATAmount,
Isnull(c.AV,0) AS SubTotal,  ";

                sqlText += @"  
convert (varchar,c.InputDate,120) ReceiveDate, 
isnull(c.BENumber,'-') BENumber
";
                sqlText += " ,'" + UOM + "' rUOM ";
                sqlText += " ,'" + UOMn + "' rUOMn ";
                sqlText += " ," + UOMc + " rUOMc";
                sqlText += " ," + totalQty + " rTotalQty ";
                sqlText += " , cast(" + rCostPrice + " as decimal(25,9)) ItemCostPrice ";


                sqlText += @"  	
					
FROM Costing AS C LEFT OUTER JOIN
Products AS P ON C.ItemNo = P.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID 
WHERE C.Quantity>0 and (pc.IsRaw= 'Raw' or pc.IsRaw= 'Finish')
";

                #endregion

                #region Parameter

                //sqlText += " and c.ItemNo='" + ItemNo + "' and c.InputDate<='" + effectDate + "'";
                sqlText += " and c.ItemNo ='" + ItemNo + "' and c.Id ='" + ID + "'";

                #endregion Parameter

                #region SQL Command

                SqlCommand objCommPurchaseReport = new SqlCommand();
                objCommPurchaseReport.Connection = currConn;

                objCommPurchaseReport.CommandText = sqlText;
                objCommPurchaseReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet ComapnyProfileSecurity(string CompanyID)
        {
            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataTable = new DataSet();

            try
            {
                #region open connection

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection

                sqlText = @"
SELECT 
CompanyID,
CompanyName,
CompanyLegalName,
VatRegistrationNo,
Tom,
Jary,
Miki,
Mouse

FROM  CompanyProfiles
                 
WHERE (CompanyId  =  @CompanyId ) ;";


                SqlCommand objCommBankInformation = new SqlCommand();
                objCommBankInformation.Connection = currConn;
                objCommBankInformation.CommandText = sqlText;
                objCommBankInformation.CommandType = CommandType.Text;



                if (!objCommBankInformation.Parameters.Contains("@CompanyID"))
                {
                    objCommBankInformation.Parameters.AddWithValue("@CompanyID", CompanyID);
                }
                else
                {
                    objCommBankInformation.Parameters["@CompanyID"].Value = CompanyID;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommBankInformation);
                dataAdapter.Fill(dataTable);


            }
            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            return dataTable;

        }

        public DataTable MonthlySales(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo,
                                      string Customerid, string ItemNo, string CategoryID, string productType,
                                      string TransactionType, string Post, string onlyDiscount, bool bPromotional,
                                      string CustomerGroupID)
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("Monthly Sale");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT a.Product_Name,a.Product_Code,sum(a.SaleQuantity) Quantity,SUM(a.SubTotal) Amount,SUM(a.VATAmount) VAT,a.MonthNames,a.ItemNo,a.CustomerName,
                                    a.MonthSerial,a.YearSerial,a.UOM,a.CustomerID
	FROM(						
                            SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
							 sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')Product_Name,
                            isnull(P.ProductCode,'N/A')Product_Code,
							isnull(C.CustomerName,'N/A')CustomerName,
isnull(C.CustomerID,'N/A')CustomerID,
							DATENAME(MM,SIH.InvoiceDateTime) + ' ' + DATENAME(YYYY,SIH.InvoiceDateTime) MonthNames,
DATEPart(M,SIH.InvoiceDateTime) MonthSerial, DATEPart(YY,SIH.InvoiceDateTime) YearSerial,
							isnull(isnull(SID.Quantity,0)  + isnull(SID.PromotionalQuantity,0),0) SaleQuantity,
							isnull(SID.VATAmount,0)VATAmount ,
                            isnull(SID.UOM,0) UOM,
                            isnull(SID.SubTotal,0) SubTotal
							 FROM  dbo.SalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo 
      
                            WHERE (SID.Quantity>0)";

                if (!string.IsNullOrWhiteSpace(InvoiceDateFrom))
                {
                    sqlText += " and (SID.InvoiceDateTime >= '" + InvoiceDateFrom + "')";
                }
                if (!string.IsNullOrWhiteSpace(InvoiceDateTo))
                {
                    sqlText += " and (SID.InvoiceDateTime <dateadd(d,1, '" + InvoiceDateTo + "')) ";
                }

                if (!string.IsNullOrWhiteSpace(vCustomerid))
                    sqlText += " and C.CustomerID='" + vCustomerid + "' ";

                if (!string.IsNullOrWhiteSpace(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID='" + CustomerGroupID + "' ";
                if (!string.IsNullOrWhiteSpace(vItemNo))
                    sqlText += " and SID.ItemNo='" + vItemNo + "' ";
                if (!string.IsNullOrWhiteSpace(vCategoryID))
                    sqlText += " and P.CategoryID='" + vCategoryID + "' ";

                if (!string.IsNullOrWhiteSpace(vPost))
                {
                    sqlText += " and SIH.Post='" + vPost + "' ";

                }
                sqlText +=
                    @"
                            ) As a
							                              group by a.MonthNames,a.ItemNo,a.Product_Name,a.Product_Code,a.CustomerName,a.MonthSerial,a.YearSerial,a.UOM,a.CustomerID
							                             order by a.CustomerID,a.MonthNames,a.ItemNo,a.Product_Name,a.Product_Code,a.CustomerName,a.MonthSerial,a.YearSerial,a.UOM
                            ";


                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataTable);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataTable;
        }

        public DataTable MonthlyPurchases(string PurchaseInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo,
           string VendorId, string ItemNo, string CategoryID, string ProductType, string TransactionType, string Post,
           string PurchaseType, string VendorGroupId, string FromBOM, string UOM, string UOMn, decimal UOMc, decimal TotalQty, decimal rCostPrice)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string purchaseInvoiceNo = PurchaseInvoiceNo;
            string invoiceDateFrom = InvoiceDateFrom;
            string invoiceDateTo = InvoiceDateTo;
            string vendorId = VendorId;
            string itemNo = ItemNo;
            string categoryID = CategoryID;
            string productType = ProductType;
            string transactionType = TransactionType;
            string post = Post;
            string purchaseType = PurchaseType;

            DataTable dataSet = new DataTable("Purchase Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                sqlText = " ";
                sqlText =
                    @"
                           
 SELECT purchase.Product_Name,purchase.Product_Code,SUM(purchase.Quantity) Quantity,SUM(purchase.SubTotal) Amount,
 SUM(purchase.VATAmount) VAT,purchase.MonthNames,purchase.ItemNo,purchase.VendorName,
                                    purchase.MonthSerial,purchase.YearSerial


	FROM(						
            SELECT    
PIH.PurchaseInvoiceNo PurchaseInvoiceNo,
PID.ItemNo ItemNo,
isnull(P.ProductName,'N/A')Product_Name,
                            isnull(P.ProductCode,'N/A')Product_Code,
							isnull(V.VendorName,'N/A')VendorName,
							DATENAME(MM,PIH.InvoiceDateTime) + ' ' + DATENAME(YYYY,PIH.InvoiceDateTime) MonthNames,
DATEPart(M,PIH.InvoiceDateTime) MonthSerial, DATEPart(YY,PIH.InvoiceDateTime) YearSerial,
isnull(PID.Quantity,0) Quantity,

CASE 
WHEN PID.TransactionType='InputService' or PID.TransactionType='InputServiceImport' THEN isnull(PID.RebateAmount,0)
ELSE isnull(PID.VATAmount,0) END AS VATAmount,";

                if (FromBOM == "Y")
                {
                    sqlText +=
                        @"  
CASE 
WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
THEN isnull(PID.AssessableValue,0)
ELSE isnull(PID.SubTotal,0) END AS SubTotal
";
                }
                else
                {
                    sqlText +=
                        @"  

CASE 
WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
THEN isnull(PID.AssessableValue,0)
ELSE isnull(PID.SubTotal,0) END AS SubTotal

";
                }

                sqlText += @"  	
					
FROM         PurchaseInvoiceHeaders AS PIH LEFT OUTER JOIN
PurchaseInvoiceDetails AS PID ON PIH.PurchaseInvoiceNo = PID.PurchaseInvoiceNo LEFT OUTER JOIN
Products AS P ON PID.ItemNo = P.ItemNo LEFT OUTER JOIN
ProductCategories pc ON p.CategoryID=pc.CategoryID LEFT OUTER join
Vendors AS V ON PIH.VendorID = V.VendorID  LEFT OUTER JOIN
vendorGroups vg ON v.VendorGroupID=vg.VendorGroupID 
--left outer join Costing c on PID.ItemNo=c.ItemNo
WHERE PID.Quantity>0
";
                #endregion
                #region Parameter

                if (FromBOM == "Y")
                {
                    sqlText += " and PIH.PurchaseInvoiceNo=@purchaseInvoiceNo ";
                    sqlText += " and p.ItemNo=@itemNo ";

                }
                else if (FromBOM == "N")
                {
                    if (!string.IsNullOrWhiteSpace(purchaseInvoiceNo))
                    {
                        sqlText += " and PIH.PurchaseInvoiceNo=@purchaseInvoiceNo ";
                    }
                    if (!string.IsNullOrWhiteSpace(itemNo))
                    {
                        sqlText += " and p.ItemNo=@itemNo ";
                    }
                    if (!string.IsNullOrWhiteSpace(categoryID))
                    {
                        sqlText += " and pc.categoryID=@categoryID ";
                    }
                    if (!string.IsNullOrWhiteSpace(productType))
                    {
                        sqlText += " and pc.IsRaw=@productType ";
                    }
                    if (!string.IsNullOrWhiteSpace(vendorId))
                    {
                        sqlText += " and v.VendorID=@vendorId ";
                    }
                    if (!string.IsNullOrWhiteSpace(transactionType))
                    {
                        sqlText += " and pid.TransactionType=@transactionType ";
                    }


                    if (!string.IsNullOrWhiteSpace(invoiceDateFrom))
                    {
                        sqlText += " and pid.ReceiveDate >=@invoiceDateFrom ";
                    }
                    if (!string.IsNullOrWhiteSpace(invoiceDateTo))
                    {
                        sqlText += " and pid.ReceiveDate <dateadd(d,1, @invoiceDateTo) ";
                    }
                    if (!string.IsNullOrWhiteSpace(VendorGroupId))
                    {
                        sqlText += " and vg.VendorGroupID=@VendorGroupId ";
                    }
                }
                if (!string.IsNullOrWhiteSpace(post))
                {
                    sqlText += " and pid.Post=@post ";
                }
                sqlText += @"
)As purchase
 group by purchase.MonthNames,purchase.ItemNo,purchase.Product_Name,purchase.Product_Code,purchase.VendorName,purchase.MonthSerial,purchase.YearSerial
order by purchase.MonthNames,purchase.ItemNo,purchase.Product_Name,purchase.Product_Code,purchase.VendorName,purchase.MonthSerial,purchase.YearSerial
                            ";

                #endregion Parameter

                #region SQL Command

                SqlCommand objCommPurchaseReport = new SqlCommand();
                objCommPurchaseReport.Connection = currConn;

                objCommPurchaseReport.CommandText = sqlText;
                objCommPurchaseReport.CommandType = CommandType.Text;
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@purchaseInvoiceNo", purchaseInvoiceNo);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@itemNo", itemNo);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@categoryID", categoryID);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@productType", productType);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@vendorId", vendorId);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@transactionType", transactionType);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@invoiceDateFrom", invoiceDateFrom);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@invoiceDateTo", invoiceDateTo);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@VendorGroupId", VendorGroupId);
                objCommPurchaseReport.Parameters.AddWithValueAndNullHandle("@post", post);

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally
            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }


        public DataSet VDSReport(string DepositNo,
                                 string DepositDateFrom, string DepositDateTo, string BankID, string Post,
                                 string transactionType)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VDS Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                           select VendorName,BusinessCode,BusinessType,BillAmount,VDSPercent,BillDeductAmount,TreasuryNo,DepositDateTime,
AccountNumber, VendorId,DepositNumber,BankID,DepositId,TransactionType
FROM
(
select vd.VendorName,vd.BusinessCode,vd.BusinessType,v.BillAmount,v.VDSPercent,v.BillDeductAmount,d.TreasuryNo,
 d.DepositDateTime,b.AccountNumber, v.VendorId,v.DepositNumber,d.BankID,d.DepositId,d.TransactionType

from VDS v left outer join Deposits d on v.DepositNumber=d.DepositId
 left outer join Vendors vd on v.VendorId=vd.VendorID
 left outer join BankInformations b on d.BankID=b.BankID
 where d.Transactiontype NOT IN('VDS-Credit')

 UNION ALL
 select vd.VendorName,vd.BusinessCode,vd.BusinessType,v.BillAmount,v.VDSPercent,-v.BillDeductAmount,d.TreasuryNo,
d.DepositDateTime,b.AccountNumber, v.VendorId,v.DepositNumber,d.BankID,d.DepositId,d.TransactionType

from VDS v left outer join Deposits d on v.DepositNumber=d.DepositId
 left outer join Vendors vd on v.VendorId=vd.VendorID
 left outer join BankInformations b on d.BankID=b.BankID
where d.Transactiontype IN('VDS-Credit') 

) A

WHERE 
--(v.BillAmount>0) and 
";



                if (!string.IsNullOrWhiteSpace(DepositNo))
                {
                    sqlText += " DepositId='" + DepositNo + "' ";
                }
                if (!string.IsNullOrWhiteSpace(DepositDateFrom))
                {
                    sqlText += " and DepositDateTime >='" + DepositDateFrom + "' ";
                }
                if (!string.IsNullOrWhiteSpace(DepositDateTo))
                {
                    sqlText += " and DepositDateTime <dateadd(d,1, '" + DepositDateTo + "') ";
                }


                if (!string.IsNullOrWhiteSpace(BankID))
                {
                    sqlText += " and BankID='" + BankID + "' ";
                }
                if (!string.IsNullOrWhiteSpace(Post))
                {
                    sqlText += " and Post='" + Post + "' ";
                }
                if (!string.IsNullOrWhiteSpace(transactionType))
                {
                    sqlText += " and TransactionType='" + transactionType + "' ";
                }


                //sqlText += "  order by TransactionType,DepositDateTime";

                #endregion

                #region SQL Command

                SqlCommand objCommDepositReport = new SqlCommand();
                objCommDepositReport.Connection = currConn;

                objCommDepositReport.CommandText = sqlText;
                objCommDepositReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDepositReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }



        public DataSet DemandReport(string DemandNo, string DemandDateFrom, string DemandDateTo, string TransactionType, string Post)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Demand Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup

                string top;
                sqlText = "";

                sqlText += @"
                
SELECT  
dh.DemandNo,
convert (varchar,dh.DemandDateTime,110)DemandDate,
isnull(dh.FiscalYear,'')FiscalYear,
isnull(dh.MonthFrom,'')MonthFrom, isnull(dh.MonthTo,'')MonthTo,
isnull(dh.TotalQty,0)TotalQty ,dh.Post,d.demandLineNo,
isnull(p.ProductName,'N/A')ProductName,
isnull(p.ProductCode,'N/A')ProductCode,

isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
isnull(NULLIF(pii.PackagingNature,''),'')PackagingName,
isnull(NULLIF(pii.PackagingCapacity,''),'')PackagingSize,
isnull(NULLIF(pii.UOM,''),'')PackagingUom,

isnull(NULLIF(bp.BanderolId,''),'')BanderolId,
isnull(NULLIF(b.BanderolName,''),'')BanderolName,
isnull(NULLIF(b.BanderolSize,''),'')BanderolSize,
isnull(NULLIF(b.UOM,''),'')BanderolUom,

isnull(d.Quantity,0)Quantity ,
isnull(d.UOM,'N/A')UOM ,

isnull(d.NBRPrice,0)NBRPrice,
isnull(d.Comments,'N/A')Comments,
d.BandProductId,
--New add for receive
dh.RefDate,dh.RefNo,
dh.DemandDateTime From1DemandDate,convert (varchar,dh.DemandReceiveDate,110)DemandReceiveDate,
dh.DemandReceiveID ReturnDemandNo,
isnull(dh.VehicleID,'N/A')VehicleID,
isnull(Vehicles.VehicleType,'N/A')VehicleType,
isnull(Vehicles.VehicleNo,'N/A')VehicleNo,
isnull(Vehicles.DriverName,'N/A')DriverName

                            FROM         dbo.DemandHeaders dh LEFT OUTER JOIN demandDetails d on dh.DemandNo = d.DemandNo
							LEFT OUTER JOIN Vehicles ON dh.VehicleID = Vehicles.VehicleID  
							LEFT OUTER JOIN BanderolProducts bp on d.BandProductId = bp.BandProductId 
							LEFT OUTER JOIN Products p on bp.ItemNo = p.ItemNo
							LEFT OUTER JOIN Banderols b on bp.BanderolId = b.BanderolID 
							LEFT OUTER JOIN PackagingInformations pii on bp.PackagingId=pii.PackagingId 


                            WHERE

                            (dh.DemandNo  LIKE '%' +  @DemandNo   + '%' OR @DemandNo IS NULL) 
                            AND (dh.Post  LIKE '%' +  @Post   + '%' OR @Post IS NULL) 

                ";
                if (TransactionType == "Receive")
                {
                    sqlText += " AND (dh.DemandReceiveDate>= @demandDateFrom OR @demandDateFrom IS NULL)";
                    sqlText += " AND (dh.DemandReceiveDate <dateadd(d,1, @demandDateTo) OR @demandDateTo IS NULL)";
                }
                else
                {
                    sqlText += " AND (dh.DemandDateTime>= @demandDateFrom OR @demandDateFrom IS NULL)";
                    sqlText += " AND (dh.DemandDateTime <dateadd(d,1, @demandDateTo) OR @demandDateTo IS NULL)";
                }

                sqlText += " AND (dh.TransactionType='" + TransactionType + "') ";
                sqlText += "  order by dh.DemandNo  ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommDemand = new SqlCommand();
                objCommDemand.Connection = currConn;

                objCommDemand.CommandText = sqlText;
                objCommDemand.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommDemand.Parameters.Contains("@Post"))
                { objCommDemand.Parameters.AddWithValue("@Post", Post); }
                else { objCommDemand.Parameters["@Post"].Value = Post; }

                if (!objCommDemand.Parameters.Contains("@DemandNo"))
                { objCommDemand.Parameters.AddWithValue("@DemandNo", DemandNo); }
                else { objCommDemand.Parameters["@DemandNo"].Value = DemandNo; }

                if (DemandDateFrom == "")
                {
                    if (!objCommDemand.Parameters.Contains("@demandDateFrom"))
                    { objCommDemand.Parameters.AddWithValue("@demandDateFrom", System.DBNull.Value); }
                    else { objCommDemand.Parameters["@demandDateFrom"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommDemand.Parameters.Contains("@demandDateFrom"))
                    { objCommDemand.Parameters.AddWithValue("@demandDateFrom", DemandDateFrom); }
                    else { objCommDemand.Parameters["@demandDateFrom"].Value = DemandDateFrom; }
                }
                if (DemandDateTo == "")
                {
                    if (!objCommDemand.Parameters.Contains("@demandDateTo"))
                    { objCommDemand.Parameters.AddWithValue("@demandDateTo", System.DBNull.Value); }
                    else { objCommDemand.Parameters["@demandDateTo"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommDemand.Parameters.Contains("@demandDateTo"))
                    { objCommDemand.Parameters.AddWithValue("@demandDateTo", DemandDateTo); }
                    else { objCommDemand.Parameters["@demandDateTo"].Value = DemandDateTo; }
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDemand);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }



        public DataSet BanderolForm_4(string BanderolID, string post1, string StartDate, string EndDate, string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportBanderolFrom4");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup

                string top;


                sqlText = @"
                


                

--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(2);
--DECLARE @post2 VARCHAR(2);

--DECLARE @BanderolID VARCHAR(20);

--SET @BanderolID='1';
----SET @post1='Y'; --Form4
----SET @post2='Y'; --Form4
--SET @post1='Y'; --Preview
--SET @post2='N'; --Preview
--SET @StartDate='2014-04-01';
--SET @EndDate= '2014-04-30';
           
declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #Form_4(
SerialNo  varchar (2) NULL,FiscalYear varchar(50) NULL,BanderolID varchar(100) NULL,TranDate   datetime  NULL,
 DemandNo   varchar (200) NULL, ProductName   varchar (200) NULL, DemQuantity   decimal (25, 9) NULL,
 RecNoDate   varchar (200) NULL,	 RecQuantity   decimal (25, 9) NULL,
 UsedQty   decimal (25, 9) NULL,	 WastageQty   decimal (25, 9) NULL,	 SaleQty   decimal (25, 9) NULL,
 PackagingId VARCHAR(200),Pack VARCHAR(200),Remarks VARCHAR(200),TransType   varchar (200) NULL ) 

CREATE TABLE #FormTemp_4(SerialNo  varchar (2) NULL,FiscalYear varchar(50) NULL, TranDate   datetime  NULL,
 DemandNo   varchar (200) NULL, ProductName   varchar (200) NULL, DemQuantity   decimal (25, 9) NULL,
 RecNoDate   varchar (200) NULL,	 RecQuantity   decimal (25, 9) NULL,
 UsedQty   decimal (25, 9) NULL,	 WastageQty   decimal (25, 9) NULL,	 SaleQty   decimal (25, 9) NULL,
 PackagingId VARCHAR(200),Pack VARCHAR(200),Remarks VARCHAR(200),TransType   varchar (200) NULL,ItemNo   varchar (200) NULL) 

insert into #FormTemp_4(SerialNo,FiscalYear, TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate, RecQuantity, UsedQty, WastageQty, SaleQty, PackagingId, Pack, Remarks, TransType,ItemNo) 
SELECT 'A1' SerialNo, dh.FiscalYear,Convert(varchar,dh.DemandReceiveDate,120) TranDate,
rd.DemandReceiveID +' _'+Convert(varchar,dh.DemandDateTime,110) DemandNo,'' ProductName,
rd.DemandQty, rd.DemandNo+' '+Convert(varchar,dh.DemandReceiveDate,110) RecNoDate,rd.Quantity RecQuantity,
0 UsedQty ,0 WastageQty , 0 SaleQty,
isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
isnull(NULLIF(pii.PackagingNature,''),'') +'-'+isnull(NULLIF(pii.PackagingCapacity,''),'')+' '+isnull(NULLIF(pii.UOM,''),'') Pack,
'Demand Receive','Receive',rd.ItemNo
from DemandDetails rd LEFT OUTER JOIN DemandHeaders dh on rd.DemandNo=dh.DemandNo
left outer join BanderolProducts bp on rd.BandProductId=bp.BandProductId 
Left outer join PackagingInformations pii on bp.PackagingId=pii.PackagingId

where dh.DemandReceiveDate >= @StartDate and dh.DemandReceiveDate <DATEADD(d,1,@EndDate) 
and rd.BandProductId IN(Select BandProductId from BanderolProducts where BanderolId=@BanderolID) 
and dh.TransactionType='Receive'
AND (dh.Post =@post1 or dh.Post= @post2)

------start Receive--------

insert into #FormTemp_4(SerialNo,FiscalYear, TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty, PackagingId, Pack, Remarks, TransType,ItemNo)
select 'B1' SerialNo,
(select distinct SUBSTRING(FiscalYearName,8,4)+SUBSTRING(FiscalYearName,22,6) from fiscalyear where rd.ReceiveDateTime between PeriodStart and PeriodEnd ) FiscalYear,
 Convert(varchar,rd.ReceiveDateTime,120) TranDate,
rd.ReceiveNo,p.ProductName,0 DemandQty,'' DemandeRecNo,0 RecQuantity,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) as UsedQty ,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0) as WastageQty,
--isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
0 Quantity,
isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
isnull(NULLIF(pii.PackagingNature,''),'') +'-'+isnull(NULLIF(pii.PackagingCapacity,''),'')+' '+isnull(NULLIF(pii.UOM,''),'') Pack,
'Sale',rd.TransactionType,rd.ItemNo
from  ReceiveDetails RD LEFT OUTER JOIN BanderolProducts bp on bp.ItemNo = rd.ItemNo
Left outer join PackagingInformations pii on bp.PackagingId=pii.PackagingId
LEFT OUTER JOIN Products p on rd.ItemNo= p.ItemNo 
where bp.BanderolID = @BanderolID AND 
ReceiveDateTime >= @StartDate and 
ReceiveDateTime < DATEADD(d,1,@EndDate)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Other')

insert into #FormTemp_4(SerialNo,FiscalYear, TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty, PackagingId, Pack, Remarks, TransType,ItemNo)
select 'B1' SerialNo,
(select distinct SUBSTRING(FiscalYearName,8,4)+SUBSTRING(FiscalYearName,22,6) from fiscalyear where rd.ReceiveDateTime between PeriodStart and PeriodEnd ) FiscalYear,
 Convert(varchar,rd.ReceiveDateTime,120) TranDate,
rd.ReceiveNo,p.ProductName,0 DemandQty,'' DemandeRecNo,0 RecQuantity,
-isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) as UsedQty ,
-isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0) as WastageQty,
---isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )Quantity,
0 Quantity,
isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
isnull(NULLIF(pii.PackagingNature,''),'') +'-'+isnull(NULLIF(pii.PackagingCapacity,''),'')+' '+isnull(NULLIF(pii.UOM,''),'') Pack,
'Sale',rd.TransactionType,rd.ItemNo
from  ReceiveDetails RD LEFT OUTER JOIN BanderolProducts bp on bp.ItemNo = rd.ItemNo
Left outer join PackagingInformations pii on bp.PackagingId=pii.PackagingId
LEFT OUTER JOIN Products p on rd.ItemNo= p.ItemNo 
where bp.BanderolID = @BanderolID AND 
ReceiveDateTime >= @StartDate and 
ReceiveDateTime < DATEADD(d,1,@EndDate)
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('ReceiveReturn')

--Opening Qty
select @OpeningDate = Isnull(b.OpeningDate,'1900-01-01') from BanderolProducts b
WHERE BanderolID=@BanderolID

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #FormTemp_4(SerialNo,FiscalYear, TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty, Remarks)
SELECT distinct 'A' SerialNo,'',@OpeningDate TranDate,' ' DemandNo, ItemNo, SUM(a.Quantity)Quantity,
0,0,0,0,0,'Opening' TransType
	FROM (
		(SELECT @BanderolID ItemNo, Sum(isnull(OpeningQty,0)) Quantity  
FROM BanderolProducts b  WHERE b.BanderolID = @BanderolID )  

UNION ALL 

(SELECT @BanderolID ItemNo,isnull(sum(isnull(Quantity,0)),0) ReceiveQuantity
 FROM DemandDetails WHERE Post='Y'  AND TransactionDate< @StartDate  AND TransactionType='Receive' 
  and BandProductId IN(Select BandProductId from BanderolProducts where BanderolId=@BanderolID) ) 
UNION ALL
(Select @BanderolID ItemNo,-ISNULL(Sum(ISNULL(r.Quantity,0))* ISNULL(bp.BUsedQty,0),0) as UsedQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails r on bp.ItemNo = r.ItemNo 
                    where bp.BanderolId = @BanderolID and bp.ActiveStatus = 'Y'
                    and r.Post = 'Y'  and r.ReceiveDateTime < @StartDate and TransactionType IN('Other')
                    group by bp.BUsedQty)

UNION ALL
 (Select @BanderolID ItemNo, -ISNULL(Sum(ISNULL(r.Quantity,0))* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0),0) as WastageQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails r on bp.ItemNo = r.ItemNo 
                    where bp.BanderolId = @BanderolID and bp.ActiveStatus = 'Y' 
                    and r.Post = 'Y'  and r.ReceiveDateTime < @StartDate and TransactionType IN('Other')
                    group by bp.BUsedQty,bp.WastageQty)

UNION ALL
(Select @BanderolID ItemNo,ISNULL(Sum(ISNULL(r.Quantity,0))* ISNULL(bp.BUsedQty,0),0) as UsedQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails r on bp.ItemNo = r.ItemNo 
                    where bp.BanderolId = @BanderolID and bp.ActiveStatus = 'Y'
                    and r.Post = 'Y'  and r.ReceiveDateTime < @StartDate and TransactionType IN('ReceiveReturn')
                    group by bp.BUsedQty)

UNION ALL
 (Select @BanderolID ItemNo, ISNULL(Sum(ISNULL(r.Quantity,0))* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0),0) as WastageQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails r on bp.ItemNo = r.ItemNo 
                    where bp.BanderolId = @BanderolID and bp.ActiveStatus = 'Y' 
                    and r.Post = 'Y'  and r.ReceiveDateTime < @StartDate and TransactionType IN('ReceiveReturn')
                    group by bp.BUsedQty,bp.WastageQty)

) AS a GROUP BY a.ItemNo

insert into #Form_4(SerialNo,FiscalYear,TranDate, DemandNo, ProductName, DemQuantity,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty,PackagingId,Pack, Remarks,TransType) 
select SerialNo,FiscalYear,TranDate, DemandNo, ProductName, DemQuantity ,
 RecNoDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty,PackagingId,Pack, Remarks,TransType from #FormTemp_4
 order by SerialNo,TranDate;

 UPDATE #Form_4 set BanderolID = Banderols.BanderolID
 from Banderols where Banderols.BanderolID = @BanderolID 

 Declare @CFyRecQty decimal(25,9)
 Select @CFyRecQty=isnull(sum(isnull(Quantity,0)),0) FROM DemandDetails WHERE Post='Y'  AND TransactionType='Receive'
 AND TransactionDate >= (Select min(PeriodStart) from fiscalyear where @StartDate between PeriodStart and PeriodEnd) 
 AND TransactionDate < @StartDate  
  and BandProductId IN(Select BandProductId from BanderolProducts where BanderolId=@BanderolID)

 select ISNULL(#Form_4.SerialNo,'-') SerialNo,
 ISNULL(#Form_4.FiscalYear,'-') FiscalYear,
 convert (varchar,#Form_4.TranDate,120) TranDate,
 ISNULL(#Form_4.DemandNo,'-') DemandNo,
 ISNULL(#Form_4.ProductName,'-') ProductName,
 ISNULL(#Form_4.DemQuantity,0) DemQuantity,
 ISNULL(#Form_4.RecNoDate,'-') RecNoDate,
 ISNULL(#Form_4.RecQuantity,'0') RecQuantity,
 ISNULL(#Form_4.UsedQty,'0') UsedQty,
 ISNULL(#Form_4.WastageQty,'0') WastageQty,
 ISNULL(#Form_4.SaleQty,'0') SaleQty,
 ISNULL(#Form_4.PackagingId,'-') PackagingId,
 ISNULL(#Form_4.Pack,'-') Pack,
 ISNULL(#Form_4.BanderolID,'-') BanderolID,
 ISNULL(#Form_4.Remarks,'-') Remarks,
 ISNULL(#Form_4.TransType,'-') TransType,
 ISNULL(@CFyRecQty,'0') CFyRecQty
 From #Form_4

 Select isnull(NULLIF(b.BanderolName,''),'')+'-'+isnull(NULLIF(b.BanderolSize,''),'')+' '+isnull(NULLIF(b.UOM,''),'')Banderol
 from Banderols b where b.BanderolID=@BanderolID

 CREATE TABLE #Temp_Sale(ItemNo   varchar (200) NULL,ProductName   varchar (200) NULL, SaleQuantity   decimal (25, 9) NULL)

DECLARE @ItemNo varchar(50)
DECLARE CurItemNo CURSOR FOR 
SELECT DISTINCT Itemno FROM #FormTemp_4
OPEN CurItemNo
FETCH NEXT FROM  CurItemNo INTo @ItemNo
WHILE @@FETCH_STATUS = 0
BEGIN
--
insert into  #Temp_Sale(ItemNo,ProductName,SaleQuantity)
Select @ItemNo,p.ProductName,SUM(Isnull(sd.Quantity,0)) SaleQty
  from SalesInvoiceDetails sd
  LEFT OUTER JOIN Products p on sd.ItemNo= p.ItemNo 
   where sd.ItemNo = @ItemNo
 AND (sd.InvoiceDateTime >= @StartDate and sd.InvoiceDateTime < DATEADD(d,1,@EndDate))
AND (Post =@post1 or Post= @post2) 
group by p.ProductName 


FETCH NEXT FROM  CurItemNo INTo @ItemNo
END
CLOSE CurItemNo
DEALLOCATE CurItemNo 

Select * from #Temp_Sale


 DROP table #FormTemp_4
 DROP table #Form_4
 DROP table #Temp_Sale

";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommForm4 = new SqlCommand();
                objCommForm4.Connection = currConn;

                objCommForm4.CommandText = sqlText;
                objCommForm4.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommForm4.Parameters.Contains("@BanderolID"))
                {
                    objCommForm4.Parameters.AddWithValue("@BanderolID", BanderolID);
                }
                else
                {
                    objCommForm4.Parameters["@BanderolID"].Value = BanderolID;
                }
                if (StartDate == "")
                {
                    if (!objCommForm4.Parameters.Contains("@StartDate"))
                    { objCommForm4.Parameters.AddWithValue("@StartDate", System.DBNull.Value); }
                    else { objCommForm4.Parameters["@StartDate"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommForm4.Parameters.Contains("@StartDate"))
                    { objCommForm4.Parameters.AddWithValue("@StartDate", StartDate); }
                    else { objCommForm4.Parameters["@StartDate"].Value = StartDate; }
                }
                if (EndDate == "")
                {
                    if (!objCommForm4.Parameters.Contains("@EndDate"))
                    { objCommForm4.Parameters.AddWithValue("@EndDate", System.DBNull.Value); }
                    else { objCommForm4.Parameters["@EndDate"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommForm4.Parameters.Contains("@EndDate"))
                    { objCommForm4.Parameters.AddWithValue("@EndDate", EndDate); }
                    else { objCommForm4.Parameters["@EndDate"].Value = EndDate; }
                }

                if (!objCommForm4.Parameters.Contains("@post1"))
                { objCommForm4.Parameters.AddWithValue("@post1", post1); }
                else { objCommForm4.Parameters["@post1"].Value = post1; }

                if (!objCommForm4.Parameters.Contains("@post2"))
                { objCommForm4.Parameters.AddWithValue("@post2", post2); }
                else { objCommForm4.Parameters["@post2"].Value = post2; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommForm4);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        // Used and Wastage qqty come from Sale table


        public DataSet BanderolForm_5(string PeriodName)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportBanderolFrom5");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup

                string top;


                sqlText = @"

--declare @periodName VARCHAR (200);
--SET @periodName='April-2014';

declare @StartDate [datetime];
declare @EndDate [datetime];
declare @MLock varchar(1);
declare @FiscalYearName varchar(200);

select @StartDate=PeriodStart,@EndDate=periodEnd,@MLock=PeriodLock,@FiscalYearName= SUBSTRING(FiscalYearName,10,2)+'/'+SUBSTRING(FiscalYearName,25,4)  
FROM FiscalYear where periodName=@periodName;

CREATE TABLE #BanderolTemp(ItemNo varchar(200) NULL,BandeProductId varchar(100) NULL)

CREATE TABLE #Form_5(
SerialNo  varchar (2) NULL,ItemNo varchar (200) NULL, BandProductId varchar (200) NULL,DemandNo   varchar (200) NULL,
 ProductName   varchar (200) NULL, DemQuantity   decimal (25, 9) NULL, RefDate   varchar (200) NULL,RecQuantity   decimal (25, 9) NULL,
 UsedQty   decimal (25, 9) NULL, WastageQty   decimal (25, 9) NULL, SaleQty   decimal (25, 9) NULL,
 PackagingId VARCHAR(200),Pack VARCHAR(200),Remarks VARCHAR(200),TransType   varchar (200) NULL ) 

CREATE TABLE #FormTemp_5(SerialNo  varchar (2) NULL, ItemNo varchar (200) NULL, BandProductId varchar (200) NULL, DemandNo   varchar (200) NULL, 
 DemQuantity   decimal (25, 9) NULL, RefDate   varchar (200) NULL,	 RecQuantity   decimal (25, 9) NULL, UsedQty   decimal (25, 9) NULL,
 WastageQty   decimal (25, 9) NULL,	 SaleQty   decimal (25, 9) NULL,  Remarks VARCHAR(200),TransType   varchar (200) NULL) 

INSERT INTO #BanderolTemp(ItemNo,BandeProductId)
	Select Distinct stock.ItemNo,stock.BandProductId 
	From(
		Select Distinct ItemNo,BandProductId from BanderolProducts 
		where ItemNo IN (Select Distinct itemNo from SalesInvoiceDetails where InvoiceDateTime>=@StartDate and InvoiceDateTime<=@EndDate )

		UNION ALL 

		Select Distinct ItemNo,BandProductId from DemandDetails 
		where ItemNo IN (Select Distinct itemNo from DemandDetails where TransactionDate>=@StartDate and TransactionDate<=@EndDate ) 

		) stock

insert into #FormTemp_5(SerialNo, ItemNo, BandProductId, DemandNo, DemQuantity, RefDate, RecQuantity,Remarks, TransType) 
	SELECT 'A1' SerialNo, rd.ItemNo , rd.BandProductId, (rd.DemandReceiveID +' _'+Convert(varchar,dh.DemandDateTime,110)) DemandNo,
	Sum(ISNULL(rd.DemandQty,0)) DemandQty,(dh.RefNo+' '+Convert(varchar,dh.RefDate,110)) RefDate,SUM(ISNULL(rd.Quantity,0)) RecQuantity,
	'Receive' Remarks,'Receive' TransactionType
	from DemandDetails rd LEFT OUTER JOIN DemandHeaders dh on rd.DemandNo=dh.DemandNo
	left outer join BanderolProducts bp on rd.BandProductId=bp.BandProductId 
	where dh.DemandReceiveDate >= @StartDate and dh.DemandReceiveDate < DATEADD(d,1,@EndDate) 
	and rd.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
	and dh.TransactionType='Receive' AND dh.Post ='Y' 
	group by rd.DemandReceiveID,dh.DemandDateTime,dh.RefNo,dh.RefDate,rd.ItemNo,rd.BandProductId

------start Sale--------

insert into #FormTemp_5(SerialNo, ItemNo, BandProductId, DemandNo, UsedQty, WastageQty, SaleQty, Remarks, TransType)
	select 'B1' SerialNo,rd.ItemNo,bp.BandProductId,'-' DemandNo,
	SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0)) as UsedQty ,
    SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0)) as WastageQty,
	--SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) SaleQty,
	 0 SaleQty,
	'Sale' Remarks,rd.TransactionType
	from ReceiveDetails rd LEFT OUTER JOIN BanderolProducts bp on bp.ItemNo = rd.ItemNo
	where (ReceiveDateTime >= @StartDate) and (ReceiveDateTime < DATEADD(d,1,@EndDate))
	AND (Post ='Y' ) AND (TransactionType IN('Other'))
	AND (rd.ItemNo IN (Select Distinct ItemNo from #BanderolTemp))
	group by rd.ItemNo,bp.BandProductId,rd.TransactionType

insert into #FormTemp_5(SerialNo, ItemNo, BandProductId, DemandNo, UsedQty, WastageQty, SaleQty, Remarks, TransType)
	select 'B1' SerialNo,rd.ItemNo,bp.BandProductId,'-'DemandNo,
	-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0)) as UsedQty ,
	-SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0)) as WastageQty,
	---SUM(isnull(NULLIF(UOMQty,0),isnull(Quantity,0) )) SaleQty,
	0 SaleQty,
	'Sale' Remarks,rd.TransactionType
	from ReceiveDetails rd LEFT OUTER JOIN BanderolProducts bp on bp.ItemNo = rd.ItemNo
	where (ReceiveDateTime >= @StartDate) and (ReceiveDateTime < DATEADD(d,1,@EndDate))
	AND (Post ='Y' ) AND (TransactionType IN('ReceiveReturn'))
	AND (rd.ItemNo IN (Select Distinct ItemNo from #BanderolTemp))
	group by rd.ItemNo,bp.BandProductId,rd.TransactionType

insert into #FormTemp_5(SerialNo,ItemNo,BandProductId, DemQuantity ,Remarks)
SELECT distinct 'A' SerialNo, a.ItemNo,a.BandProductId, SUM(a.Quantity)Quantity,'Opening' TransType
	FROM (
		(SELECT ItemNo,BandProductId, isnull(OpeningQty,0) Quantity  
FROM BanderolProducts b  WHERE BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
  and ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
   )  

UNION ALL 

(SELECT ItemNo,BandProductId,isnull(sum(isnull(Quantity,0)),0) ReceiveQuantity
 FROM DemandDetails WHERE Post='Y'  AND TransactionDate < @StartDate  AND TransactionType='Receive' 
  and BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
  and ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
  group by ItemNo,BandProductId
  ) 
UNION ALL
(Select bp.ItemNo,bp.BandProductId,-ISNULL(Sum(ISNULL(s.Quantity,0))* ISNULL(bp.BUsedQty,0),0) as UsedQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails s on bp.ItemNo = s.ItemNo 
                    where s.Post = 'Y'  and s.ReceiveDateTime < @StartDate
					AND bp.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND s.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
					AND (TransactionType IN('ReceiveReturn'))
                    group by bp.BUsedQty,bp.ItemNo,bp.BandProductId)

UNION ALL
 (Select s.ItemNo,bp.BandProductId, -ISNULL(Sum(ISNULL(s.Quantity,0))* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0),0) as WastageQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails s on bp.ItemNo = s.ItemNo 
                    where s.Post = 'Y'  and s.ReceiveDateTime < @StartDate
					AND bp.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND s.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
					AND (TransactionType IN('ReceiveReturn'))
                    group by bp.BUsedQty,bp.WastageQty,s.ItemNo,bp.BandProductId)
					UNION ALL
(Select bp.ItemNo,bp.BandProductId,ISNULL(Sum(ISNULL(s.Quantity,0))* ISNULL(bp.BUsedQty,0),0) as UsedQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails s on bp.ItemNo = s.ItemNo 
                    where s.Post = 'Y'  and s.ReceiveDateTime < @StartDate
					AND bp.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND s.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
					AND (TransactionType IN('Other'))
                    group by bp.BUsedQty,bp.ItemNo,bp.BandProductId)

UNION ALL
 (Select s.ItemNo,bp.BandProductId, ISNULL(Sum(ISNULL(s.Quantity,0))* ISNULL(bp.BUsedQty,0) * ISNULL(bp.WastageQty,0),0) as WastageQty 
                    from BanderolProducts bp LEFT OUTER JOIN ReceiveDetails s on bp.ItemNo = s.ItemNo 
                    where s.Post = 'Y'  and s.ReceiveDateTime < @StartDate
					AND bp.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND s.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)
					AND (TransactionType IN('Other'))
                    group by bp.BUsedQty,bp.WastageQty,s.ItemNo,bp.BandProductId)

) AS a GROUP BY a.ItemNo,a.BandProductId


insert into #Form_5(SerialNo,DemandNo, ItemNo, DemQuantity, RefDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty,
Remarks,TransType,BandProductId) 
select SerialNo,DemandNo, ItemNo, DemQuantity ,
 RefDate,	 RecQuantity, UsedQty,	 WastageQty,	 SaleQty ,Remarks,TransType,BandProductId from #FormTemp_5
 order by SerialNo

 -- Calculate Sale Qty
 
CREATE TABLE #Temp_Sale(ItemNo   varchar (200) NULL,ProductName   varchar (200) NULL, SaleQuantity   decimal (25, 9) NULL)
DECLARE @ItemNo varchar(50)
DECLARE CurItemNo CURSOR FOR 
SELECT DISTINCT Itemno FROM #FormTemp_5
OPEN CurItemNo
FETCH NEXT FROM  CurItemNo INTo @ItemNo
WHILE @@FETCH_STATUS = 0
BEGIN
--
insert into  #Temp_Sale(ItemNo,ProductName,SaleQuantity)
Select @ItemNo,p.ProductName,SUM(Isnull(sd.Quantity,0)) SaleQty
  from SalesInvoiceDetails sd
  LEFT OUTER JOIN Products p on sd.ItemNo= p.ItemNo 
   where sd.ItemNo = @ItemNo
 AND (sd.InvoiceDateTime >= @StartDate and sd.InvoiceDateTime < DATEADD(d,1,@EndDate))
AND (Post ='Y') 
group by p.ProductName 


FETCH NEXT FROM  CurItemNo INTo @ItemNo
END
CLOSE CurItemNo
DEALLOCATE CurItemNo 

Update #Form_5 SET SaleQty =#Temp_Sale.SaleQuantity 
from #Temp_Sale  where #Form_5.ItemNo=#Temp_Sale.ItemNo

 select ISNULL(#Form_5.SerialNo,'-') SerialNo,
 ISNULL(#Form_5.DemandNo,'-') DemandNo,
 ISNULL(#Form_5.ItemNo,'-') ItemNo,
 ISNULL(p.ProductName,'-') ProductName,
 ISNULL(#Form_5.DemQuantity,0) DemQuantity,
 ISNULL(#Form_5.RefDate,'-') RefDate,
 ISNULL(#Form_5.RecQuantity,'0') RecQuantity,
 ISNULL(#Form_5.UsedQty,'0') UsedQty,
 ISNULL(#Form_5.WastageQty,'0') WastageQty,
 ISNULL(#Form_5.SaleQty,'0') SaleQty,
 ISNULL(#Form_5.Remarks,'-') Remarks,
 ISNULL(#Form_5.TransType,'-') TransType,
 ISNULL(#Form_5.BandProductId,'-') BandProductId,
 isnull(NULLIF(bp.PackagingId,''),'') PackagingId,
 isnull(NULLIF(pii.PackagingNature,''),'') +'-'+isnull(NULLIF(pii.PackagingCapacity,''),'')+' '+isnull(NULLIF(pii.UOM,''),'') Pack,
 isnull(NULLIF(bp.BanderolId,''),'') BanderolId,
 isnull(NULLIF(b.BanderolName,''),'')+'-'+isnull(NULLIF(b.BanderolSize,''),'')+' '+isnull(NULLIF(b.UOM,''),'')Banderol

 From #Form_5 Left outer join BanderolProducts bp on #Form_5.BandProductId=bp.BandProductId
    Left outer join Products p on #Form_5.ItemNo=p.ItemNo 
    Left outer join PackagingInformations pii on bp.PackagingId=pii.PackagingId
    Left outer join Banderols b on bp.BanderolId=b.BanderolID
    where #Form_5.BandProductId IN(Select Distinct BandeProductId from #BanderolTemp) 
					AND #Form_5.ItemNo IN (Select Distinct ItemNo from #BanderolTemp)



 Select isnull(@MLock,'N')MLock,Convert(varchar,ISNULL(@StartDate,GETDATE()),110)StartDate,Convert(varchar,ISNULL(@EndDate,GETDATE()),110)EndDate,
 ISNULL(@FiscalYearName,'-') FiscalYearName
 
Select ItemNo from #BanderolTemp

DROP table #Temp_Sale
Drop table #BanderolTemp
DROP table #FormTemp_5
DROP table #Form_5


";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommForm4 = new SqlCommand();
                objCommForm4.Connection = currConn;

                objCommForm4.CommandText = sqlText;
                objCommForm4.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommForm4.Parameters.Contains("@PeriodName"))
                { objCommForm4.Parameters.AddWithValue("@PeriodName", PeriodName); }
                else { objCommForm4.Parameters["@PeriodName"].Value = PeriodName; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommForm4);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
        // Used and Wastage qty come from Sale table

        public string GetReturnType(string itemNo, string transactionType)
        {
            #region Initializ

            string retResults = "";
            string sqlText = "";
            SqlConnection currConn = null;
            #endregion

            #region Try

            try
            {
                #region open connection and transaction
                if (currConn == null)
                {
                    currConn = _dbsqlConnection.GetConnection();
                    if (currConn.State != ConnectionState.Open)
                    {
                        currConn.Open();
                    }
                }

                #endregion open connection and transaction

                #region Return GetReturnType

                sqlText = "  ";

                sqlText = " Select Distinct Isnull(ReturnTransactionType,'-') from SalesInvoiceDetails ";
                sqlText += " where ItemNo = '" + itemNo + "'";
                sqlText += " and TransactionType =@transactionType ";

                SqlCommand cmd = new SqlCommand(sqlText, currConn);
                cmd.Parameters.AddWithValue("@transactionType", transactionType);

                if (cmd.ExecuteScalar() == null)
                {
                    retResults = "";
                }
                else
                {
                    retResults = (string)cmd.ExecuteScalar();
                }

                #endregion Return GetReturnType

            }

            #endregion try

            #region Catch and Finall
            catch (SqlException sqlex)
            {
                //throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + sqlex.Message.ToString());
                throw sqlex;
            }
            catch (Exception ex)
            {
                //throw new ArgumentNullException("", "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());//, "SQL:" + sqlText + FieldDelimeter + ex.Message.ToString());
                throw ex;
            }
            finally
            {
                if (currConn != null)
                {
                    if (currConn.State == ConnectionState.Open)
                    {
                        currConn.Close();

                    }
                }
            }

            #endregion

            #region Results

            return retResults;

            #endregion
        }

        public DataSet SelectMultipleInvoices(int noOfChallan, string transactionType, string challanDateFrom, string challanDateTo)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("MultipleVAT11");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup

                string top;

                sqlText = "";
                sqlText = "Select Top " + noOfChallan;
                sqlText += @" SalesInvoiceNo,Trading from SalesInvoiceHeaders 
where 
(IsPrint='N' AND Post='Y')
AND (SalesInvoiceHeaders.InvoiceDateTime >= @challanDateFrom ) 
AND (SalesInvoiceHeaders.InvoiceDateTime<dateadd(d,1, @challanDateTo) ) 
AND (TransactionType = @transactionType)
order by SalesInvoiceNo,InvoiceDateTime


                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT11 = new SqlCommand();
                objCommVAT11.Connection = currConn;

                objCommVAT11.CommandText = sqlText;
                objCommVAT11.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT11.CommandText = sqlText;
                objCommVAT11.CommandType = CommandType.Text;

                if (!objCommVAT11.Parameters.Contains("@noOfChallan"))
                {
                    objCommVAT11.Parameters.AddWithValue("@noOfChallan", noOfChallan);
                }
                else
                {
                    objCommVAT11.Parameters["@noOfChallan"].Value = noOfChallan;
                }
                if (challanDateFrom == "")
                {
                    if (!objCommVAT11.Parameters.Contains("@challanDateFrom"))
                    {
                        objCommVAT11.Parameters.AddWithValue("@challanDateFrom", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT11.Parameters["@challanDateFrom"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT11.Parameters.Contains("@challanDateFrom"))
                    {
                        objCommVAT11.Parameters.AddWithValue("@challanDateFrom", challanDateFrom);
                    }
                    else
                    {
                        objCommVAT11.Parameters["@challanDateFrom"].Value = challanDateFrom;
                    }
                }
                if (challanDateTo == "")
                {
                    if (!objCommVAT11.Parameters.Contains("@challanDateTo"))
                    {
                        objCommVAT11.Parameters.AddWithValue("@challanDateTo", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT11.Parameters["@challanDateTo"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT11.Parameters.Contains("@challanDateTo"))
                    {
                        objCommVAT11.Parameters.AddWithValue("@challanDateTo", challanDateTo);
                    }
                    else
                    {
                        objCommVAT11.Parameters["@challanDateTo"].Value = challanDateTo;
                    }
                }
                if (!objCommVAT11.Parameters.Contains("@transactionType"))
                {
                    objCommVAT11.Parameters.AddWithValue("@transactionType", transactionType);
                }
                else
                {
                    objCommVAT11.Parameters["@transactionType"].Value = transactionType;
                }


                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT11);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }



        #region RptBanderolProduct
        public DataSet RptBanderolProduct(string ProductCode)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dsBandePro = new DataSet("BanderolProducts");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                             @" SELECT isnull(NULLIF(bp.BandProductId,''),'')BandProductId,
                            isnull(NULLIF(bp.ItemNo,''),0)ItemNo, 
                            --convert (varchar,isnull (p.ProductCode,GETDATE()),120)ProductCode,
                            isnull(NULLIF(p.ProductCode,''),'')ProductCode,
                            isnull(NULLIF(p.ProductName,''),'')ProductName,
                            isnull(NULLIF(bp.BanderolId,''),'')BanderolId,
                            isnull(NULLIF(b.BanderolName,''),'')BanderolName,
                            isnull(NULLIF(b.BanderolSize,''),'')BanderolSize,
                            isnull(NULLIF(b.UOM,''),'')BanderolUom,
                            isnull(NULLIF(bp.PackagingId,''),'')PackagingId,
                            isnull(NULLIF(pii.PackagingNature,''),'')PackagingName,
                            isnull(NULLIF(pii.PackagingCapacity,''),'')PackagingSize,
                            isnull(NULLIF(pii.UOM,''),'')PackagingUom,
                            isnull(NULLIF(bp.BUsedQty,0),0)BUsedQty,
                            isnull(NULLIF(bp.WastageQty,0),0)WastageQty,
                            isnull(NULLIF(bp.ActiveStatus,''),'')ActiveStatus,
                            isnull(NULLIF(bp.OpeningQty,0),0)OpeningQty,
                            bp.OpeningDate
                            --convert (varchar,isnull (bp.OpeningDate,GETDATE()),120)OpeningDate
                            FROM BanderolProducts bp Left Outer Join Products p
							on bp.ItemNo=p.ItemNo Left outer Join Banderols b
							on bp.BanderolId=b.BanderolID Left outer join PackagingInformations pii
							on bp.PackagingId=pii.PackagingId 
                 
                            WHERE 
                                (p.ProductCode = @ProductCode OR @ProductCode IS NULL) 
                                   
                            order by bp.BandProductId";

                #endregion

                #region SQL Command

                SqlCommand objCommBanderolProduct = new SqlCommand();
                objCommBanderolProduct.Connection = currConn;

                objCommBanderolProduct.CommandText = sqlText;
                objCommBanderolProduct.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                //if (!objCommBanderolProduct.Parameters.Contains("@ProductCode"))
                //{ objCommBanderolProduct.Parameters.AddWithValue("@ProductCode", ProductCode); }
                //else { objCommBanderolProduct.Parameters["@ProductCode"].Value = ProductCode; }

                if (ProductCode == "")
                {
                    if (!objCommBanderolProduct.Parameters.Contains("@ProductCode"))
                    { objCommBanderolProduct.Parameters.AddWithValue("@ProductCode", System.DBNull.Value); }
                    else { objCommBanderolProduct.Parameters["@ProductCode"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommBanderolProduct.Parameters.Contains("@ProductCode"))
                    { objCommBanderolProduct.Parameters.AddWithValue("@ProductCode", ProductCode); }
                    else { objCommBanderolProduct.Parameters["@ProductCode"].Value = ProductCode; }
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommBanderolProduct);
                dataAdapter.Fill(dsBandePro);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dsBandePro;
        }

        #endregion

        #region Bureau
        public DataSet BureauVAT11Report(string SalesInvoiceNo, string Post1, string Post2)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("VAT11Report");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"SELECT    
                                SIH.SalesInvoiceNo SalesInvoiceNo, 
                                convert (varchar,SIH.InvoiceDateTime,120) InvoiceDate,
                                isnull(C.CustomerName,'N/A')CustomerName,
                                isnull(c.Address1,'N/A')Address1,isnull(c.Address2,'N/A')Address2,isnull(c.Address3,'N/A')Address3,
                                isnull(sih.DeliveryAddress1,'N/A')DeliveryAddress1,isnull(sih.DeliveryAddress2,'N/A')DeliveryAddress2,isnull(sih.DeliveryAddress3,'N/A')DeliveryAddress3,
                                isnull(v.VehicleType,'N/A')VehicleType,isnull(v.VehicleNo,'N/A')VehicleNo,
                                --isnull(P.ProductName,'N/A')ProductName ,
								isnull(SID.InvoiceName,'N/A')ProductName ,
								isnull(SID.Quantity,1)Quantity ,
                                isnull(SID.UOM,'N/A') UOM,
								isnull(SID.SalesPrice,0)UnitCost,
                                isnull(SID.VATRate,0)VATRate,
                                isnull(SID.VATAmount,0)VATAmount,
                                isnull(SID.SD,0) SD,
                                isnull(SID.SDAmount,0) SDAmount,
                                isnull(c.VATRegistrationNo,'N/A')VATRegistrationNo,
                                --isnull(SIH.Comments,'N/A') Comments,
--isnull(SIH.SerialNo,'N/A')SerialNo,
'' Comments,
'' SerialNo,
isnull(SIH.SaleType,'N/A')SaleType,
isnull(SIH.PreviousSalesInvoiceNo,'N/A')PreviousSalesInvoiceNo,
isnull(SIH.TransactionType,'N/A')TransactionType,
isnull(SIH.CurrencyID,0)CurrencyID,
isnull(SIH.CurrencyRateFromBDT,0)CurrencyRateFromBDT,
isnull(convert (varchar,SIH.DeliveryDate,120),convert (varchar,sih.InvoiceDateTime,120))DeliveryDate,                                

                                Isnull(SIH.LCNumber,0) LCNumber,

                                isnull(isnull(SID.Subtotal,0)+isnull(SID.VATAmount,0),0)Subtotal

                                FROM  dbo.BureauSalesInvoiceDetails AS SID LEFT OUTER JOIN
                                dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                                dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                                dbo.Products AS P ON SID.ItemNo = P.ItemNo 
								left outer join
                                dbo.Vehicles as V on sih.VehicleID=v.VehicleID 

                                WHERE
                                (SIH.SalesInvoiceNo = @SalesInvoiceNo )
                                AND (SIH.Post =@Post1 or SIH.Post= @Post2)
                                and (SID.Quantity>0)
order by SID.InvoiceLineNo asc
                            ";

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;
                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                if (!objCommSaleReport.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommSaleReport.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }
                if (!objCommSaleReport.Parameters.Contains("@Post1"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post1", Post1);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post1"].Value = Post1;
                }

                if (!objCommSaleReport.Parameters.Contains("@Post2"))
                {
                    objCommSaleReport.Parameters.AddWithValue("@Post2", Post2);
                }
                else
                {
                    objCommSaleReport.Parameters["@Post2"].Value = Post2;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT17Report(string ItemNo, string StartDate, string EndDate, string post1, string post2)
        {

            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT17");


            #endregion

            #region Try

            try
            {
                #region vat19 value

                string vExportInBDT = "";
                CommonDAL commonDal = new CommonDAL();
                vExportInBDT = commonDal.settings("VAT19", "ExportInBDT");

                #endregion vat19 value

                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string IsExport = "No";

                if (vExportInBDT == "N")
                {
                    sqlText = "Select CASE WHEN pc.IsRaw = 'Export' THEN 'Yes' ELSE 'No' END AS IsExport ";
                    sqlText += "from ProductCategories pc join Products p on pc.CategoryID = p.CategoryID ";
                    sqlText += "where p.ItemNo =@ItemNo";

                    SqlCommand cmd = new SqlCommand(sqlText, currConn);
                    cmd.Parameters.AddWithValue("@ItemNo", ItemNo);

                    object objItemNo = cmd.ExecuteScalar();
                    if (objItemNo == null)
                        IsExport = "No";
                    else
                        IsExport = objItemNo.ToString();
                }


                var top = "";
                sqlText = " ";


                #region SQL

                sqlText += @"
                
--DECLARE @StartDate DATETIME;
--DECLARE @EndDate DATETIME;
--DECLARE @post1 VARCHAR(2);
--DECLARE @post2 VARCHAR(2);
--DECLARE @ItemNo VARCHAR(20);

--DECLARE @IsExport VARCHAR(20);
--SET @IsExport ='No';

--SET @Itemno='189';
--SET @post1='Y';
--SET @post2='N';
--SET @StartDate='2014-01-01';
--SET @EndDate= '2014-08-01

             
CREATE TABLE #VAT_17(
SerialNo  varchar (2) NULL,	 ItemNo   varchar (200) NULL,
 StartDateTime   datetime  NULL,	 StartingQuantity   decimal (25, 9) NULL,
 StartingAmount   decimal (25, 9) NULL,	 CustomerID   varchar (200) NULL,
 SD   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 Quantity   decimal (25, 9) NULL,
 UnitCost   decimal (25, 9) NULL,	 TransID   varchar (200) NULL,	 TransType   varchar (200) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL)

CREATE TABLE #VATTemp_17(SerialNo  varchar (2) NULL,	 Dailydate   datetime  NULL,	 TransID   varchar (200) NULL,
 TransType   varchar (200) NULL,	 ItemNo   varchar (200) NULL,	 UnitCost   decimal (25, 9) NULL,
 Quantity   decimal (25, 9) NULL,	 VATRate   decimal (25, 9) NULL,	 SD   decimal (25, 9) NULL,Remarks VARCHAR(200),CreatedDateTime   datetime  NULL) 
 

------start Sale--------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime)
select 'B1', ChallanDateTime,SalesInvoiceNo,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN SUM(isnull(NULLIF(DollerValue,0),0)) ELSE SUM(isnull(NULLIF(SubTotal,0),0)) END AS SubTotal, 
Sum(isnull(Quantity,1))Quantity,SUM(VATAmount) VATAmount,
--SUM(SDAmount) SDAmount,
0 SD,
TransactionType,ChallanDateTime
from BureauSalesInvoiceDetails
where ChallanDateTime >= @StartDate and 
ChallanDateTime < DATEADD(d,1,@EndDate)  
AND (Post =@post1 or Post= @post2)
and (ItemNo=@ItemNo) 
AND TransactionType IN('ServiceNS')
group by SalesInvoiceNo,ChallanDateTime, TransactionType

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime)
select 'B1', ChallanDateTime,SalesInvoiceNo,'Sale',@ItemNo,
-CASE WHEN @IsExport='Yes' THEN SUM(isnull(NULLIF(DollerValue,0),0)) ELSE SUM(isnull(NULLIF(SubTotal,0),0)) END AS SubTotal, 
-Sum(  case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end )Quantity,-SUM(VATAmount) VATAmount,
---SUM(SDAmount) SDAmount,
0 SD,
TransactionType,CreatedOn
from BureauSalesInvoiceDetails
where ChallanDateTime >= @StartDate and 
ChallanDateTime < DATEADD(d,1,@EndDate) 
and ItemNo=@ItemNo 
AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit')
group by SalesInvoiceNo,ChallanDateTime, TransactionType,CreatedOn

------end sale--------
------Start Disposee--------

insert into #VATTemp_17(SerialNo,Dailydate,TransID,TransType,ItemNo,UnitCost,Quantity,VATRate,SD,remarks,CreatedDateTime)
select 'B1', DisposeDetails.DisposeDate,DisposeDetails.DisposeNumber,'Sale',@ItemNo,
CASE WHEN @IsExport='Yes' THEN isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(DollarPrice,0),0) ELSE isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0) END AS SubTotal,
isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >= @StartDate and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)            

AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT27') and sih.FromStock in ('Y')

------end Disposee--------


insert into #VAT_17(SerialNo,ItemNo,StartDateTime,StartingQuantity,StartingAmount,
CustomerID,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime)
select SerialNo,ItemNo,Dailydate,0,0,0,Quantity,UnitCost,TransID,TransType,VATRate,SD,remarks,CreatedDateTime
from #VATTemp_17
order by dailydate,SerialNo;

update #VAT_17 set 
CustomerID=SalesInvoiceHeaders.CustomerID
from SalesInvoiceHeaders
where SalesInvoiceHeaders.SalesInvoiceNo=#VAT_17.TransID 
and #VAT_17.TransType='Sale'
AND (SalesInvoiceHeaders.Post =@post1 or SalesInvoiceHeaders.Post= @post2)

select #VAT_17.SerialNo,convert (varchar,#VAT_17.StartDateTime,120)StartDateTime,
#VAT_17.StartingQuantity,#VAT_17.StartingAmount,
#VAT_17.TransID,#VAT_17.TransType,
isnull(c.CustomerName,'-')CustomerName,
isnull(c.Address1,'-')Address1,isnull(c.Address2,'-')Address2,
isnull(c.Address3,'-')Address3,
isnull(c.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,isnull(p.HSCodeNo,'NA')HSCodeNo,#VAT_17.Quantity,#VAT_17.VATRate
,#VAT_17.SD,#vat_17.UnitCost,remarks
,#vat_17.CreatedDateTime
from #VAT_17  left outer JOIN 
Customers as C on #VAT_17.CustomerID=c.CustomerID left outer join 
Products P on #VAT_17.ItemNo=p.ItemNo

order by CreatedDateTime,SerialNo

DROP TABLE #VAT_17
DROP TABLE #VATTemp_17

                ";

                #endregion SQL



                top = "A";




                #region SQL Command

                SqlCommand objCommVAT17 = new SqlCommand();

                objCommVAT17.Connection = currConn;

                objCommVAT17.CommandText = sqlText;
                objCommVAT17.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommVAT17.Parameters.Contains("@IsExport"))
                {
                    objCommVAT17.Parameters.AddWithValue("@IsExport", IsExport);
                }
                else
                {
                    objCommVAT17.Parameters["@IsExport"].Value = IsExport;
                }

                if (!objCommVAT17.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT17.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT17.Parameters["@ItemNo"].Value = ItemNo;
                }

                if (!objCommVAT17.Parameters.Contains("@StartDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT17.Parameters["@StartDate"].Value = StartDate;
                }
                if (!objCommVAT17.Parameters.Contains("@EndDate"))
                {
                    objCommVAT17.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT17.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT17.Parameters.Contains("@post1"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT17.Parameters["@post1"].Value = post1;
                }
                if (!objCommVAT17.Parameters.Contains("@post2"))
                {
                    objCommVAT17.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT17.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT17);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT18Report(string UserName, string StartDate, string EndDate, string post1, string post2)
        {

            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gototop = string.Empty;

                #region statement

                //                sqlText = @"
                //
                //";

                #endregion statement

                #region statement

                sqlText = @"
                

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2013/10/01'
--SET @EndDate='2013/10/31'
--SET @post1='Y';
--SET @post2='Y';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL

select 'Z2-1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('SaleVDS')
UNION ALL

SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')
UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')

UNION ALL
SELECT 'Z15' Sl ,   isnull(sum(PID.ATVAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')

UNION ALL
SELECT  'Z16' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')

UNION ALL

select 'Z17' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

UNION ALL

select 'Z18' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury-Credit')

)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,-isnull(DepositAmount,0),'Treasury-Credit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury-Credit')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A5',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Purchase',0,isnull(DepositAmount,0),'SaleVDS',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('SaleVDS')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SalesInvoiceNo
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo



insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SalesInvoiceNo
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Purchase',
0,isnull(sum(SID.VATAmount),0),'Credit',SalesInvoiceNo 
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

--add by Ruba for calculating ATVAmount of Import Purchases

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

-------close

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'DDB',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat>0 ) AND Remarks<>'Opening'

UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where Remarks in ('CreditPayble','ShortageRebatable','TreasuryCredit','SaleVDS') AND (vat < 0)

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18


                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT18_OldFormat(string UserName, string StartDate, string EndDate, string post1, string post2)
        {
            //Format before 30 June2014
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gototop = string.Empty;

                #region statement

                //                sqlText = @"
                //
                //";

                #endregion statement

                #region statement

                sqlText = @"
                

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2013/10/01'
--SET @EndDate='2013/10/31'
--SET @post1='Y';
--SET @post2='Y';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL


SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')
UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')
)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)


insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SalesInvoiceNo
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo



insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SalesInvoiceNo
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Sale',0,SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Sale',0,SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.ChallanDateTime,
SID.ChallanDateTime,SID.SalesInvoiceNo,'Purchase',
0,isnull(sum(SID.VATAmount),0),'Credit',SalesInvoiceNo 
from  BureauSalesInvoiceDetails SID  
where sid.ChallanDateTime >=  @StartDate and sid.ChallanDateTime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.ChallanDateTime,SID.SalesInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT','Import-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT','Local-Tarrif')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'B1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'Purchase',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'B1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'Purchase',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat>0 ) AND Remarks<>'Opening'

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18


                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT19ReportOld(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement

                sqlText = @"

--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='January-2014';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY]

----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','4','Sale Trading(VAT)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','5','Tender Local(VAT)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','6','Tender Trading Local(VAT)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','7','Sale Debit(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','9','Transfer Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','10','Toll Finish Issue Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','11','Toll Finish Issue Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('PackageSale')

--------------------

-------1 end-------
-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN
	INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','1','Export in BDT(Other)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','2','Export in BDT(ExportService)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','4','Export in BDT(ExportTender)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','5','Export in BDT(ExportTrading)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','6','Export in BDT(ExportTradingTender)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','7','Export in BDT(ExportPackage)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')
END
ELSE
	BEGIN
		
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','1','Export in USD(Other)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','2','Export in USD(ExportService)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','4','Export in USD(ExportTender)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','5','Export in USD(ExportTrading)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTrading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportTradingTender)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportTradingTender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','6','Export in USD(ExportPackage)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportPackage')

	END
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM BureauSalesInvoiceDetails sid
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','4','Sale Trading(Non VAT)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','5','Sale Tender Trading(Non VAT)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND sid.TransactionType IN('TradingTender')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','6','Tender Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Tender')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','7','Sale Debit(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Debit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','9','Transfer Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('InternalIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','Toll Finish Issue Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('TollFinishIssue')

 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','10','ServiceStock Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime>= @Datefrom and  SID.invoicedatetime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceStock')

-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)
 
------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  BureauSalesInvoiceDetails SID
where  SID.post='Y' and SID.invoicedatetime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')
--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','1','Total VDS for supplier')
-------19 End----
INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19


";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataTable BureauMonthlySales(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo,
                                     string Customerid, string ItemNo, string CategoryID, string productType,
                                     string TransactionType, string Post, string onlyDiscount, bool bPromotional,
                                     string CustomerGroupID)
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            ;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataTable dataTable = new DataTable("Monthly Sale");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                            SELECT a.Product_Name,a.Product_Code,sum(a.SaleQuantity) Quantity,SUM(a.SubTotal) Amount,SUM(a.VATAmount) VAT,a.MonthNames,a.ItemNo,a.CustomerName,
                                    a.MonthSerial,a.YearSerial,a.UOM,a.CustomerID
	FROM(						
                            SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
							 sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')Product_Name,
                            isnull(P.ProductCode,'N/A')Product_Code,
							isnull(C.CustomerName,'N/A')CustomerName,
                            isnull(C.CustomerID,'N/A')CustomerID,
							DATENAME(MM,SIH.InvoiceDateTime) + ' ' + DATENAME(YYYY,SIH.InvoiceDateTime) MonthNames,
                            DATEPart(M,SIH.InvoiceDateTime) MonthSerial, DATEPart(YY,SIH.InvoiceDateTime) YearSerial,
							isnull(SID.Quantity,0) SaleQuantity,
							--isnull(SID.VATAmount,0)VATAmount ,
CASE SID.TransactionType WHEN 'Credit' THEN -isnull(SID.VATAmount,0) ELSE isnull(SID.VATAmount,0) END AS VATAmount,
                            isnull(SID.UOM,0) UOM,
CASE SID.TransactionType WHEN 'Credit' THEN -isnull(SID.SubTotal,0) ELSE isnull(SID.SubTotal,0) END AS SubTotal
                            --isnull(SID.SubTotal,0) SubTotal
							 FROM  dbo.BureauSalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo 
      
                            WHERE (SID.Quantity>0)";

                if (!string.IsNullOrWhiteSpace(InvoiceDateFrom))
                {
                    sqlText += " and (SID.ChallanDateTime >= '" + InvoiceDateFrom + "')";
                }
                if (!string.IsNullOrWhiteSpace(InvoiceDateTo))
                {
                    sqlText += " and (SID.ChallanDateTime <dateadd(d,1, '" + InvoiceDateTo + "')) ";
                }

                if (!string.IsNullOrWhiteSpace(vCustomerid))
                    sqlText += " and C.CustomerID='" + vCustomerid + "' ";

                if (!string.IsNullOrWhiteSpace(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID='" + CustomerGroupID + "' ";
                if (!string.IsNullOrWhiteSpace(vItemNo))
                    sqlText += " and SID.ItemNo='" + vItemNo + "' ";
                if (!string.IsNullOrWhiteSpace(vCategoryID))
                    sqlText += " and P.CategoryID='" + vCategoryID + "' ";

                if (!string.IsNullOrWhiteSpace(vPost))
                {
                    sqlText += " and SIH.Post='" + vPost + "' ";

                }
                sqlText +=
                    @"
                            ) As a
			
            group by a.MonthNames,a.ItemNo,a.Product_Name,a.Product_Code,a.CustomerName,a.MonthSerial,a.YearSerial,a.UOM,a.CustomerID
			order by a.CustomerID,a.MonthNames,a.ItemNo,a.Product_Name,a.Product_Code,a.CustomerName,a.MonthSerial,a.YearSerial,a.UOM
                            ";


                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataTable);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataTable;
        }

        public DataSet BureauSaleMis(string SaleId)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 

SELECT sh.SalesInvoiceNo
      ,sh.CustomerID
      ,sh.DeliveryAddress1
      ,sh.VehicleID
      ,convert (varchar,sh.InvoiceDateTime,120)InvoiceDateTime
      ,convert (varchar,sh.DeliveryDate,120)DeliveryDate
      ,sh.TotalAmount
      ,sh.TotalVATAmount
      ,sh.SerialNo
      ,sh.Comments      
      ,sh.SaleType
      ,sh.PreviousSalesInvoiceNo
      ,sh.Trading
      ,sh.IsPrint
      ,sh.TenderId
      ,sh.TransactionType
      ,sh.Post
      ,isnull(sh.LCNumber,'nill')LCNumber
      ,isnull(sh.CurrencyID,'nill')CurrencyID
      ,isnull(sh.CurrencyRateFromBDT,0)CurrencyRateFromBDT
      ,isnull(sh.SaleReturnId,'nill')SaleReturnId
      ,isnull(sh.IsVDS,'nill')IsVDS
      ,isnull(sh.GetVDSCertificate,'nill')GetVDSCertificate 
	  ,c.CustomerName
      ,c.Address1
      ,c.City
      ,c.TelephoneNo
      ,c.FaxNo
      ,c.Email
      ,convert (varchar,c.StartDateTime,120)StartDateTime
      ,c.ContactPerson
      ,c.ContactPersonDesignation
      ,c.ContactPersonTelephone
      ,c.ContactPersonEmail
      ,c.TINNo
      ,c.VATRegistrationNo 
      ,c.ActiveStatus
      ,isnull(c.VDSPercent,0)VDSPercent
      ,isnull(v.VehicleCode,'nill')VehicleCode
      ,isnull(v.VehicleType,'nill')VehicleType
      ,isnull(v.VehicleNo,'nill')VehicleNo
      ,isnull(v.Description,'nill')Description
	  ,isnull(cu.CurrencyName,'nill')CurrencyName
      ,isnull(cu.CurrencyCode,'nill')CurrencyCode
      ,isnull(cu.Country,'nill')Country
  FROM SalesInvoiceHeaders sh
  left outer join Customers c on c.CustomerID = sh.CustomerID
  left outer join Vehicles v on v.VehicleID= sh.VehicleID
  left outer join Currencies cu on cu.CurrencyId= sh.CurrencyId
  Where sh.SalesInvoiceNo = @SaleId

SELECT sd.SalesInvoiceNo
      ,sd.InvoiceLineNo
      ,sd.ItemNo
      ,sd.Quantity
      ,sd.SalesPrice
      ,0 NBRPrice
      ,0 AVGPrice
      ,sd.UOM
      ,sd.VATRate
      ,sd.VATAmount
      ,sd.SubTotal
      ,'N\A'Comments
      ,sd.SD
      ,sd.SDAmount
      ,'' SaleType
      ,sd.PreviousSalesInvoiceNo
      ,'' Trading
      ,convert (varchar,sd.ChallanDateTime,120)InvoiceDateTime
      ,'Y' NonStock
      ,' ' TradingMarkUp
      ,sd.Type
      ,'' BENumber
      ,sd.Post
      ,sd.Quantity UOMQty
      ,sd.SalesPrice UOMPrice
      ,0 UOMc
      ,sd.UOM UOMn
      ,isnull(sd.DollerValue,0)DollerValue
      ,isnull(sd.CurrencyValue,0)CurrencyValue
      ,sd.TransactionType
      ,'nill' VATName
      ,'nill' SaleReturnId
      ,0 DiscountAmount
      ,0 DiscountedNBRPrice
	  ,p.ProductCode
      ,p.ProductName
      ,p.ProductDescription
  FROM BureauSalesInvoiceDetails sd
  left outer join Products p on p.ItemNo=sd.ItemNo
  Where sd.SalesInvoiceNo = @SaleId


SELECT se.SalesInvoiceNo
      ,se.SaleLineNo
      ,se.RefNo
      ,se.Description
      ,se.Quantity
      ,se.GrossWeight
      ,se.NetWeight
      ,se.NumberFrom
      ,se.NumberTo
      ,se.Comments
      ,se.PortFrom
      ,se.PortTo 
  FROM SalesInvoiceHeadersExport se
   Where se.SalesInvoiceNo = @SaleId




                ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@SaleId"))
                {
                    objCommVAT16.Parameters.AddWithValue("@SaleId", SaleId);
                }
                else
                {
                    objCommVAT16.Parameters["@SaleId"].Value = SaleId;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauSaleNew(string SalesInvoiceNo, string InvoiceDateFrom, string InvoiceDateTo, string Customerid,
                              string ItemNo, string CategoryID, string productType, string TransactionType, string Post,
                              string onlyDiscount, bool bPromotional, string CustomerGroupID)
        {
            #region Variables

            string vSalesInvoiceNo = SalesInvoiceNo;
            string vInvoiceDateFrom = InvoiceDateFrom;
            string vInvoiceDateTo = InvoiceDateTo;
            string vCustomerid = Customerid;
            string vItemNo = ItemNo;
            string vCategoryID = CategoryID;
            string vproductType = productType;
            string vTransactionType = TransactionType;
            string vPost = Post;

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Sales Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                    @"
                             SELECT    
                            SIH.SalesInvoiceNo SalesInvoiceNo, 
                            convert (varchar,SIH.InvoiceDateTime,120)InvoiceDateTime,
                            isnull(C.CustomerName,'N/A')CustomerName,
                            sid.ItemNo ItemNo,
                            isnull(P.ProductName,'N/A')ProductName,
                            isnull(P.ProductCode,'N/A')ProductCode,
                            isnull(SID.UOM,'N/A')UOM,
                            isnull(SID.UOM,'N/A')UOMn,
                            --isnull(SID.UOMc,1)UOMc,                            
                            isnull(SID.Quantity,0)Quantity,

                            --isnull(SID.PromotionalQuantity,0)PromotionalQuantity,
                            isnull(SID.Quantity,0) SaleQuantity,

                            isnull(SID.Quantity,0)UOMQty,
                            isnull(SID.SalesPrice,0)NBRPrice,
                            --isnull(NULLIF(isnull(SID.DiscountedNBRPrice,0),0),isnull(SID.NBRPrice,0))Discount,
                            --isnull(SID.UOMPrice,isnull(SID.NBRPrice,0))UOMPrice,
                            isnull(SID.SD,0)SD,
                            isnull(SID.SDAmount,0)SDAmount,
                            isnull(SID.VATRate,0)VATRate,
                            --isnull(SID.VATAmount,0)VATAmount ,
                            --isnull(SID.SubTotal,0) SubTotal,
                            --SID.Trading,
                            --SID.TradingMarkUp,
                            --SID.NonStock,
                            --SID.SaleType,
CASE SID.TransactionType WHEN 'Credit' THEN -isnull(SID.VATAmount,0) ELSE isnull(SID.VATAmount,0) END AS VATAmount,
                            isnull(SID.UOM,0) UOM,
CASE SID.TransactionType WHEN 'Credit' THEN -isnull(SID.SubTotal,0) ELSE isnull(SID.SubTotal,0) END AS SubTotal,
                            pc.CategoryName,pc.IsRaw ProductType

                            FROM  dbo.BureauSalesInvoiceDetails AS SID LEFT OUTER JOIN
                            dbo.SalesInvoiceHeaders AS SIH ON SID.SalesInvoiceNo = SIH.SalesInvoiceNo LEFT OUTER JOIN
                            dbo.Customers AS C ON SIH.CustomerID = C.CustomerID LEFT OUTER JOIN
                             customergroups cg ON c.CustomerGroupID=cg.CustomerGroupID  LEFT OUTER JOIN
                            dbo.Products AS P ON SID.ItemNo = P.ItemNo left outer join
                            dbo.ProductCategories PC on p.CategoryID=pc.CategoryID left outer join
                            dbo.Vehicles as V on sih.VehicleID=v.VehicleID
      
                            WHERE (SID.Quantity>0)";

                if (!string.IsNullOrWhiteSpace(vSalesInvoiceNo))
                    sqlText += " and SID.SalesInvoiceNo='" + vSalesInvoiceNo + "' ";

                //if (onlyDiscount == "Y")
                //{
                //    sqlText += " and SID.DiscountAmount >0 ";
                //}
                //else if (onlyDiscount == "N")
                //{
                //    sqlText += " and SID.DiscountAmount <=0 ";
                //}


                //if (bPromotional == true)
                //{
                //    sqlText += " and SID.PromotionalQuantity >0 ";
                //}
                if (!string.IsNullOrWhiteSpace(InvoiceDateFrom))
                {
                    sqlText += " and SID.ChallanDateTime >='" + InvoiceDateFrom + "' ";
                }
                if (!string.IsNullOrWhiteSpace(InvoiceDateTo))
                {
                    sqlText += " and (SID.ChallanDateTime <dateadd(d,1, '" + InvoiceDateTo + "')) ";
                }
                if (!string.IsNullOrWhiteSpace(vCustomerid))
                    sqlText += " and C.CustomerID='" + vCustomerid + "' ";

                if (!string.IsNullOrWhiteSpace(CustomerGroupID))
                    sqlText += " and cg.CustomerGroupID='" + CustomerGroupID + "' ";
                if (!string.IsNullOrWhiteSpace(vItemNo))
                    sqlText += " and SID.ItemNo='" + vItemNo + "' ";
                if (!string.IsNullOrWhiteSpace(vCategoryID))
                    sqlText += " and P.CategoryID='" + vCategoryID + "' ";
                if (!string.IsNullOrWhiteSpace(vproductType))
                    sqlText += " and pc.IsRaw='" + vproductType + "' ";
                if (!string.IsNullOrWhiteSpace(vTransactionType))
                {
                    sqlText += " and SIH.TransactionType='" + vTransactionType + "' ";
                }

                if (!string.IsNullOrWhiteSpace(vPost))
                {
                    sqlText += " and SIH.Post='" + vPost + "' ";
                }


                #endregion

                #region SQL Command

                SqlCommand objCommSaleReport = new SqlCommand();
                objCommSaleReport.Connection = currConn;

                objCommSaleReport.CommandText = sqlText;
                objCommSaleReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSaleReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet BureauCreditNote(string SalesInvoiceNo, string post1, string post2)
        {

            #region Variables

            SqlConnection currConn = null;

            string sqlText = "";

            DataSet dataSet = new DataSet("ReportCreditNote");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText = @"select Credit.InvoiceLineNo ,Credit.salesInvoiceNo,
                                    convert (varchar,Credit.ChallanDateTime,120)InvoiceDateTime,p.productName,
                                    (Credit.SalesPrice*Credit.Quantity)SubCost,Credit.SDAmount,Credit.VATAmount
                                    ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,CreditSum.SDAmount CSSDAmount,CreditSum.VATAmount CSVATAmount
                                    ,Credit.PrevioussalesInvoiceNo,CreditH.CustomerID,CreditH.VehicleID,
                                    convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
                                    ,credit.quantity,credit.uom

                                    ,CreditH.DeliveryAddress1,CreditH.DeliveryAddress2,CreditH.DeliveryAddress3,
                                    c.CustomerName,c.VATRegistrationNo,V.VehicleType,V.VehicleNo,CreditH.comments

                                    from BureauSalesInvoiceDetails AS Credit left outer join
                                    SalesInvoiceHeaders CreditH on Credit.salesInvoiceNo=CreditH.salesInvoiceNo left outer join

                                    Customers C on CreditH.CustomerID=c.customerID left outer join
                                    Vehicles V on CreditH.VehicleID=v.VehicleID left outer join
                                    SalesInvoiceHeaders SIH on Credit.PrevioussalesInvoiceNo=sih.salesInvoiceNo
                                    left outer join
                                    (select distinct salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from BureauSalesInvoiceDetails
                                    where salesInvoiceNo=(
                                    select distinct PrevioussalesInvoiceNo from BureauSalesInvoiceDetails
                                    where salesInvoiceNo=@SalesInvoiceNo)
                                    group by salesInvoiceNo
                                    ) New on Credit.PrevioussalesInvoiceNo=New.salesInvoiceNo left outer join
                                    (select salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from BureauSalesInvoiceDetails
                                     where salesInvoiceNo=@SalesInvoiceNo
                                    group by salesInvoiceNo
                                    )CreditSum on Credit.salesInvoiceNo=CreditSum.salesInvoiceNo left outer join products P on
                                    Credit.itemno=p.itemno
                                    where  Credit.salesInvoiceNo=@SalesInvoiceNo
                                    AND CreditH.TransactionType='Credit' 
                                   
AND (CreditH.Post =@post1 or CreditH.Post= @post2)

                                    and Credit.Quantity>0
order by Credit.InvoiceLineNo asc
";
                SqlCommand objCommCreditNote = new SqlCommand();
                objCommCreditNote.Connection = currConn;
                objCommCreditNote.CommandText = sqlText;
                objCommCreditNote.CommandType = CommandType.Text;

                if (!objCommCreditNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@SalesInvoiceNo", SalesInvoiceNo);
                }
                else
                {
                    objCommCreditNote.Parameters["@SalesInvoiceNo"].Value = SalesInvoiceNo;
                }

                if (!objCommCreditNote.Parameters.Contains("@post1"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommCreditNote.Parameters["@post1"].Value = post1;
                }
                if (!objCommCreditNote.Parameters.Contains("@post2"))
                {
                    objCommCreditNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommCreditNote.Parameters["@post2"].Value = post2;
                }


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommCreditNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT19Report18012016(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement

                sqlText = @"

--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='February-2015';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY]

----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

--------------------

-------1 end-------
-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

END
ELSE
	BEGIN
		

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')


	END
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM BureauSalesInvoiceDetails sid
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

 
-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)
 
------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','0','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  BureauSalesInvoiceDetails SID
where  SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')
--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','1','Total VDS for supplier')
-------19 End----
INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19


";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT19Report(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement

                sqlText = @"

--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='February-2015';
--SET @ExportInBDT='Y'
    
declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY]

----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

--------------------

-------1 end-------
-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(CurrencyValue),0),-isnull(sum(CurrencyValue * SID.SD/100),0),
-isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNSCredit')

END
ELSE
	BEGIN
		

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.DollerValue),0),-isnull(sum(DollerValue * SID.SD/100),0),
-isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNSCredit')
	END
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM BureauSalesInvoiceDetails sid
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

 
-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS-Credit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)
 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'12','4','Total SaleVDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('SaleVDS')

------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','0','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','11','SaleVDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('SaleVDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0),0,0,'13','1','Reverse Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  BureauSalesInvoiceDetails SID
where  SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')
--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','1','Total VDS for supplier')
-------19 End----
INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19



";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet BureauVAT19Report20150113(string PeriodName, string ExportInBDT)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("VAT19Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string gotoTop = string.Empty;

                #region Statement

                sqlText = @"

";

                #endregion

                #region Statement

                sqlText = @"

--declare @periodName VARCHAR (200);
--declare @ExportInBDT VARCHAR (200);

--SET @periodName='January-2014';
--SET @ExportInBDT='Y'

declare @DateFrom [datetime];
declare @DateTo [datetime];
declare @MLock varchar(1);
DECLARE @L14 DECIMAL(25, 9);
DECLARE @L6 DECIMAL(25, 9);
DECLARE @L15 DECIMAL(25, 9);
DECLARE @L16 DECIMAL(25, 9);

select @DateFrom=PeriodStart,@DateTo=periodEnd,@MLock=PeriodLock FROM FiscalYear where periodName=@periodName;

CREATE TABLE #VAT19BreakDown(	[LineNumber] [decimal](25, 9) NULL,	[SubLineNumber] [decimal](25, 9) NULL,	
[LineName] [varchar](200) NULL,	[A] [decimal](25, 9) NULL,	[B] [decimal](25, 9) NULL,
[C] [decimal](25, 9) NULL) ON [PRIMARY]
CREATE TABLE #VAT19(	[MonthName] [datetime] NULL,	[Line1A] [decimal](25, 9) NULL,	
[Line1B] [decimal](25, 9) NULL,	[Line1C] [decimal](25, 9) NULL,	[Line2A] [decimal](25, 9) NULL,
[Line2B] [decimal](25, 9) NULL,	[Line2C] [decimal](25, 9) NULL,	[Line3] [decimal](25, 9) NULL,	
[Line4] [decimal](25, 9) NULL,	[Line5] [decimal](25, 9) NULL,	[Line6] [decimal](25, 9) NULL,	
[Line7A] [decimal](25, 9) NULL,	[Line7B] [decimal](25, 9) NULL,	[Line8A] [decimal](25, 9) NULL,
[Line8B] [decimal](25, 9) NULL,	[Line9A] [decimal](25, 9) NULL,	[Line9B] [decimal](25, 9) NULL,	
[Line10] [decimal](25, 9) NULL,	[Line11] [decimal](25, 9) NULL,	[Line12] [decimal](25, 9) NULL,	
[Line13] [decimal](25, 9) NULL,	[Line14] [decimal](25, 9) NULL,	[Line15] [decimal](25, 9) NULL,	
[Line16] [decimal](25, 9) NULL,	[Line17] [decimal](25, 9) NULL,	[Line18] [decimal](25, 9) NULL,	
[Line19] [decimal](25, 9) NULL,	[Comments] [varchar](200) NULL) ON [PRIMARY]

----------------- 1 Start-------------------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','1','Sale Local(VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','2','Service Stock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'1','3','Service NonStock Local(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('ServiceNS')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'1','8','Sale Credit(VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='VAT' 
AND SID.TransactionType IN('Credit')

--------------------

-------1 end-------
-------------- 2 --------- start
IF(@ExportInBDT ='Y')
BEGIN

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(CurrencyValue),0),isnull(sum(CurrencyValue * SID.SD/100),0),
isnull(sum(CurrencyValue* SID.VATRate),0),'2','3','Export in BDT(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')

END
ELSE
	BEGIN
		

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DollerValue),0),isnull(sum(DollerValue * SID.SD/100),0),
isnull(sum(DollerValue* SID.VATRate),0),'2','3','Export in USD(ExportServiceNS)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Export' 
AND SID.TransactionType IN('ExportServiceNS')


	END
-------2 end-------

-------------- 3 --------- start

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','1','Sale Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID
WHERE SID.post='Y' and  SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)
and Type='Non VAT' 
AND sid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','2','Service Stock Local(Non VAT)'
FROM BureauSalesInvoiceDetails sid
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.SubTotal),0),isnull(sum(SID.SDAmount),0),
isnull(sum(SID.VATAmount),0),'3','3','Service NonStock Local(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     - isnull(sum(SID.SubTotal),0),-isnull(sum(SID.SDAmount),0),
-isnull(sum(SID.VATAmount),0),'3','8','Sale Credit(Non VAT)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime>= @Datefrom and  SID.ChallanDateTime <dateadd(d,1,@Dateto)and Type='Non VAT' 
AND SID.TransactionType IN('Credit')

 
-------------- 3 -------end

---- 4 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0) + isnull(SUM(c),0)C,0,0,'4','1','SD+VAT'
FROM  #VAT19BreakDown
where LineNumber IN(1)
----- 4 end ----

---- 5 start---
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'5','1','VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','2','Adj-Credit-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Credit Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,0,'5','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

-----------------
-- 5 end----

--- 6 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0),0, 0,'6','1','Total Payble'
FROM  #VAT19BreakDown
where LineNumber IN(4,5)
--- 6 end ----

---- 7 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','1','Purchase (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Other')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','2','Purchase (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Other')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','3','Purchase Return(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','4','Purchase Return(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseReturn')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','5','Input Service (Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)--and Type='Local-VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'7','6','Input Service (Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','7','Purchase Trading(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','8','Purchase Trading(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','9','Toll Receive(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','10','VAT26(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPrice,0)),0),
-isnull(sum(isnull(isnull(PIH.AppVATAmount,0),0)),0),0,'7','11','VAT27(Local)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','12','Purchase CN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','13','Purchase CN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseCN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','14','Purchase DN(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'7','15','Purchase DN(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('PurchaseDN')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','16','Purchase Service(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','17','Purchase Service(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','18','Purchase Service NS(Local-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'7','19','Purchase Service NS(Local-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Tarrif' 
AND pid.TransactionType IN('ServiceNS')


--------------------------
--- 7 end ----
-----8 start----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','1','Purchase (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.VATAmount),0),0,'8','2','Purchase (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','3','Purchase Trading Import (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','4','Purchase Trading Import(Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0)
,isnull(sum(PID.RebateAmount),0),0,'8','5','Purchase  Input Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.RebateAmount),0),0,'8','6','Purchase Input Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','7','Purchase  Service (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','8','Purchase Service (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','9','Purchase  Service NS (Import-VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(isnull(PID.AssessableValue,0)+ isnull(PID.CDAmount,0)+isnull(PID.OthersAmount,0)+ isnull(PID.RDAmount,0) + isnull(PID.TVBAmount,0) + isnull(PID.SDAmount,0) ),0),
isnull(sum(PID.VATAmount),0),0,'8','10','Purchase Service NS (Import-Tarrif)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Tarrif' 
AND pid.TransactionType IN('ServiceNSImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','11','VAT26(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT26')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT     -isnull(sum(isnull(PIH.AppTotalPriceImport,0)),0),
-isnull(sum(isnull(PIH.AppVATAmountImport,0)),0),0,'8','12','VAT27(Import)'
FROM DisposeHeaders  PIH 
where PIH.post='Y' 
and PIH.DisposeDate>= @Datefrom and 
PIH.DisposeDate <dateadd(d,1,@Dateto)
AND PIH.TransactionType IN('VAT27')
--------------
-----8 End----
---- 9 start--

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'9','1','ExportRebate(Imprt & Suplimentary TAX)')
-------9 End----
---- 10 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','1','Purchase (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Other')



INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','2','Purchase (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
 PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('Import')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','3','Purchase Return(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseReturn')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','4','Trading(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Trading')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','5','Purchase Trading Import (Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('TradingImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
0,0,'10','6','Purchase CN (Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and  PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseCN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(PID.SubTotal),0),
-isnull(sum(PID.VATAmount),0),0,'10','7','Purchase DN(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','8','Purchase Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('Service')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','9','Purchase Service NS(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('ServiceNS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','10','Purchase Input Service(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('InputService')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.RebateAmount),0),0,'10','11','Purchase Input Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('InputServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','12','Purchase Service Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','13','Purchase Service NS Import(Import-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Import-Non VAT' 
AND pid.TransactionType IN('ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','14','Purchase Toll Receive(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(PID.SubTotal),0),
isnull(sum(PID.VATAmount),0),0,'10','15','Purchase Toll Receive-WIP(Local-Non VAT)'
FROM PurchaseInvoiceDetails PID 
where PID.post='Y' and PID.ReceiveDate>= @Datefrom and 
PID.ReceiveDate <dateadd(d,1,@Dateto)and Type='Local-Non VAT' 
AND pid.TransactionType IN('TollReceive-WIP')

------------



--- 10 end ----

--- 11 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(B),0),0,0,'11','1','Total Rabate'
FROM  #VAT19BreakDown
where LineNumber IN(7,8,9)
--- 11 end ----
---- 12 start--

----------INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
----------VALUES(0,0,0,'12','1','Other Adjustmant (VDS)')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'12','1','Adj-Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Rebatable')


 
 INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'12','2','Adj-Shortage Rebatable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Shortage Rebatable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,
0,'12','3','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
 and DDBackDate>= @Datefrom and  DDBackDate <dateadd(d,1,@Dateto)
 
------------------
-------12 End----

-------13 start-----------
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','0','Deposit & VDS (Last month)'
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0),0,0,'13','1','Deposit & VDS (Last month)'
from  Deposits where post='Y' and DepositDateTime <  @Datefrom
AND Deposits.TransactionType  IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','2','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('Other','Trading','TollReceive','PurchaseCN','Service','ServiceNS','TollReceive-WIP')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','3','Purchase VAT Local (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('InputService')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.VATAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT    isnull(sum(PID.RebateAmount),0),0,0,'13','4','Purchase VAT Import (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom  and Type in('Import-VAT','Import-Tarrif') 
AND PID.TransactionType IN('InputServiceImport')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   -isnull(sum(PID.VATAmount),0),0,0,'13','5','Purchase Return VAT (last month)'
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @Datefrom and Type in('Local-VAT','Local-Tarrif') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','6','Sale VAT Local (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue','TollFinishIssue'
,'PackageSale','TradingTender','ServiceStock')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT -isnull(sum(SID.VATAmount),0),0,0,'13','7','Sale VAT Export (last month)'
FROM BureauSalesInvoiceDetails SID 
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Export')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT isnull(sum(SID.VATAmount),0),0,0,'13','8','Sale Credit (last month)'
FROM BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime<   @Datefrom  and Type='VAT' 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) ,0,0,'13','9','Dispose(last month)'   
from  DisposeHeaders SIH
where SIH.DisposeDate <   @Datefrom 
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','10','Credit Payable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate < @Datefrom AND 
SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','11','Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(isnull(SIH.AdjAmount,0)),0)   ,0,0,'13','12','Shortage Rebatable(last month)'   
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @Datefrom 
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post='Y')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','13','SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','13','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' 
AND TransactionType  IN('Treasury-Opening-Credit')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum(DepositAmount),0) ,0,0,'13','14','SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum(DepositAmount),0) ,0,0,'13','14','Reverse SD (Last month)' 
from  SDDeposits 
where post='Y' and DepositDateTime < @Datefrom 
AND TransactionType  IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select isnull(sum( SID.SDAmount) ,0),0,0,'13','15','Sale Credit SD(last month)'
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0) ,0,0,'13','16','Sale Local SD(last month)'    
from  BureauSalesInvoiceDetails SID
where SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Other','ServiceNS','Service','Trading','Tender','Debit','InternalIssue',
'TollFinishIssue')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
select -isnull(sum( SID.SDAmount) ,0)  ,0,0,'13','17','Sale Export SD(last month)'        
from  BureauSalesInvoiceDetails SID
where  SID.post='Y' and SID.ChallanDateTime <  @Datefrom 
AND SID.TransactionType IN('Export')


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT   isnull(sum(TotalDDBack),0),0,0,'13','18','Duty Drawback'
FROM DutyDrawBackHeader 
where post='Y'
and DDBackDate < @Datefrom
 

-------13 end -----------

----- 14 Start ----
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT DISTINCT isnull(SUM(A),0) A,0, 0,'14','1','Total Rebate'
FROM  #VAT19BreakDown
where LineNumber IN(11,12,13)
------- 14 end ----

----- 15 Start ----
SELECT @L6= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(6) 
SELECT @L14= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(14)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT @L6-@L14,0,0,'15','1','Net Payble'

----- 15 end ----
--- 16 Start ----


INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','1','Total Reverse Deposit'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,0,'16','2','Total Reverse VDS'
FROM Deposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('VDS-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(AdjAmount),0),0,
0,'16','3','Adj-Cash-Payable-Credit'
FROM AdjustmentHistorys 
where post='Y'
 and AdjDate>= @Datefrom and  AdjDate <dateadd(d,1,@Dateto)
AND AdjType IN('Cash Payable-Credit')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury')

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT      -isnull(sum(SID.DepositAmount),0),0,
0,'16','4','Total Reverse SD'
FROM SDDeposits SID 
where SID.post='Y' and SID.DepositDateTime>= @Datefrom and  SID.DepositDateTime <dateadd(d,1,@Dateto)
AND SID.TransactionType IN('Treasury-Credit')
--------------------------
--- 16 end ----

-----17 start-----------
SELECT @L15= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(15) 
SELECT @L16= isnull(SUM(A),0) FROM  #VAT19BreakDown where LineNumber IN(16)

INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
SELECT ( @L16-@L15),0,0,'17','1','Next Month Start'


-----17 end-----------

---- 18 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'18','1','18')
-------18 End----

---- 19 start--
INSERT INTO #VAT19BreakDown(A,B,C,LineNumber,SubLineNumber,LineName)
VALUES(0,0,0,'19','1','Total VDS for supplier')
-------19 End----
INSERT INTO #VAT19(MonthName)
VALUES(CONVERT(VARCHAR(200), @DateFrom, 120) )

UPDATE #VAT19 SET 
Line1A = isnull(V19.A,0),
Line1B = isnull(V19.b,0),
Line1C = isnull(V19.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=1 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET Line2A =  isnull(V191.A,0),Line2B = isnull(V191.b,0),Line2c = isnull(V191.c,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=2 GROUP BY LineNumber) AS V191

UPDATE #VAT19 SET  Line3 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=3 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line4 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=4 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line5 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=5 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line6 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=6 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line7A =  isnull(V19.A,0),Line7B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=7 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line8A =  isnull(V198.A,0),Line8B =  isnull(V198.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(isnull(A,0)),0) A,isnull(SUM(isnull(B,0)),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=8 GROUP BY LineNumber) AS V198

UPDATE #VAT19 SET  Line9A =  isnull(V19.A,0),Line9B =  isnull(V19.B,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=9 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line10 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=10 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line11 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=11 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line12 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=12 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line13 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=13 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line14 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=14 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line15 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=15 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line16 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=16 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line17 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=17 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line18 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=18 GROUP BY LineNumber) AS V19

UPDATE #VAT19 SET  Line19 =  isnull(V19.A,0)
FROM (SELECT DISTINCT LineNumber,isnull(SUM(A),0) A,isnull(SUM(B),0) B, isnull(SUM(c),0)C FROM  #VAT19BreakDown
WHERE LineNumber=19 GROUP BY LineNumber) AS V19

SELECT MonthName,Line1A,Line1B,Line1C,Line2A,Line2B,Line2C,Line3,Line4, Line5, Line6, Line7A,Line7B,Line8A,Line8B,Line9A
,Line9B,Line10,Line11,Line12,Line13,Line14,Line15,Line16,Line17,Line18,Line19,isnull(@MLock,'N')MLock
FROM #VAT19

SELECT * FROM #VAT19BreakDown ORDER BY LineNumber,SubLineNumber

DROP TABLE #VAT19BreakDown
DROP TABLE #VAT19


";

                #endregion


                gotoTop = string.Empty;


                #region SQL Command

                SqlCommand objCommVAT19 = new SqlCommand();
                objCommVAT19.Connection = currConn;

                objCommVAT19.CommandText = sqlText;
                objCommVAT19.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT19.Parameters.Contains("@PeriodName"))
                {
                    objCommVAT19.Parameters.AddWithValue("@PeriodName", PeriodName);
                }
                else
                {
                    objCommVAT19.Parameters["@PeriodName"].Value = PeriodName;
                }

                if (!objCommVAT19.Parameters.Contains("@ExportInBDT"))
                {
                    objCommVAT19.Parameters.AddWithValue("@ExportInBDT", ExportInBDT);
                }
                else
                {
                    objCommVAT19.Parameters["@ExportInBDT"].Value = ExportInBDT;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT19);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        #endregion Bureau


        public DataSet RptDeliveryReport(string challanNo)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dsDelivery = new DataSet("DeliveryReport");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                             @" select SaleH.DeliveryChallanNo DCNo, convert (varchar,SaleH.InvoiceDateTime,120) DeliveryDateTime,
                                SaleH.CustomerID, SaleH.DeliveryAddress1,
                                SaleH.DeliveryAddress2, SaleH.DeliveryAddress3, c.CustomerName,
                                SaleD.salesInvoiceNo ChallanNo,convert (varchar,SaleD.InvoiceDateTime,120) ChallanDateTime,
                                SaleD.InvoiceLineNo, SaleD.ItemNo Code, p.productName, SaleD.quantity, SaleD.uom,
                                (CASE WHEN SaleH.TransactionType='Other' then 'Local Sales' Else SaleH.TransactionType END) Purpose ,
                                SaleH.comments Remarks

                                from SalesInvoiceDetails AS SaleD left outer join
                                SalesInvoiceHeaders SaleH on SaleD.salesInvoiceNo=SaleH.salesInvoiceNo left outer join
                                Customers C on SaleH.CustomerID=c.customerID left outer join
                                Products p on SaleD.ItemNo=P.ItemNo
                 
                                WHERE 
                                (SaleD.salesInvoiceNo = @ChallanNo OR @ChallanNo IS NULL) 
                                   
                           ";

                #endregion

                #region SQL Command

                SqlCommand objCommDeliveryReport = new SqlCommand();
                objCommDeliveryReport.Connection = currConn;

                objCommDeliveryReport.CommandText = sqlText;
                objCommDeliveryReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (challanNo == "")
                {
                    if (!objCommDeliveryReport.Parameters.Contains("@ChallanNo"))
                    { objCommDeliveryReport.Parameters.AddWithValue("@ChallanNo", System.DBNull.Value); }
                    else { objCommDeliveryReport.Parameters["@ChallanNo"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommDeliveryReport.Parameters.Contains("@ChallanNo"))
                    { objCommDeliveryReport.Parameters.AddWithValue("@ChallanNo", challanNo); }
                    else { objCommDeliveryReport.Parameters["@ChallanNo"].Value = challanNo; }
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDeliveryReport);
                dataAdapter.Fill(dsDelivery);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dsDelivery;
        }

        public DataSet RptVAT7Report(string vat7No)
        {
            #region Variables

            SqlConnection currConn = null;
            string sqlText = "";
            DataSet dsVat7 = new DataSet("VAT7Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText =
                             @" SELECT 
	   VAT7.VAT7No
	  ,convert (varchar,VAT7.Vat7Date,120)Vat7Date
	  ,VAT7.FinishItemNo
      ,isnull(fp.ProductCode,'N/A') FinishProductCode
      ,isnull(fp.ProductName,'N/A') FinishProductName
      ,isnull(VAT7.FinishUOM,'N/A') FinishUOM
      ,cast(isnull(VAT7.Vat7LineNo,0) as varchar)+'.' Vat7LineNo 
      ,isnull(VAT7.ItemNo,'N/A') ItemNo
	  ,isnull(Products.ProductCode,'N/A') ProductCode
      ,isnull(Products.ProductName,'N/A') ProductName
      ,isnull(VAT7.UOM,'N/A') UOM
      ,isnull(VAT7.Quantity,0) Quantity
      ,isnull(VAT7.UOMQty,0) UOMQty
      ,isnull(VAT7.UOMc,0) UOMc
      ,isnull(VAT7.UOMn,'N/A') UOMn
	  
 FROM VAT7
            left outer join Products on VAT7.ItemNo=Products.ItemNo LEFT OUTER JOIN
                            Products fp on VAT7.FinishItemNo=fp.ItemNo 
                 
                                WHERE 
                                (VAT7.VAT7No = @VAT7No OR @VAT7No IS NULL) 
                                   
                           ";

                #endregion

                #region SQL Command

                SqlCommand objCommDeliveryReport = new SqlCommand();
                objCommDeliveryReport.Connection = currConn;

                objCommDeliveryReport.CommandText = sqlText;
                objCommDeliveryReport.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (vat7No == "")
                {
                    if (!objCommDeliveryReport.Parameters.Contains("@VAT7No"))
                    { objCommDeliveryReport.Parameters.AddWithValue("@VAT7No", System.DBNull.Value); }
                    else { objCommDeliveryReport.Parameters["@VAT7No"].Value = System.DBNull.Value; }
                }
                else
                {
                    if (!objCommDeliveryReport.Parameters.Contains("@VAT7No"))
                    { objCommDeliveryReport.Parameters.AddWithValue("@VAT7No", vat7No); }
                    else { objCommDeliveryReport.Parameters["@VAT7No"].Value = vat7No; }
                }



                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDeliveryReport);
                dataAdapter.Fill(dsVat7);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dsVat7;
        }
        public DataSet TollRegister(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveRaw')
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Purchase',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 
 

---- end purchase---
---- start Issue---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('PackageProduction')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Tender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) subtotal ,isnull(UOMQty,0)UOMQty ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(ID.SubTotal,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) 
isnull(UOMQty,0)*isnull(CostPrice,0) 
,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTrading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(CostPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) ,
isnull(UOMQty,0)*isnull(CostPrice,0) ,
isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InternalIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ReceiveReturn')


-- Add by ruba for internalsale,Service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,

-SubTotal,
-case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end,'0',-SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

--Add by Ruba for InputService(Purchase)
--Purchase CN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseCN'))

--Purchase DN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseDN','PurchaseReturn'))
--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceive','TollReceive-WIP','TollReceiveRaw') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  
 UNION ALL (
	
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) 
-- UNION ALL 
--(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
---isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
--and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType NOT IN('IssueReturn','ReceiveReturn') 
AND ItemNo = @itemNo  AND (UOMQty>0))  
 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   

UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y'))    

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end),0) IssueQuantity,-isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL (
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16


                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet TollRegisterRaw(string ItemNo, string UserName, string StartDate, string EndDate, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='46';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-04-01';
	--SET @EndDate='2014-04-27';

 
declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;


CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')
 
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveReturn')
 

--insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
--select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
--@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
--id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
--from IssueDetails id 
--  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
--and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
--AND id.TransactionType IN('TollReceiveReturn') 
 

---- end purchase---
---- start Issue---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')
 

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')
 

 insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('OtherToll')
 


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',@ItemNo,
SubTotal,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),'0',SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('TollIssue')  

--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

 

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.ReceiveDateTime,id.ReceiveDateTime,id.ReceiveNo,'Purchase',isnull(pih.benumber ,id.ReceiveNo)ReceiveNo,
@ItemNo, isnull(id.subtotal,0) ,isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'TollReceive',id.ReceiveDateTime
from ReceiveDetails id 
left outer join PurchaseInvoiceHeaders pih on id.receiveNo=pih.PurchaseInvoiceNo 

  where id.ReceiveDateTime >=@StartDate and id.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceive') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)

 

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo
, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('TollReceive') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceive','TollReceive-WIP','TollReceiveRaw') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  

 UNION ALL (
		SELECT @itemNo ItemNo, -isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('TollReceiveReturn') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  

 
 
 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType  IN('TollReceiveReturn','XX') 
AND ItemNo = @itemNo  AND (UOMQty>0))  

UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType  IN('TollReceiveRaw','TollFinishReceive','TollReceive','OtherToll') 
AND ItemNo = @itemNo  AND (UOMQty>0))  
 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('TollIssue')  
     AND ItemNo = @itemNo  AND (UOMQty>0) )   
 
	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('XX')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.Quantity,#VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16
 
 
 
 

                
                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet VAT16AttachToll(string ItemNo, string UserName, string StartDate, string EndDate, string post1,
                               string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT16");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                string top;

                #region SQL Statement

                sqlText = "";

                #region Backup

                sqlText += @"
                          
	
                          
	--DECLARE @StartDate DATETIME;
	--DECLARE @EndDate DATETIME;
	--DECLARE @post1 VARCHAR(200);
	--DECLARE @post2 VARCHAR(200);
	--DECLARE @ItemNo VARCHAR(200);
    
	--SET @Itemno='36';
	--SET @post1='Y';
	--SET @post2='N';
	--SET @StartDate='2014-12-01';
	--SET @EndDate='2014-12-07';

declare @Present DECIMAL(25, 9);
DECLARE @OpeningDate DATETIME;

CREATE TABLE #VAT_16(	SerialNo [varchar] (2) NULL,
[ItemNo] [varchar](200) NULL,	[StartDateTime] [datetime] NULL,
[StartingQuantity] [decimal](25, 9) NULL,	[StartingAmount] [decimal](25, 9) NULL,
[VendorID] [varchar](200) NULL,	[SD] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[UnitCost] [decimal](25, 9) NULL,	[TransID] [varchar](200) NULL,
[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,[InvoiceDateTime] [datetime] NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL)

CREATE TABLE #VATTemp_16([SerialNo] [varchar] (2) NULL,[Dailydate] [datetime] NULL,[InvoiceDateTime] [datetime] NULL,
[TransID] [varchar](200) NULL,	[TransType] [varchar](200) NULL,[BENumber] [varchar](200) NULL,
[ItemNo] [varchar](200) NULL,	[UnitCost] [decimal](25, 9) NULL,
[Quantity] [decimal](25, 9) NULL,	[VATRate] [decimal](25, 9) NULL,	[SD] [decimal](25, 9) NULL,[Remarks] [varchar](200) NULL,[CreateDateTime] [datetime] NULL) 

---- start purchase---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDateTime,pd.ReceiveDateTime,pd.ReceiveNo,'Purchase',pd.ReceiveNo,
@ItemNo, isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,pd.TransactionType,pd.ReceiveDateTime
from ReceiveDetails PD where pd.ReceiveDateTime >=@StartDate and pd.ReceiveDateTime < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,'Purchase',pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('other')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNS')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo AND (UOMQty>0)AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('ServiceNSImport')


insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber
,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0)),
isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,pd.ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TradingImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceive-WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,
(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,(isnull(pd.AssessableValue,0)+ isnull(pd.CDAmount,0)+ isnull(pd.RDAmount,0)+ isnull(pd.TVBAmount,0)+ isnull(pd.TVAAmount,0)+ isnull(pd.ATVAmount,0)+isnull(pd.OthersAmount,0))
,isnull(UOMQty,0),pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('Import')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,isnull(subtotal,0),isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,PD.TransactionType,ReceiveDate
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0),-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 

AND (pd.Post =@post1 or pd.Post= @post2)
AND pd.TransactionType IN('PurchaseCN')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Purchase'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND PD.TransactionType IN('PurchaseDN')

--Add for TollReceive
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Purchase',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

-- Add by ruba for internalsale,service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Purchase','-',@ItemNo,
 
SubTotal,
isnull(NULLIF(UOMQty,0),isnull(Quantity,0) ),0,SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

----Transfer Raw1 to Raw2(Receive Raw2)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'A1',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Purchase','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.ItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)


---- end purchase---
---- start Issue---

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Other')

-- Only for toll register
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,'Issue',IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0) AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceiveRaw')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollFinishReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('PackageProduction')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Tender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) subtotal ,isnull(UOMQty,0)UOMQty ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('WIP')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollReceive')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(ID.SubTotal,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo  AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InputServiceImport')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) 
isnull(UOMQty,0)*isnull(CostPrice,0) 
,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Trading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTrading')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportTradingTender')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(CostPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('Service')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ExportService')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,
--isnull(UOMQty,0)*isnull(uomPrice,0) ,
isnull(UOMQty,0)*isnull(CostPrice,0) ,
isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('InternalIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,ID.VATAmount,ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('TollIssue')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime  >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('IssueReturn')

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',ID.IssueDateTime,ID.IssueDateTime,ID.IssueNo,'Issue','-'
,@ItemNo,-isnull(UOMQty,0)*isnull(uomPrice,0) ,-isnull(UOMQty,0) ,-ID.VATAmount,-ID.SDAmount,id.TransactionType,IssueDateTime
from IssueDetails ID
where ID.IssueDateTime >=@StartDate  and ID.IssueDateTime < DATEADD(d,1, @EndDate)  
and ID.ItemNo=@ItemNo AND (UOMQty>0)AND (ID.Post =@post1 or ID.Post= @post2)
AND ID.TransactionType IN ('ReceiveReturn')


-- Add by ruba for internalsale,Service and trading(20140316)
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B', InvoiceDateTime,InvoiceDateTime,SalesInvoiceNo,'Issue','-',@ItemNo,
 
-SubTotal,
-case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end,'0',-SDAmount,TransactionType,CreatedOn
from SalesInvoiceDetails
where InvoiceDateTime >= @StartDate and InvoiceDateTime < DATEADD(d,1,@EndDate) and ItemNo=@ItemNo 
AND (UOMQty>0) AND (Post =@post1 or Post= @post2)
AND TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')

--Add by Ruba for InputService(Purchase)
--Purchase CN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost    
,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue',pd.BENumber,
@ItemNo,isnull(subtotal,0) ,isnull(UOMQty,0) ,
pd.VATAmount,pd.SDAmount,TransactionType,CreatedOn
from PurchaseInvoiceDetails PD where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo 
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseCN'))

--Purchase DN
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',pd.ReceiveDate,pd.InvoiceDateTime,pd.PurchaseInvoiceNo,'Issue'
,pd.BENumber,@ItemNo,-isnull(subtotal,0) ,-isnull(UOMQty,0) ,
-pd.VATAmount,-pd.SDAmount,PD.TransactionType,CreatedOn
from PurchaseInvoiceDetails PD 
where pd.ReceiveDate  >=@StartDate  and pd.ReceiveDate < DATEADD(d,1, @EndDate) 
and pd.ItemNo=@ItemNo
--AND (UOMQty>0)
AND (pd.Post =@post1 or pd.Post= @post2)
AND(pd.ReturnTransactionType IN('InputService') and pd.TransactionType IN('PurchaseDN','PurchaseReturn'))
--
--For TollReceive

insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',id.IssueDateTime,id.IssueDateTime,id.IssueNo,'Issue',id.IssueNo,
@ItemNo, -isnull(id.subtotal,0) ,-isnull(id.UOMQty,0) ,
id.VATAmount,id.SDAmount,'ReceiveReturn',id.IssueDateTime
from IssueDetails id 
  where id.IssueDateTime >=@StartDate and id.IssueDateTime < DATEADD(d,1, @EndDate) 
and id.ItemNo=@ItemNo AND (UOMQty>0)AND (id.Post =@post1 or id.Post= @post2)
AND id.TransactionType IN('TollReceiveReturn') 

----For Transfered Raw
insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select 'B',TD.TransferDateTime,TD.TransferDateTime,TD.TransferId,'Issue','-'
,@ItemNo,isnull(UOMQty,0)*isnull(uomPrice,0) ,isnull(UOMQty,0) ,0,0,TD.TransactionType,TransferDateTime
from TransferRawDetails TD
where TD.TransferDateTime  >=@StartDate  and TD.TransferDateTime < DATEADD(d,1, @EndDate)  
and TD.TransFromItemNo = @ItemNo AND (UOMQty>0) AND (TD.Post =@post1 or TD.Post= @post2)



insert into #VATTemp_16(SerialNo,Dailydate,InvoiceDateTime,TransID,TransType,BENumber,ItemNo,UnitCost,
Quantity,VATRate,SD,Remarks,CreateDateTime)
select  'B',DisposeDetails.DisposeDate,DisposeDetails.DisposeDate
,DisposeDetails.DisposeNumber,'Issue','-',
@ItemNo,isnull((isnull(Quantity,0)+isnull(QuantityImport,0))*isnull(RealPrice,0),0),isnull(isnull(Quantity,0)+isnull(QuantityImport,0),0),0,0,
sih.TransactionType,DisposeDetails.DisposeDate
from DisposeDetails  LEFT OUTER JOIN
DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber
where DisposeDetails.DisposeDate >=@StartDate  and DisposeDetails.DisposeDate < DATEADD(d,1,@EndDate)
and ItemNo=@ItemNo 
AND (Quantity+QuantityImport>0)
AND (DisposeDetails.Post =@post1 or DisposeDetails.Post= @post2)
AND sih.TransactionType IN('VAT26') and sih.FromStock in ('Y')

select @OpeningDate = p.OpeningDate from Products p
WHERE ItemNo=@ItemNo

IF(@OpeningDate<@StartDate)
set @OpeningDate=@StartDate

insert into #VATTemp_16(SerialNo,Dailydate,TransID,VATRate,SD,Remarks,TransType,ItemNo,Quantity,UnitCost,InvoiceDateTime,BENumber)
 		    
SELECT distinct 'A' SerialNo,@OpeningDate Dailydate,'0' TransID,0 VATRate,0 SD,'Opening' remarks,'Opening' TransType,a.ItemNo, SUM(a.Quantity)Quantity,sum(a.Amount)UnitCost,@OpeningDate InvoiceDateTime,'-' BENumber
	FROM (
		(SELECT @itemNo ItemNo, isnull(OpeningBalance,0) Quantity, isnull(p.OpeningTotalCost,0) Amount  
FROM Products p  WHERE p.ItemNo = @itemNo )  
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM ReceiveDetails WHERE Post='Y' 
and TransactionType in('WIP') 
AND ReceiveDateTime < @StartDate      AND ItemNo = @itemNo
 )   
UNION ALL (
		SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('other','Service','ServiceNS','InputService','Trading','TollReceive','TollReceive-WIP','TollReceiveRaw','PurchaseCN') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 )  
 UNION ALL (
	
	SELECT @itemNo ItemNo, isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
	isnull(sum(isnull((isnull(AssessableValue,0)+ isnull(CDAmount,0)+ isnull(RDAmount,0)+ isnull(TVBAmount,0)+ isnull(TVAAmount,0)+ isnull(ATVAmount,0)+isnull(OthersAmount,0)),0)),0)SubTotal 
FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('Import','InputServiceImport','ServiceImport','ServiceNSImport','TradingImport') 

AND ReceiveDate < @StartDate      AND ItemNo = @itemNo
 ) 
 UNION ALL 
(	SELECT  @itemNo ItemNo,-isnull(sum(isnull(UOMQty,isnull(Quantity,0))),0)PurchaseQuantity,
-isnull(sum(isnull(SubTotal,0)),0)SubTotal     FROM PurchaseInvoiceDetails WHERE Post='Y' 
and TransactionType in('PurchaseReturn','PurchaseDN')  AND ReceiveDate< @StartDate     AND ItemNo = @itemNo ) 
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) IssueQuantity,-isnull(sum(isnull(SubTotal,0)),0)  
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate     
and TransactionType NOT IN('IssueReturn','ReceiveReturn') 
AND ItemNo = @itemNo  AND (UOMQty>0))  
 --Transfer to Raw
 UNION ALL (
	SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) TransferQuantity,isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND ItemNo = @itemNo  AND (UOMQty>0)   
 ) 

UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum(isnull(SubTotal,0)),0)
FROM IssueDetails WHERE Post='Y'   AND IssueDateTime< @StartDate  
   and TransactionType IN('IssueReturn','ReceiveReturn')  AND ItemNo = @itemNo  AND (UOMQty>0))   

UNION ALL 
(select @itemNo ItemNo,-isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)Qty, 
isnull(sum(isnull(Quantity,0)+isnull(QuantityImport,0)),0)*isnull(sum(isnull(RealPrice,0)),0)  
from DisposeDetails  LEFT OUTER JOIN   DisposeHeaders sih ON DisposeDetails.DisposeNumber=sih.DisposeNumber 
 where ItemNo=@itemNo   
AND DisposeDetails.DisposeDate< @StartDate      AND (DisposeDetails.Post ='Y')      and sih.FromStock in ('Y'))    

 -- Add by ruba for internalsale and trading and Service (20140316)
UNION ALL 
(SELECT @itemNo ItemNo,-isnull(sum(case when isnull(ValueOnly,'N')='Y' then 0 else  UOMQty end),0) IssueQuantity,-isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Credit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0) )   

	 UNION ALL 
(SELECT @itemNo ItemNo,isnull(sum(UOMQty),0) IssueQuantity,isnull(sum( SubTotal),0)
FROM SalesInvoiceDetails WHERE Post='Y'   AND InvoiceDateTime< @StartDate  
   and TransactionType IN('Debit') AND ReturnTransactionType IN ('InternalIssue','Trading','Service')
     AND ItemNo = @itemNo  AND (UOMQty>0)) 
	 UNION ALL (
	SELECT @itemNo ItemNo,-isnull(sum(UOMQty),0) TransferQuantity,-isnull(sum(isnull(SubTotal,0)),0)SubTotal
FROM TransferRawDetails WHERE Post='Y'   AND TransferDateTime< @StartDate  
   AND TransFromItemNo = @itemNo  AND (UOMQty>0)   
 ) 

	
) AS a GROUP BY a.ItemNo


insert into #VAT_16(SerialNo,ItemNo,StartDateTime,InvoiceDateTime,StartingQuantity,StartingAmount,
VendorID,Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime)
select SerialNo,@ItemNo,Dailydate,InvoiceDateTime,0,0,0,
Quantity,UnitCost,TransID,TransType,VATRate,SD,BENumber,Remarks,CreateDateTime
from #VATTemp_16
order by dailydate,SerialNo

update #VAT_16 set 
VendorID=PurchaseInvoiceHeaders.VendorID
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID
and #VAT_16.TransType='Purchase'

update #VAT_16 set 
StartingQuantity=0,
StartingAmount=0
from PurchaseInvoiceHeaders
where PurchaseInvoiceHeaders.PurchaseInvoiceNo=#VAT_16.TransID 
and PurchaseInvoiceHeaders.TransactionType IN('ServiceNS')
AND (PurchaseInvoiceHeaders.Post =@post1 or PurchaseInvoiceHeaders.Post= @post2)
and #VAT_16.TransType='Purchase'

select #VAT_16.SerialNo,convert (varchar,#VAT_16.StartDateTime,120)StartDateTime,
#VAT_16.StartingQuantity,#VAT_16.StartingAmount
,TransID,#VAT_16.TransType,
isnull(v.VendorName,'-')VendorName,isnull(v.Address1,'-')Address1,
isnull(v.Address2,'-')Address2,isnull(v.Address3,'-')Address3,
isnull(v.VATRegistrationNo,'-')VATRegistrationNo,
p.ProductName,#VAT_16.Quantity,#VAT_16.VATRate,#VAT_16.SD,#VAT_16.UnitCost,p.HSCodeNo,#VAT_16.BENumber
,convert (varchar,#VAT_16.InvoiceDateTime,120)InvoiceDateTime,#VAT_16.Remarks,
#VAT_16.CreateDateTime
from #VAT_16 left outer join
Vendors as V on #VAT_16.VendorID=v.VendorID left outer join 
Products P on #VAT_16.ItemNo=p.ItemNo
order by CreateDateTime ASC,#VAT_16.SerialNo ASC 


DROP TABLE #VAT_16
DROP TABLE #VATTemp_16

                ";

                #endregion



                top = "Go";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT16 = new SqlCommand();
                objCommVAT16.Connection = currConn;

                objCommVAT16.CommandText = sqlText;
                objCommVAT16.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                //objCommVAT16.CommandText = sqlText;
                //objCommVAT16.CommandType = CommandType.Text;

                if (!objCommVAT16.Parameters.Contains("@ItemNo"))
                {
                    objCommVAT16.Parameters.AddWithValue("@ItemNo", ItemNo);
                }
                else
                {
                    objCommVAT16.Parameters["@ItemNo"].Value = ItemNo;
                }
                if (!objCommVAT16.Parameters.Contains("@UserName"))
                {
                    objCommVAT16.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT16.Parameters["@UserName"].Value = UserName;
                }
                if (StartDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@StartDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@StartDate", StartDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@StartDate"].Value = StartDate;
                    }
                } // Common Filed
                if (EndDate == "")
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", System.DBNull.Value);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = System.DBNull.Value;
                    }
                }
                else
                {
                    if (!objCommVAT16.Parameters.Contains("@EndDate"))
                    {
                        objCommVAT16.Parameters.AddWithValue("@EndDate", EndDate);
                    }
                    else
                    {
                        objCommVAT16.Parameters["@EndDate"].Value = EndDate;
                    }
                }

                if (!objCommVAT16.Parameters.Contains("@post1"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT16.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT16.Parameters.Contains("@post2"))
                {
                    objCommVAT16.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT16.Parameters["@post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT16);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet PurchaseReturnNew(string PurchaseInvoiceNo, string post1, string post2)
        {

            #region Variables

            SqlConnection currConn = null;
            //int transResult = 0;
            //int countId = 0;
            string sqlText = "";

            DataSet dataSet = new DataSet("ReportDebitNote");

            #endregion

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region sql statement

                sqlText =
                    @"----DECLARE @post1 VARCHAR(2);
----DECLARE @post2 VARCHAR(2);
----DECLARE @SalesInvoiceNo VARCHAR(20);

----SET @SalesInvoiceNo='PRN-0001/0114';
----SET @post1='Y';
----SET @post2='Y';


select Debit.POLineNo InvoiceLineNo ,Debit.PurchaseInvoiceNo salesInvoiceNo,convert (varchar,Debit.InvoiceDateTime,120)InvoiceDateTime,p.productName,
                                    (Debit.CostPrice*Debit.Quantity)SubCost,Debit.SDAmount,Debit.VATAmount
                                    ,New.SDAmount NSDAmount,New.VATAmount NVATAmount,DebitSum.SDAmount DSSDAmount,DebitSum.VATAmount DSVATAmount
                                    ,Debit.PurchaseReturnId PrevioussalesInvoiceNo,
									DebitH.VendorID CustomerID, ' ' VehicleID,
                                    convert (varchar,sih.InvoiceDateTime,120) NInvoiceDateTime
                                    ,Debit.quantity,Debit.uom

                                    ,c.Address1 DeliveryAddress1,c.Address2 DeliveryAddress2,c.Address3 DeliveryAddress3,
                                    c.VendorName CustomerName,c.VATRegistrationNo,'N/A' VehicleType, 'N/A' VehicleNo,DebitH.comments

                                    from PurchaseInvoiceDetails AS Debit left outer join
                                    PurchaseInvoiceHeaders DebitH on Debit.PurchaseInvoiceNo=DebitH.PurchaseInvoiceNo left outer join

                                     Vendors C on DebitH.VendorID=c.VendorID 
									 --left outer join
          --                           Vehicles V on DebitH.VehicleID=v.VehicleID 
                                    left outer join PurchaseInvoiceHeaders SIH on Debit.PurchaseReturnId=sih.PurchaseInvoiceNo
                                    left outer join
                                    (select distinct PurchaseInvoiceNo salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from PurchaseInvoiceDetails
                                    where PurchaseInvoiceNo=(select distinct PurchaseReturnId from PurchaseInvoiceDetails
                                    where  PurchaseInvoiceNo=@SalesInvoiceNo)
                                    group by PurchaseInvoiceNo
                                    ) New on Debit.PurchaseReturnId=New.salesInvoiceNo left outer join
                                    (select PurchaseInvoiceNo salesInvoiceNo,sum(SDAmount)SDAmount,sum(VATAmount)VATAmount
                                    from PurchaseInvoiceDetails
                                    where PurchaseInvoiceNo=@SalesInvoiceNo
                                    group by PurchaseInvoiceNo
                                    )DebitSum on debit.PurchaseInvoiceNo=DebitSum.salesInvoiceNo left outer join products P on
                                    Debit.itemno=p.itemno
                                    where 
                                     DebitH.TransactionType='PurchaseReturn'
                                    and Debit.PurchaseInvoiceNo=@SalesInvoiceNo
                                    and Debit.Quantity>0
AND (debit.Post =@Post1 or debit.Post= @Post2)
                                    ";
                //AND debit.post='Y'
                SqlCommand objCommDebitNote = new SqlCommand();
                objCommDebitNote.Connection = currConn;
                objCommDebitNote.CommandText = sqlText;
                objCommDebitNote.CommandType = CommandType.Text;

                if (!objCommDebitNote.Parameters.Contains("@SalesInvoiceNo"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@SalesInvoiceNo", PurchaseInvoiceNo);
                }
                else
                {
                    objCommDebitNote.Parameters["@SalesInvoiceNo"].Value = PurchaseInvoiceNo;
                }

                if (!objCommDebitNote.Parameters.Contains("@post1"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommDebitNote.Parameters["@post1"].Value = post1;
                }

                if (!objCommDebitNote.Parameters.Contains("@post2"))
                {
                    objCommDebitNote.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommDebitNote.Parameters["@post2"].Value = post2;
                }

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommDebitNote);
                dataAdapter.Fill(dataSet);

                #endregion
            }
            #region catch

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }

            #endregion
            #region finally

            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet Current_AC_VAT18(string StartDate, string EndDate, string post1, string post2)
        {

            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Report Current_AC_VAT18");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement
                //Show only Vat value for type='VAT' and never show type='Tarrif' amount.
                sqlText = @"
                           

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2014-06-01'
--SET @EndDate='2015-07-30'
--SET @post1='Y';
--SET @post2='N';


 declare @cnt int;
declare @UnitCount int;
declare @PVat [decimal](18, 2);

CREATE TABLE #VAT_18_Management(	[Sl] [decimal](25, 9) NULL,	[PeriodName] [varchar](200) NULL,
[PeriodStart] [datetime] NULL,	[PeriodEnd] [datetime] NULL,	[Opening] [decimal](25, 9) NULL,
[Purchase_Import] [decimal](25, 9) NULL,[Purchase_Local] [decimal](25, 9) NULL,	
[Deposit] [decimal](25, 9) NULL,	[DDB] [decimal](25, 9) NULL,	[Sale] [decimal](25, 9) NULL ,
[Credit] [decimal](25, 9) NULL)

                            insert into #VAT_18_Management(Sl,PeriodName,PeriodStart,PeriodEnd,Opening,Purchase_Import,Purchase_Local,Deposit,DDB,Sale,Credit)
                            select ROW_NUMBER() OVER(ORDER by PeriodStart),PeriodName,PeriodStart,PeriodEnd,0,0,0,0,0,0,0 from fiscalyear
                            where PeriodStart >=@StartDate
                            and PeriodEnd <=@EndDate
                            order by PeriodStart

							set @cnt=1
                            set @UnitCount=(select max (sl) from #VAT_18_Management)
                            while @cnt<=@UnitCount
                            begin
							
                            select @PVat= isnull(sum(DepositAmount),0)    
                             from  Deposits WHERE DepositDateTime < =	(select  DATEADD(d,1,   PeriodStart) from #VAT_18_Management where sl=@cnt ) 
							AND Deposits.TransactionType  IN('Treasury-Opening')
							 AND (Post =@post1 or Post= @post2)
                            select @PVat= @PVat+isnull(sum(DepositAmount),0)    
                             from  Deposits WHERE DepositDateTime < 	(select PeriodStart from #VAT_18_Management where sl=@cnt )
							 AND Deposits.TransactionType  IN('Treasury')
							 AND (Post =@post1 or Post= @post2)
							select @PVat= @PVat-isnull(sum(DepositAmount) ,0)  
                            from  Deposits where DepositDateTime < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							AND Deposits.TransactionType  IN('Treasury-Opening-Credit','Treasury-Credit')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(VATAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							AND Type in('Local-VAT')
							AND TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS','TollReceive-WIP','PurchaseCN')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(VATAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							and Type in('Import-VAT')
							AND TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(RebateAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							and Type in('Local-VAT','Import-VAT')
							AND TransactionType IN('InputService','InputServiceImport')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(VATAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							and Type in('Local-VAT')
							AND TransactionType IN('PurchaseReturn','PurchaseDN')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(ATVAmount) ,0)    
                            from  PurchaseInvoiceDetails where ReceiveDate < (select PeriodStart from #VAT_18_Management where sl=@cnt )
							and Type in('Import-VAT')
							AND TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(VATAmount),0)    
                            from  SalesInvoiceDetails where invoicedatetime<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND TransactionType IN('Other','ServiceStock','Service','Trading','TradingTender','Tender','Debit','InternalIssue','TollFinishIssue','PackageSale','PackageProduction','ServiceNS','Wastage')
   							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(CurrencyValue*VATRate/100),0)   
                            from  SalesInvoiceDetails where invoicedatetime<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(VATAmount),0)   
                            from  SalesInvoiceDetails where invoicedatetime<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND TransactionType IN('Credit')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0)),0) 
                            from  DisposeHeaders where DisposeDate<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND TransactionType IN('VAT26','VAT27')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat-isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys where AdjDate<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND AdjType IN('Credit Payable','Shortage Rebatable')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys where AdjDate<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                            AND AdjType IN('Rebatable')
							AND (Post =@post1 or Post= @post2)

							select @PVat= @PVat+ isnull(sum(TotalDDBack),0)
                            from  DutyDrawBackHeader where DDBackDate<  (select PeriodStart from #VAT_18_Management where sl=@cnt )
                          AND (Post =@post1 or Post= @post2)

						   update #VAT_18_Management set Opening=@PVat where Sl=@cnt

                            update  #VAT_18_Management set 
                            Deposit =
                            (select   isnull(sum(DepositAmount),0)
                            from  Deposits    where DepositDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt) 
                            and DepositDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and TransactionType IN('Treasury') AND (Post =@post1 or Post= @post2)
							) where sl=@cnt
							update  #VAT_18_Management set 
                            Deposit = Deposit-
                            (select   isnull(sum(DepositAmount),0)
                            from  Deposits    where DepositDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt) 
                            and DepositDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and TransactionType IN('Treasury-Credit') AND (Post =@post1 or Post= @post2)
							) where sl=@cnt


							update  #VAT_18_Management set Purchase_Import =
                            ( select  isnull(sum(VATAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and Type in('Import-VAT')
							AND TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 
							
							update  #VAT_18_Management set Purchase_Import = Purchase_Import+
                            ( select  isnull(sum(RebateAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('InputServiceImport')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 

							update  #VAT_18_Management set Purchase_Import = Purchase_Import+
                            ( select  isnull(sum(ATVAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and Type in('Import-VAT')
							AND TransactionType IN('InputServiceImport','Import','TradingImport','ServiceImport','ServiceNSImport')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 
							
							update  #VAT_18_Management set Purchase_Local =
                            ( select  isnull(sum(VATAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and Type in('Local-VAT')
							AND TransactionType IN('Other','Service','PurchaseCN','Trading','TollReceive','TollReceive-WIP')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 

							update  #VAT_18_Management set Purchase_Local= Purchase_Local +
                            ( select  isnull(sum(RebateAmount),0)
                            from  PurchaseInvoiceDetails
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('InputService')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 

							update  #VAT_18_Management set Purchase_Local = Purchase_Local +
                            ( select  isnull(sum(VATAmount),0)
                            from  SalesInvoiceDetails
                            where invoicedatetime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and invoicedatetime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('Credit')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 


							update  #VAT_18_Management set DDB = 
                            ( select  isnull(sum(TotalDDBack),0)
                            from  DutyDrawBackHeader
                            where DDBackDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and DDBackDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND (Post =@post1 or Post= @post2)) where sl=@cnt
							
							update  #VAT_18_Management set DDB = DDB +
                            ( select  isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys
                            where AdjDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and AdjDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND AdjType='Rebatable'
							AND (Post =@post1 or Post= @post2)) where sl=@cnt  

							update  #VAT_18_Management set DDB = DDB -
                            ( select  isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys
                            where AdjDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and AdjDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND AdjType='Shortage Rebatable'
							AND (Post =@post1 or Post= @post2)) where sl=@cnt 



                            update  #VAT_18_Management set Sale =
                            (select isnull(sum(VATAmount),0)
                            from  SalesInvoiceDetails 
                            where InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('Other','Wastage','Service','ServiceNS','Trading','TradingTender',
							'Tender','InternalIssue','Debit','TollFinishIssue','ServiceStock','PackageSale','PackageProduction')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt
							 

							update  #VAT_18_Management set Sale = Sale +
                            (select isnull(sum(CurrencyValue*VATRate/100),0)
                            from  SalesInvoiceDetails 
                            where InvoiceDateTime >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and InvoiceDateTime < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt

							
							Declare @countVAT26 int
							Set @countVAT26 =
							(select Count(isnull(AppVATAmount,0)) from DisposeHeaders 
									where DisposeDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
									and DisposeDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
									AND TransactionType IN('VAT26')
									AND (Post =@post1 or Post= @post2))

							if(@countVAT26>0)
							begin

							update  #VAT_18_Management set Sale = Sale +
                            (select isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0)
                            from  DisposeHeaders 
                            where DisposeDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and DisposeDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('VAT26')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt
							end

							Declare @countVAT27 int
							Set @countVAT27 =
							(select Count(isnull(AppVATAmount,0)) from DisposeHeaders 
									where DisposeDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
									and DisposeDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
									AND TransactionType IN('VAT27')
									AND (Post =@post1 or Post= @post2))								
											
										if(@countVAT27>0)
							begin

							update  #VAT_18_Management set Sale = Sale +
                            (select isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0)
                            from  DisposeHeaders 
                            where DisposeDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and DisposeDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND TransactionType IN('VAT27')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt
							end

							update  #VAT_18_Management set Sale = Sale +
                            (select isnull(sum(VATAmount),0)
                            from  PurchaseInvoiceDetails 
                            where ReceiveDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and ReceiveDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							and Type in('Local-VAT')
							AND TransactionType IN('PurchaseReturn')
							AND (Post =@post1 or Post= @post2)) where sl=@cnt

							update  #VAT_18_Management set Credit =   
                            (select isnull(sum(AdjAmount),0)
                            from  AdjustmentHistorys 
                            where AdjDate >=(select PeriodStart from #VAT_18_Management where sl=@cnt)
                            and AdjDate < DATEADD(d,1, (select PeriodEnd from #VAT_18_Management where sl=@cnt))
							AND AdjType='Credit Payable'
							AND (Post =@post1 or Post= @post2)) where sl=@cnt

							set @cnt=@cnt+1
                            End

                            select PeriodName,Opening,Purchase_Import,Purchase_Local,Deposit,DDB,Sale,Credit from #VAT_18_Management 
                            DROP TABLE #VAT_18_Management
							
                            ";

                #endregion

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }
                if (!objCommVAT18.Parameters.Contains("@Post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@Post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@Post1"].Value = post1;
                }
                if (!objCommVAT18.Parameters.Contains("@Post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@Post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@Post2"].Value = post2;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet SerialStockStatus(string ItemNo, string CategoryID, string ProductType, string StartDate, string ToDate, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("Serial Stock Status Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = @"
                            SELECT  
                         t.ItemNo,
                isnull(t.Heading1,'N/A') Heading1,
                isnull(t.Heading2,'N/A') Heading2,
                isnull(t.IsPurchase,'N/A') IsPurchase,
                isnull(t.IsReceive,'N/A') IsReceive,
                isnull(t.Quantity,0) Quantity,
                isnull(t.UnitPrice,0) Value,
                --CASE WHEN isnull(t.UnitPrice,0)= 0 THEN isnull(pid.UOMPrice,0) ELSE ISNULL(t.UnitPrice,0) END Value,
                isnull(p.ProductCode,'N/A') ProductCode,
                isnull(p.ProductName,'N/A') ProductName,
                isnull(pc.CategoryName,'N/A') CategoryName

                from Trackings t 
                --Left Outer JOIN PurchaseInvoiceDetails pid on pid.PurchaseInvoiceNo=t.PurchaseInvoiceNo
                --Left Outer JOIN Products p on p.ItemNo=t.ItemNo
                --Left Outer JOIN ProductCategories pc on pc.CategoryID=p.CategoryID
                --where  (t.Post =@post1 or t.Post= @post2)
                --AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null)
               
				";
                #region ProductType

                if (ProductType == "Finish")
                {
                    sqlText += @" Left Outer JOIN Products p on p.ItemNo=t.FinishItemNo 
                                  Left Outer JOIN ProductCategories pc on pc.CategoryID=p.CategoryID
                                  where  (t.Post =@post1 or t.Post= @post2)
                                  AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null) ";

                    if (!string.IsNullOrWhiteSpace(ItemNo))
                    {
                        sqlText += " and t.FinishItemNo='" + ItemNo + "'";

                    }
                    sqlText += "AND  t.IsReceive='Y' AND t.IsSale='N'";

                }
                else
                {
                    sqlText += @" Left Outer JOIN Products p on p.ItemNo=t.ItemNo 
                                  Left Outer JOIN ProductCategories pc on pc.CategoryID=p.CategoryID
                                  where  (t.Post =@post1 or t.Post= @post2)
                                  AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null) ";

                    if (!string.IsNullOrWhiteSpace(ItemNo))
                    {
                        sqlText += " and t.ItemNo='" + ItemNo + "'";

                    }
                    if (!string.IsNullOrEmpty(ProductType))
                    {
                        sqlText += " and pc.IsRaw='" + ProductType + "'";
                    }
                    sqlText += " AND t.IsReceive='N'";
                }

                #endregion

                //if (CategoryID != "")
                //{
                //    sqlText += " and p.CategoryID='" + CategoryID + "'";
                //}
                if (!string.IsNullOrEmpty(StartDate) && !string.IsNullOrEmpty(ToDate))
                {
                    sqlText += " AND (t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                    sqlText += " AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null AND t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                }
                //if (ProductType != "")
                //{
                //    if (ProductType=="Finish")
                //    {
                //        sqlText += "AND  t.IsReceive='Y' AND t.IsSale='N'";
                //    }
                //    else
                //    {
                //        sqlText += " and pc.IsRaw='" + ProductType + "'";
                //        sqlText += " AND t.IsReceive='N'";

                //    }

                //}
                //if (string.IsNullOrEmpty(StartDate) && string.IsNullOrEmpty(ToDate))
                //{
                //    //sqlText += "AND t.IsReceive='N' OR t.ReturnReceive='Y'";
                //}
                //else
                //{
                //    //sqlText += "AND t.IsReceive='N'";
                //    //sqlText += "OR t.ReceiveDate not between @StartDate and DATEADD(d,1, @ToDate)";
                //    //sqlText += " AND (t.IsReceive='N'AND t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                //    sqlText += " AND (t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                //sqlText += " AND (t.ReturnPurchase ='N' or t.ReturnPurchase is Null AND t.LastModifiedON between @StartDate and DATEADD(d,1, @ToDate) )";
                ////sqlText += " OR (t.ReturnReceive ='Y' AND t.ReturnReceiveDate between @StartDate and DATEADD(d,1, @ToDate) )";
                //}

                sqlText += " order by pc.CategoryName";


                #endregion

                #region SQL Command

                SqlCommand objCommSerial = new SqlCommand();
                objCommSerial.Connection = currConn;

                objCommSerial.CommandText = sqlText;
                objCommSerial.CommandType = CommandType.Text;

                #endregion

                #region Parameter


                if (!objCommSerial.Parameters.Contains("@StartDate"))
                {
                    objCommSerial.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommSerial.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommSerial.Parameters.Contains("@ToDate"))
                {
                    objCommSerial.Parameters.AddWithValue("@ToDate", ToDate);
                }
                else
                {
                    objCommSerial.Parameters["@ToDate"].Value = ToDate;
                }
                if (!objCommSerial.Parameters.Contains("@Post1"))
                {
                    objCommSerial.Parameters.AddWithValue("@Post1", post1);
                }
                else
                {
                    objCommSerial.Parameters["@Post1"].Value = post1;
                }
                if (!objCommSerial.Parameters.Contains("@Post2"))
                {
                    objCommSerial.Parameters.AddWithValue("@Post2", post2);
                }
                else
                {
                    objCommSerial.Parameters["@Post2"].Value = post2;
                }

                #endregion Parameter


                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommSerial);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet PurchaseWithLCInfo(string PurchaseInvoiceNo, string LCDateFrom, string LCDateTo,
                                 string VendorId, string ItemNo, string VendorGroupId, string LCNo, string Post
                               )
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            string purchaseInvoiceNo = PurchaseInvoiceNo;
            string lcDateFrom = LCDateFrom;
            string lcDateTo = LCDateTo;
            string vendorId = VendorId;
            string itemNo = ItemNo;
            string post = Post;


            string lcNo = LCNo;

            DataSet dataSet = new DataSet("Purchase LC Report");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                sqlText = " ";
                sqlText =
                    @"
                            SELECT    
PIH.PurchaseInvoiceNo PurchaseInvoiceNo,
 PIH.InvoiceDateTime InvoiceDateTime,
PIH.VendorID VendorID, 
isnull(V.VendorName,'N/A')VendorName,
PID.ItemNo ItemNo,
isnull(P.ProductName,'N/A')ProductName,
p.ProductCode,
isnull(UOMn,'NA')UOMn,
isnull(UOMQty,0)UOMQty,
isnull(UOMPrice,0)UOMPrice,
convert (varchar,PIH.LCDate,120)  LCDate,
--Case when PIH.LCNumber='-' or PIH.LCNumber='' then '' ELSE convert (varchar,PIH.LCDate,120) END AS LCDate,

PIH.LCNumber LCNo, 
PIH.LandedCost LandedCost, 

  
 PIH.ReceiveDate ReceiveDate,                         
isnull(PID.UOM,'N/A')UOM,
isnull(PID.Quantity,0)Quantity,
isnull(PID.CostPrice,0)CostPrice,
isnull(PID.SD,0)SD,
isnull(PID.SDAmount,0)SDAmount,
isnull(PID.VATRate,0)VATRate,
PID.CnFAmount
,PID.InsuranceAmount
,PID.CDAmount
,PID.RDAmount
,PID.TVBAmount
,PID.TVAAmount
,PID.ATVAmount
,PID.OthersAmount,
CASE 
WHEN PID.TransactionType='InputService' or PID.TransactionType='InputServiceImport' THEN isnull(PID.RebateAmount,0)
ELSE isnull(PID.VATAmount,0) END AS VATAmount, 

CASE 
WHEN PID.TransactionType='Import' or PID.TransactionType='TradingImport' or PID.TransactionType='InputServiceImport'
THEN isnull(PID.AssessableValue,0)
ELSE isnull(PID.SubTotal,0) END AS SubTotal 
  	
					
FROM         PurchaseInvoiceHeaders AS PIH LEFT OUTER JOIN
PurchaseInvoiceDetails AS PID ON PIH.PurchaseInvoiceNo = PID.PurchaseInvoiceNo LEFT OUTER JOIN
Products AS P ON PID.ItemNo = P.ItemNo LEFT OUTER JOIN
Vendors AS V ON PIH.VendorID = V.VendorID  LEFT OUTER JOIN
vendorGroups vg ON v.VendorGroupID=vg.VendorGroupID 
WHERE PID.Quantity>0
AND PIH.LCNumber not in('-','')
";

                #endregion

                #region Parameter

                if (!string.IsNullOrWhiteSpace(purchaseInvoiceNo))
                {
                    sqlText += " and PIH.PurchaseInvoiceNo='" + purchaseInvoiceNo + "' ";
                }
                else if (!string.IsNullOrWhiteSpace(vendorId))
                {
                    sqlText += " and v.VendorID='" + vendorId + "' ";
                }
                else if (!string.IsNullOrWhiteSpace(VendorGroupId))
                {
                    sqlText += " and vg.VendorGroupID='" + VendorGroupId + "' ";
                }
                else if (!string.IsNullOrWhiteSpace(lcNo))
                {
                    sqlText += " and PIH.LCNumber='" + lcNo + "' ";
                }

                if (!string.IsNullOrWhiteSpace(lcDateFrom))
                {
                    sqlText += " and PIH.LCDate >='" + lcDateFrom + "' ";
                }
                if (!string.IsNullOrWhiteSpace(lcDateTo))
                {
                    sqlText += " and PIH.LCDate <dateadd(d,1, '" + lcDateTo + "') ";
                }
                if (!string.IsNullOrWhiteSpace(post))
                {
                    sqlText += " and pid.Post='" + post + "' ";
                }
                sqlText += " ORDER BY PIH.PurchaseInvoiceNo ";

                #endregion Parameter

                #region SQL Command

                SqlCommand objCommPurchaseReport = new SqlCommand();
                objCommPurchaseReport.Connection = currConn;

                objCommPurchaseReport.CommandText = sqlText;
                objCommPurchaseReport.CommandType = CommandType.Text;

                #endregion



                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommPurchaseReport);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }
            }

            #endregion

            return dataSet;
        }

        public DataSet VAT18_Sanofi(string UserName, string StartDate, string EndDate, string post1, string post2)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVAT18");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }


                #endregion open connection and transaction

                string gototop = string.Empty;

                #region statement
                // Delete all tarrife type info.
                sqlText = @"

                

--DECLARE @StartDate DATETIME;
--DECLARE  @EndDate DATETIME;
--DECLARE @post1 VARCHAR(200);
--DECLARE @post2 VARCHAR(200);

--SET @StartDate='2015-03-01'
--SET @EndDate='2015-03-25'
--SET @post1='Y';
--SET @post2='N';

declare @PVat [decimal](25, 9);
create TABLE #VAT_18(Serial [varchar](2) NULL,	[StartDateTime] [datetime] NULL,[ReceiveDate]
 [datetime] NULL,	[TransID] [varchar](200) NULL,	
 [TransType] [varchar](200) NULL,	[StartingVAT] [decimal](25, 9) NULL,
 	[VAT] [decimal](25, 9) NULL,	[Remarks] [varchar](200) NULL,ID [varchar](200) NULL) 

SET @PVat=0;

select @PVat =sum(Amt) FROM(
select 'Z1' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening')
UNION ALL
select 'Z2' Sl ,isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury')
UNION ALL


SELECT  'Z3' Sl ,  isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
--where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT','Local-Tarrif') 
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('Other','Trading','TollReceive','Service','ServiceNS',
'TollReceive-WIP','PurchaseCN')

UNION ALL
SELECT  'Z4' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('InputService')
UNION ALL

SELECT 'Z5' Sl ,   isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','ServiceImport','ServiceNSImport')


UNION ALL
SELECT 'Z6' Sl ,  -isnull(sum(PID.VATAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<  @StartDate and Type in('Local-VAT') 
AND PID.TransactionType IN('PurchaseReturn','PurchaseDN')

UNION ALL
SELECT 'Z7' Sl ,-isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Other','ServiceStock','Service','Trading','TradingTender','Tender','Debit','InternalIssue','TollFinishIssue','PackageSale','PackageProduction','ServiceNS','Wastage')


UNION ALL
SELECT 'Z8' Sl ,-isnull(sum(CurrencyValue*VATRate/100),0)Amt
FROM SalesInvoiceDetails SID 
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='Export' 
AND SID.TransactionType IN('Export','ExportService','ExportServiceNS','ExportTender','ExportTrading','ExportTradingTender','ExportPackage')

UNION ALL

SELECT 'Z9' Sl ,isnull(sum(SID.VATAmount),0)Amt
FROM SalesInvoiceDetails SID
where SID.post='Y' and SID.invoicedatetime<   @StartDate and Type='VAT' 
AND SID.TransactionType IN('Credit')
UNION ALL

select 'Z10' Sl ,-isnull(sum(isnull(SIH.AppVATAmount,0)+isnull(SIH.AppVATAmountImport,0)),0) Amt
from  DisposeHeaders SIH
where SIH.DisposeDate <  @StartDate
AND SIH.TransactionType IN('VAT26','VAT27')
AND (SIH.Post ='Y')

UNION ALL
select 'Z11' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Credit Payable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z12' Sl ,-sum(isnull(SIH.AdjAmount,0)) Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <   @StartDate
AND SIH.AdjType in('Shortage Rebatable')
AND (SIH.Post ='Y')
UNION ALL
select 'Z13' Sl ,sum(isnull(SIH.AdjAmount,0))   Amt
from  AdjustmentHistorys SIH
where SIH.AdjDate <  @StartDate
AND SIH.AdjType in('Rebatable')
AND (SIH.Post='Y')


UNION ALL
select 'Z14' Sl ,sum(isnull(SIH.TotalDDBack,0))   Amt
from  DutyDrawBackHeader SIH
where SIH.DDBackDate <  @StartDate
AND (SIH.Post='Y')


UNION ALL
SELECT 'Z15' Sl ,   isnull(sum(PID.ATVAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate< @StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('Import','TradingImport','InputServiceImport','ServiceImport','ServiceNSImport')

UNION ALL
SELECT  'Z16' Sl ,  isnull(sum(PID.RebateAmount),0)Amt
FROM PurchaseInvoiceDetails PID
where PID.post='Y' and PID.ReceiveDate<@StartDate and Type in('Import-VAT') 
AND PID.TransactionType IN('InputServiceImport')

UNION ALL

select 'Z17' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' 
AND Deposits.TransactionType  IN('Treasury-Opening-Credit')

UNION ALL

select 'Z18' Sl ,-isnull(sum(DepositAmount),0)Amt
from  Deposits where post='Y' and DepositDateTime < @StartDate
AND Deposits.TransactionType  IN('Treasury-Credit')


----close
)AS a 




insert into #VAT_18(Serial, StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,Remarks,ID)
values('A',@StartDate,@StartDate,0,'Starting',@PVat,0,'Opening','0')

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,isnull(DepositAmount,0),'Deposit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury')
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select 'A1',   DepositDateTime DepositDateTime,DepositDateTime,
depositId,'Deposit',0,-isnull(DepositAmount,0),'TreasuryCredit',depositId
from  Deposits    where DepositDateTime >= @StartDate 
and DepositDateTime < DATEADD(d,1,   @EndDate)
AND Deposits.TransactionType IN('Treasury-Credit')
AND (Post =@post1 or Post= @post2)



insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Sale',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Other','Wastage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo


insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Service',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Service')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceNS',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceNS')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Trading',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Trading')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TradingTender',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TradingTender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'Export',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1, @EndDate)
AND SID.TransactionType IN('Export')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportService',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportService')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportServiceNS',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,@EndDate)
AND SID.TransactionType IN('ExportServiceNS')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTender',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
 AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTrading',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTrading')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(CurrencyValue*VATRate/100),0),'ExportTradingTender',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('ExportTradingTender')AND SID.Type IN('Export')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Tender',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Tender')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Transfer',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('InternalIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'Debit',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo = SIH.SalesInvoiceNo
AND sid.invoicedatetime >= @StartDate and sid.invoicedatetime < DATEADD(d,1,   @EndDate)
AND SID.TransactionType IN('Debit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'TollFinishIssue',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('TollFinishIssue')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ServiceStock',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
ANd sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ServiceStock')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageSale',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageSale')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'PackageProduction',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('PackageProduction')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select distinct 'C1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Sale',
0,isnull(sum(SID.VATAmount),0),'ExportPackage',SID.SalesInvoiceNo
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('ExportPackage')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'CreditPayble',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=@StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Credit Payable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'D1',      ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,-SUM(ah.AdjAmount),'ShortageRebatable',AdjHistoryNo
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND (ah.AdjType='Shortage Rebatable')
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,
DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 26'  ,DisposeNumber
   from  DisposeHeaders 
where DisposeDate >=  @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT26') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1', DisposeDate,DisposeDate DisposeDate,DisposeNumber,'Sale',
0,isnull(isnull(AppVATAmount,0)+isnull(AppVATAmountImport,0),0),'VAT 27' ,DisposeNumber 
   from  DisposeHeaders 
where DisposeDate > @StartDate and DisposeDate < DATEADD(d,1,  @EndDate)
AND DisposeHeaders.TransactionType IN('VAT27') 
AND (Post =@post1 or Post= @post2)

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',        SID.InvoiceDateTime,
SID.InvoiceDateTime,SIH.CompInvoiceNo,'Purchase',
0,isnull(sum(SID.VATAmount),0),'Credit',SID.SalesInvoiceNo 
from  SalesInvoiceDetails SID, SalesInvoiceHeaders SIH
where SID.SalesInvoiceNo=SIH.SalesInvoiceNo
AND sid.invoicedatetime >=  @StartDate and sid.invoicedatetime < DATEADD(d,1,  @EndDate)
AND SID.TransactionType IN('Credit')AND SID.Type IN('VAT')
AND (SID.Post =@post1 or SID.Post= @post2)
GROUP BY SID.InvoiceDateTime,SID.InvoiceDateTime,SID.SalesInvoiceNo,SIH.CompInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Purchase',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Other')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Service',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('Service')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',      PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNS',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceNS')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',       PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'PurchaseCN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseCN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Trading',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('Trading')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'TollReceive-WIP',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('TollReceive-WIP')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',  PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputService',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=   @StartDate  and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('InputService')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.VATAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo



insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.RebateAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseReturn',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('PurchaseReturn')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


--add by Ruba for calculating ATVAmount of Import Purchases

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)

select  distinct 'B1', PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1, @EndDate)
AND PID.TransactionType IN('ServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'ServiceNSImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate)
AND PID.TransactionType IN('ServiceNSImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY PID.ReceiveDate,PID.ReceiveDate,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',     PID.ReceiveDate ReceiveDate,
PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'TradingImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate  and PID.ReceiveDate < DATEADD(d,1,    @EndDate )
AND PID.TransactionType IN('TradingImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate ,PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'Import',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('Import')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo


insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'B1',    PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Purchase',0,
isnull(sum(PID.ATVAmount),0),'InputServiceImport',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >=  @StartDate and PID.ReceiveDate < DATEADD(d,1,   @EndDate )
AND PID.TransactionType IN('InputServiceImport')AND pid.Type IN('Import-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

-------close

insert into #VAT_18(Serial,    StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select  distinct 'C1',   PID.ReceiveDate ReceiveDate,
 PID.ReceiveDate ReceiveDate,PID.BENumber,'Sale',0,
isnull(sum(PID.VATAmount),0),'PurchaseDN',PID.PurchaseInvoiceNo
from  PurchaseInvoiceDetails PID
where PID.ReceiveDate >= @StartDate and PID.ReceiveDate < DATEADD(d,1,  @EndDate )
AND PID.TransactionType IN('PurchaseDN')AND pid.Type IN('Local-VAT')
AND (pid.Post =@post1 or pid.Post= @post2)
GROUP BY  PID.ReceiveDate , PID.ReceiveDate ,PID.BENumber,PID.PurchaseInvoiceNo

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.AdjDate,ah.AdjDate,isnull(ah.AdjHistoryNo,'-'),'DDB',0,SUM(ah.AdjAmount),'Rebatable',ah.AdjHistoryID
FROM AdjustmentHistorys ah
where ah.AdjDate >=  @StartDate and ah.AdjDate< DATEADD(d,1,  @EndDate)
AND ah.AdjType='Rebatable'
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.AdjDate,ah.AdjDate,ah.AdjHistoryNo,ah.AdjHistoryID

insert into #VAT_18(Serial,StartDateTime,ReceiveDate,TransID,TransType,    StartingVAT,VAT,remarks,ID)
select   DISTINCT 'D1', ah.DDBackDate,ah.DDBackDate,isnull(ah.DDBackNo,'-'),'DDB',0,SUM(ah.TotalDDBack),'DDB',ah.DDBackNo
FROM DutyDrawBackHeader ah
where ah.DDBackDate >=  @StartDate and ah.DDBackDate< DATEADD(d,1, @EndDate)
AND (ah.Post =@post1 or ah.Post= @post2)
GROUP BY ah.DDBackDate,ah.DDBackDate,ah.DDBackNo

select Serial,StartDateTime,ReceiveDate,TransID,TransType,StartingVAT,VAT,Remarks
FROM
(
	
	select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18   where   Remarks='Opening'
UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where   (vat>0 ) AND Remarks<>'Opening'

UNION ALL
select  Serial,  #VAT_18.StartDateTime StartDateTime,
#VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where Remarks in ('CreditPayble','ShortageRebatable','TreasuryCredit') AND (vat < 0)

UNION all
select   Serial, #VAT_18.StartDateTime StartDateTime,
 #VAT_18.ReceiveDate ReceiveDate,TransID,TransType, 
isnull(StartingVAT,0)StartingVAT,isnull(VAT,0)VAT ,Remarks
from #VAT_18    where  Remarks IN('Export','ExportTradingTender','ExportTrading','ExportTender','ExportService','ExportServiceNS') AND vat=0
) AS a

 ORDER BY StartDateTime, Serial


DROP TABLE #VAT_18

                ";

                #endregion statement

                gototop = "Go";

                #region SQL Command

                SqlCommand objCommVAT18 = new SqlCommand();
                objCommVAT18.Connection = currConn;

                objCommVAT18.CommandText = sqlText;
                objCommVAT18.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                if (!objCommVAT18.Parameters.Contains("@UserName"))
                {
                    objCommVAT18.Parameters.AddWithValue("@UserName", UserName);
                }
                else
                {
                    objCommVAT18.Parameters["@UserName"].Value = UserName;
                }
                if (!objCommVAT18.Parameters.Contains("@StartDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objCommVAT18.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objCommVAT18.Parameters.Contains("@EndDate"))
                {
                    objCommVAT18.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objCommVAT18.Parameters["@EndDate"].Value = EndDate;
                }

                if (!objCommVAT18.Parameters.Contains("@post1"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post1", post1);
                }
                else
                {
                    objCommVAT18.Parameters["@post1"].Value = post1;
                }

                if (!objCommVAT18.Parameters.Contains("@post2"))
                {
                    objCommVAT18.Parameters.AddWithValue("@post2", post2);
                }
                else
                {
                    objCommVAT18.Parameters["@post2"].Value = post2;
                }
                //if (!objCommVAT18.Parameters.Contains("@PVat"))
                //{ objCommVAT18.Parameters.AddWithValue("@PVat", PVat); }
                //else { objCommVAT18.Parameters["@PVat"].Value = PVat; }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objCommVAT18);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }

        public DataSet SaleReceiveMIS(string StartDate, string EndDate, string ShiftId = "1", string Post = null)
        {
            #region Variables

            SqlConnection currConn = null;
            int transResult = 0;
            int countId = 0;
            string sqlText = "";
            DataSet dataSet = new DataSet("ReportVATDDB");
            //DataTable dataTable = new DataTable("ReportVAT16");

            #endregion

            #region Try

            try
            {
                #region open connection and transaction

                currConn = _dbsqlConnection.GetConnection();
                if (currConn.State != ConnectionState.Open)
                {
                    currConn.Open();
                }

                #endregion open connection and transaction

                #region SQL Statement

                #region Backup



                //top = "Go";

                #endregion Backup

                #region Backup

                string top;


                sqlText = @"
 
            select * from (
            select  'A'Sl,  h.SalesInvoiceNo,h.InvoiceDateTime Date,isnull(s.ShiftName,'Any')ShiftName,p.ProductName,d.Quantity,d.UOM
,case when  h.TransactionType='other' then 'Sale'  else  h.TransactionType end  Transactiontype

            from SalesInvoiceDetails d
            left outer join SalesInvoiceHeaders h on d.SalesInvoiceNo=h.SalesInvoiceNo
            left outer join Products p on d.ItemNo=p.ItemNo
            left outer join customers C on h.CustomerID=c.CustomerID
            left outer join Shifts s on s.Id=h.ShiftId
            where   h.InvoiceDateTime >= @StartDate and h.InvoiceDateTime <DATEADD(d,1,@EndDate)
            ";
                if (Convert.ToInt32(ShiftId) > 1)
                    sqlText += " and h.ShiftId='" + ShiftId + "' ";
                if (!string.IsNullOrEmpty(Post))
                    sqlText += " and h.Post='" + Post + "' ";

                sqlText += @"
            union all
            select  'B'Sl,  h.ReceiveNo,h.ReceiveDateTime,isnull(s.ShiftName,'Any')ShiftName,p.ProductName,d.Quantity,d.UOM 
,case when  h.TransactionType='other' then 'Receive'  else  h.TransactionType end  Transactiontype
            from ReceiveDetails d
            left outer join ReceiveHeaders h on d.ReceiveNo=h.ReceiveNo
            left outer join Products p on d.ItemNo=p.ItemNo
            left outer join customers C on h.CustomerID=c.CustomerID
            left outer join Shifts s on s.Id=h.ShiftId
            where  h.ReceiveDateTime >= @StartDate and h.ReceiveDateTime <DATEADD(d,1,@EndDate)
            ";
                if (Convert.ToInt32(ShiftId) > 1)
                    sqlText += " and h.ShiftId='" + ShiftId + "' ";
                if (!string.IsNullOrEmpty(Post))
                    sqlText += " and h.Post='" + Post + "' ";

                sqlText += @"

            ) as a
            order by Date

            ";

                top = "Go";

                #endregion Backup

                #endregion

                #region SQL Command

                SqlCommand objComm = new SqlCommand();
                objComm.Connection = currConn;

                objComm.CommandText = sqlText;
                objComm.CommandType = CommandType.Text;

                #endregion

                #region Parameter

                objComm.CommandText = sqlText;
                objComm.CommandType = CommandType.Text;
                if (Convert.ToInt32(ShiftId) > 1)
                {
                    if (!objComm.Parameters.Contains("@ShiftId"))
                    {
                        objComm.Parameters.AddWithValue("@ShiftId", ShiftId);
                    }
                    else
                    {
                        objComm.Parameters["@ShiftId"].Value = ShiftId;
                    }
                }
                if (!string.IsNullOrEmpty(Post))
                {
                    if (!objComm.Parameters.Contains("@Post"))
                    {
                        objComm.Parameters.AddWithValue("@Post", Post);
                    }
                    else
                    {
                        objComm.Parameters["@Post"].Value = Post;
                    }
                }


                if (!objComm.Parameters.Contains("@StartDate"))
                {
                    objComm.Parameters.AddWithValue("@StartDate", StartDate);
                }
                else
                {
                    objComm.Parameters["@StartDate"].Value = StartDate;
                }

                if (!objComm.Parameters.Contains("@EndDate"))
                {
                    objComm.Parameters.AddWithValue("@EndDate", EndDate);
                }
                else
                {
                    objComm.Parameters["@EndDate"].Value = EndDate;
                }

                #endregion Parameter

                SqlDataAdapter dataAdapter = new SqlDataAdapter(objComm);
                dataAdapter.Fill(dataSet);

            }
            #endregion

            #region Catch & Finally

            catch (SqlException sqlex)
            {
                throw sqlex;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (currConn.State == ConnectionState.Open)
                {
                    currConn.Close();
                }

            }

            #endregion

            return dataSet;
        }
    }
}
